var searchIndex = JSON.parse('{\
"mmtk":{"doc":"Memory Management ToolKit (MMTk) is a portable and high â€¦","t":[4,4,13,13,13,13,13,3,3,3,8,13,13,8,8,8,13,16,16,10,10,12,10,12,10,0,10,12,10,12,10,12,10,10,10,10,12,0,0,12,12,12,0,12,12,0,10,10,10,10,12,10,10,10,12,10,0,12,0,0,17,3,3,3,3,17,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,3,3,7,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,8,4,4,13,17,13,17,17,13,13,13,17,17,3,8,17,13,13,13,8,3,17,8,3,13,17,13,16,3,10,12,10,12,12,0,10,12,10,12,10,10,10,12,12,0,12,0,10,10,10,10,0,0,0,0,12,12,12,12,0,12,12,12,12,12,12,0,12,0,12,0,10,10,10,10,10,10,10,10,0,0,12,12,12,8,4,4,3,13,13,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,12,12,12,11,11,11,11,11,11,11,17,3,17,17,17,12,11,11,11,11,0,5,11,11,11,11,11,0,0,0,11,11,11,11,11,5,11,11,11,0,0,0,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,3,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,3,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5,5,4,3,13,3,13,13,13,4,13,13,13,13,8,8,13,16,12,12,12,11,11,11,11,11,11,11,11,10,12,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,11,11,10,11,11,11,5,5,5,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,12,10,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,12,11,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,11,12,12,10,11,11,11,11,11,11,11,11,12,12,11,10,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,0,0,0,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,3,17,12,11,11,11,11,5,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,0,0,0,12,3,3,6,3,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,17,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,3,17,12,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,0,0,0,12,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,17,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,3,17,12,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,18,3,3,8,3,6,10,11,12,12,11,11,11,11,11,11,10,11,12,11,11,11,11,11,11,12,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,10,11,10,11,12,10,11,12,12,11,11,11,11,11,11,11,11,11,11,0,0,17,3,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,12,11,11,11,11,11,11,3,3,17,12,12,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,0,0,0,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,3,17,12,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,17,17,3,11,11,12,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,0,0,0,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,3,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,17,12,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,18,8,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,0,0,0,0,0,0,0,0,0,0,8,16,10,11,11,10,10,3,3,17,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,8,6,10,11,10,17,17,17,17,0,0,0,0,0,14,5,12,3,3,4,18,18,18,18,18,18,18,18,18,13,18,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,18,13,18,3,3,4,13,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,3,6,18,18,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,3,3,18,3,17,17,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,3,17,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,17,3,17,17,17,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,3,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,11,12,11,11,11,12,12,11,11,11,11,11,0,0,12,17,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,17,17,3,3,3,17,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,12,17,17,17,18,3,3,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,17,17,17,3,3,8,3,8,3,11,12,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,5,11,10,11,12,12,12,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,10,11,11,12,12,12,12,11,10,11,12,12,12,12,11,11,11,12,11,5,10,5,11,11,11,12,10,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,13,13,13,8,13,13,13,3,8,3,13,13,8,13,13,16,3,13,13,13,16,13,4,0,12,12,10,10,0,12,12,12,12,10,12,12,12,0,12,12,12,12,0,12,10,0,0,0,0,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,12,11,11,11,12,12,12,12,12,18,18,16,6,3,18,18,3,3,3,3,3,3,8,3,3,3,3,3,18,18,3,3,8,16,3,3,3,3,3,16,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,12,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,11,12,12,12,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,12,12,12,12,11,10,11,11,11,11,11,11,11,10,11,11,12,12,12,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,4,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,8,8,8,16,16,16,10,11,11,3,13,13,13,13,13,13,17,13,13,13,13,13,13,13,13,3,4,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,8,3,11,11,11,11,12,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,10,11,11,12,10,11,12,10,11,11,11,12,11,11,11,11,11,11,3,3,18,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,11,12,11,11,11,12,12,12,11,12,12,12,11,11,11,11,11,11,11,11,11,12,11,12,3,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,12,3,6,6,18,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,8,4,3,13,13,13,13,3,13,3,13,3,13,13,10,10,0,0,12,0,12,10,0,5,10,10,10,0,0,12,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,4,8,13,13,5,5,10,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,5,11,11,5,10,10,11,11,10,11,11,11,11,11,11,11,11,11,4,3,13,13,13,17,17,17,17,17,13,13,13,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,12,12,12,12,12,17,17,17,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,12,12,11,11,11,17,17,17,17,17,5,5,3,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,12,12,11,11,12,12,11,11,11,11,12,12,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,18,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,17,17,5,5,5,5,5,5,5,5,5,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,12,10,11,11,11,11,11,11,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,12,11,11,12,11,11,11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,4,4,13,6,13,3,13,17,17,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,5,11,11,11,14,12,12,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,17,17,17,8,17,17,17,17,17,17,17,17,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,3,3,3,17,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,12,11,11,11,0,0,0,0,0,0,0,3,17,17,17,17,17,17,17,17,17,17,17,17,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,6,6,17,17,17,16,8,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,3,17,11,11,11,11,12,11,11,11,11,11,12,11,11,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,8,13,13,13,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,13,13,3,4,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,12,12,3,3,3,8,12,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,17,7,17,17,17,17,17,17,17,17,17,3,17,17,17,17,17,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,17,5,12,18,3,18,8,3,8,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,0,5,0,5,5,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,4,13,5,5,5,0,0,5,0,0,5,12,12,13,4,13,11,11,11,11,11,11,5,11,11,11,5,11,5,5,11,11,11,11,11,11,11,11,5,5,11,11,11,11,12,12,17,17,3,17,17,11,11,12,11,11,11,11,5,11,11,11,11,5,5,11,11,11,11,11,11,11,11,5,11,12,5,11,11,11,11,17,17,17,17,17,17,3,3,19,3,3,12,5,5,0,12,5,5,5,0,12,12,0,12,5,5,12,12,12,5,12,12,12,0,0,12,0,12,5,5,17,17,17,17,17,17,17,17,17,17,17,3,3,19,3,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,5,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,5,5,12,12,12,11,12,11,11,11,12,11,12,11,12,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,13,3,7,4,3,3,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,11,5,5,11,5,5,5,17,17,17,17,17,17,17,17,17,17,14,17,17,17,17,17,17,5,5,5,5,5,5,5,5,5,5,5,5,5,12,12,12,12,3,18,18,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,17,17,13,13,13,13,3,13,13,17,13,13,4,3,4,3,13,3,4,13,13,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,12,12,12,14,11,11,12,12,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,17,17,17,3,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,12,11,12,12,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,12,12,12,12,12,17,13,3,3,3,3,3,3,13,4,3,13,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,12,11,11,11,5,12,0,0,5,3,3,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,8,8,3,16,11,11,11,11,10,11,11,11,10,11,11,0,11,10,10,11,11,11,11,11,0,10,10,10,10,10,11,10,10,10,10,0,10,10,11,10,10,11,11,11,11,3,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,3,6,11,11,11,11,12,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,12,11,12,12,11,12,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,17,17,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,12,12,12,18,18,8,8,13,8,8,16,4,18,18,18,18,8,8,8,8,8,16,8,16,16,3,3,3,3,3,16,16,16,13,0,10,0,10,10,10,10,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,10,10,10,10,0,10,10,10,10,10,10,0,10,10,10,10,10,10,10,10,12,12,8,3,12,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,10,10,11,11,11,10,12,10,12,11,11,11,11,11,18,18,8,13,4,13,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,10,11,11,11,11,11,12,12,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,12,10,11,11,11,11,11,18,18,18,18,18,18,18,18,18,18,18,18,8,18,18,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,10,12,12,12,12,12,18,18,18,18,18,18,18,18,18,18,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,8,11,11,10,10,10,10,10,10,8,8,8,18,18,18,18,8,10,10,10,10,10,11,11,10,10,10,11,11,10,10,10],"n":["AllocationSemantics","BarrierSelector","Code","Default","Immortal","LargeCode","Los","MMTK","MMTKBuilder","Mutator","MutatorContext","NoBarrier","ObjectBarrier","ObjectQueue","Plan","PolicyCopyContext","ReadOnly","VM","VM","alloc","alloc_copy","allocators","barrier","barrier","base","build_info","collection_required","config","constraints","edge_logger","enqueue","finalizable_processor","get_allocator_mapping","get_spaces","get_tls","get_used_pages","inside_harness","memory_manager","mmtk","mutator_tls","options","options","plan","plan","plan","policy","post_alloc","prepare","prepare","prepare","reference_processors","release","release","release","sanity_checker","schedule_collection","scheduler","scheduler","util","vm","MMTK_FEATURES","MMTK_FULL_BUILD_INFO","MMTK_FULL_BUILD_INFO_STRING","MMTK_GIT_VERSION","MMTK_GIT_VERSION_STRING","MMTK_PKG_VERSION","__private_field","__private_field","__private_field","__private_field","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","from","from","from","from","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","raw","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","CFG_ENDIAN","CFG_ENV","CFG_FAMILY","CFG_OS","CFG_POINTER_WIDTH","CFG_TARGET_ARCH","CI_PLATFORM","DEBUG","FEATURES","FEATURES_STR","GIT_COMMIT_HASH","GIT_DIRTY","GIT_HEAD_REF","GIT_VERSION","HOST","NUM_JOBS","OPT_LEVEL","PKG_AUTHORS","PKG_DESCRIPTION","PKG_HOMEPAGE","PKG_LICENSE","PKG_NAME","PKG_REPOSITORY","PKG_VERSION","PKG_VERSION_MAJOR","PKG_VERSION_MINOR","PKG_VERSION_PATCH","PKG_VERSION_PRE","PROFILE","RUSTC","RUSTC_VERSION","RUSTDOC","RUSTDOC_VERSION","TARGET","add_finalizer","add_phantom_candidate","add_soft_candidate","add_weak_candidate","add_work_packet","add_work_packets","alloc","bind_mutator","calloc","counted_calloc","counted_malloc","destroy_mutator","disable_collection","enable_collection","flush_mutator","free","free_bytes","free_with_size","gc_poll","get_all_finalizers","get_allocator_mapping","get_finalized_object","get_finalizers_for","handle_user_collection_request","harness_begin","harness_end","initialize_collection","is_in_mmtk_spaces","is_live_object","is_mapped_address","is_mmtk_object","last_heap_address","malloc","mmtk_init","modify_check","num_of_workers","on_closure_end","post_alloc","post_write_barrier","process","process_bulk","realloc","realloc_with_old_size","start_control_collector","start_worker","starting_heap_address","total_bytes","used_bytes","MMAPPER","MMTK","MMTKBuilder","SFT_MAP","VM_MAP","__private_field","__private_field","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","edge_logger","finalizable_processor","from","from","from","from","get_options","get_plan","harness_begin","harness_end","init","init","init","init","inside_harness","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","new","new","options","options","plan","reference_processors","sanity_checker","scheduler","set_option","set_options_bulk_by_str","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","AllocationSemantics","Barrier","BarrierSelector","BarrierWriteTarget","Code","DEFAULT_PLAN_CONSTRAINTS","Default","GENCOPY_CONSTRAINTS","IMMIX_CONSTRAINTS","Immortal","LargeCode","Los","MARKCOMPACT_CONSTRAINTS","MS_CONSTRAINTS","Mutator","MutatorContext","NOGC_CONSTRAINTS","NoBarrier","Object","ObjectBarrier","ObjectQueue","ObjectsClosure","PP_CONSTRAINTS","Plan","PlanConstraints","ReadOnly","SS_CONSTRAINTS","Slot","VM","VectorObjectQueue","alloc","allocators","barrier","barrier","barrier","barriers","base","buffer","collection_required","config","constraints","enqueue","flush","gc_header_bits","gc_header_words","gc_requester","generate_gc_trace","generational","get_allocator_mapping","get_spaces","get_tls","get_used_pages","global","immix","markcompact","marksweep","max_non_los_copy_bytes","max_non_los_default_alloc_bytes","may_trace_duplicate_edges","moves_objects","mutator_context","mutator_tls","needs_concurrent_workers","needs_forward_after_liveness","needs_linear_scan","needs_log_bit","nodes","nogc","num_specialized_scans","pageprotect","plan","plan_constraints","post_alloc","post_write_barrier","post_write_barrier_slow","prepare","prepare","release","release","schedule_collection","semispace","tracing","worker","0","0","Barrier","BarrierSelector","BarrierWriteTarget","NoBarrier","NoBarrier","Object","ObjectBarrier","ObjectRememberingBarrier","Slot","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","barrier","barrier_slow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","enqueue_node","eq","equals","flush","flush","flush","fmt","from","from","from","from","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","log_object","meta","mmtk","modbuf","new","post_write_barrier","post_write_barrier","post_write_barrier","post_write_barrier_slow","post_write_barrier_slow","post_write_barrier_slow","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","GCRequester","RequestSync","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clear_request","default","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","last_request_count","new","phantom","request","request_condvar","request_count","request_flag","request_sync","try_from","try_from","try_into","try_into","type_id","type_id","wait_for_request","ACTIVE_BARRIER","ALLOCATOR_MAPPING","FULL_NURSERY_GC","GEN_CONSTRAINTS","RESERVED_ALLOCATORS","__private_field","as_any","as_any_mut","borrow","borrow_mut","copying","create_gen_space_mapping","deref","deref","deref_mut","drop","from","gc_work","global","immix","init","into","into_any","into_any_arc","into_any_rc","new_generational_global_metadata_specs","try_from","try_into","type_id","gc_work","global","mutator","0","0","GenCopyGCWorkContext","GenCopyNurseryGCWorkContext","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","try_from","try_from","try_into","try_into","type_id","type_id","GENCOPY_CONSTRAINTS","GenCopy","as_any","as_any_mut","base","borrow","borrow_mut","collection_required","common","constraints","copyspace0","copyspace1","create_copy_config","deref","deref_mut","drop","force_full_heap_collection","from","fromspace","fromspace_mut","gen","generational","get_allocator_mapping","get_available_pages","get_collection_reserved_pages","get_mature_physical_pages_available","get_spaces","get_used_pages","hi","init","into","into_any","into_any_arc","into_any_rc","is_current_gc_nursery","last_collection_full_heap","may_move_objects","new","post_scan_object","prepare","prepare_worker","release","requires_full_heap_collection","schedule_collection","tospace","tospace_mut","trace_object","try_from","try_into","type_id","create_gencopy_mutator","gencopy_mutator_prepare","gencopy_mutator_release","GenNurseryProcessEdges","as_any","as_any_mut","base","borrow","borrow_mut","create_scan_work","deref","deref","deref_mut","deref_mut","drop","from","gen","init","into","into_any","into_any_rc","new","process_edge","trace_object","try_from","try_into","type_id","Gen","as_any","as_any_mut","borrow","borrow_mut","collection_required","common","deref","deref_mut","drop","force_full_heap_collection","from","full_heap_gc_count","gc_full_heap","get_collection_reserved_pages","get_spaces","get_used_pages","init","into","into_any","into_any_arc","into_any_rc","is_current_gc_nursery","last_collection_full_heap","may_move_objects","new","next_gc_full_heap","nursery","post_scan_object","prepare","release","requires_full_heap_collection","set_next_gc_full_heap","should_next_gc_be_full_heap","trace_object","trace_object_full_heap","trace_object_nursery","try_from","try_into","type_id","verify_side_metadata_sanity","virtual_memory_exhausted","gc_work","global","mutator","0","0","GenImmixMatureGCWorkContext","GenImmixNurseryGCWorkContext","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","try_from","try_from","try_into","try_into","type_id","type_id","GENIMMIX_CONSTRAINTS","GenImmix","as_any","as_any_mut","base","borrow","borrow_mut","collection_required","common","constraints","create_copy_config","deref","deref_mut","drop","force_full_heap_collection","from","gen","generational","get_allocator_mapping","get_available_pages","get_collection_reserved_pages","get_mature_physical_pages_available","get_spaces","get_used_pages","immix","init","into","into_any","into_any_arc","into_any_rc","is_current_gc_nursery","last_collection_full_heap","last_collection_was_exhaustive","last_gc_was_defrag","last_gc_was_full_heap","may_move_objects","new","post_scan_object","prepare","release","requires_full_heap_collection","schedule_collection","trace_object","try_from","try_into","type_id","create_genimmix_mutator","genimmix_mutator_prepare","genimmix_mutator_release","AllocationSemantics","BasePlan","Code","CommonPlan","Default","GcPrepare","GcProper","GcStatus","Immortal","LargeCode","Los","NotInGC","Plan","PlanTraceObject","ReadOnly","VM","allocation_bytes","allocation_success","analysis_manager","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","base","base","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","code_lo_space","code_space","collection_required","collection_required","common","common","common","constraints","create_copy_config","create_copy_config","create_copy_config","create_gc_worker_context","create_mutator","create_plan","create_vm_space","cur_collection_attempts","decrease_malloc_bytes_by","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","determine_collection_attempts","downcast","downcast_mut","downcast_rc","downcast_ref","drop","drop","drop","drop","emergency_collection","enter_sanity","enter_sanity","enter_sanity","eq","eq","fmt","force_full_heap_collection","force_full_heap_collection","force_full_heap_collection","from","from","from","from","from_usize","gc_in_progress","gc_in_progress_proper","gc_requester","gc_status","generational","generational","generational","get_allocator_mapping","get_available_pages","get_available_pages","get_available_pages","get_collection_reserved_pages","get_collection_reserved_pages","get_collection_reserved_pages","get_free_pages","get_free_pages","get_free_pages","get_immortal","get_los","get_malloc_bytes","get_mature_physical_pages_available","get_mature_physical_pages_available","get_mature_physical_pages_available","get_reserved_pages","get_reserved_pages","get_reserved_pages","get_spaces","get_spaces","get_spaces","get_total_pages","get_total_pages","get_total_pages","get_used_pages","get_used_pages","get_used_pages","handle_user_collection_request","handle_user_collection_request","handle_user_collection_request","handle_user_collection_request","heap","immortal","increase_allocation_bytes_by","increase_malloc_bytes_by","inform_stack_scanned","init","init","init","init","initialized","inside_sanity","internal_triggered_collection","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_usize","is","is_current_gc_nursery","is_current_gc_nursery","is_current_gc_nursery","is_emergency_collection","is_emergency_collection","is_emergency_collection","is_in_sanity","is_in_sanity","is_in_sanity","is_initialized","is_initialized","is_initialized","is_internal_triggered_collection","is_precise_stress","is_stress_test_gc_enabled","is_user_triggered_collection","last_collection_full_heap","last_collection_full_heap","last_collection_full_heap","last_collection_was_exhaustive","last_collection_was_exhaustive","last_collection_was_exhaustive","last_internal_triggered_collection","last_stress_pages","leave_sanity","leave_sanity","leave_sanity","log_poll","log_poll","log_poll","los","malloc_bytes","max_collection_attempts","may_move_objects","may_move_objects","may_move_objects","mmapper","mmapper","mmapper","mmapper","modify_check","modify_check","modify_check","mutator_iterator_lock","new","new","options","options","options","options","poll","poll","poll","post_scan_object","post_scan_object","post_scan_object","prepare","prepare","prepare","prepare_for_stack_scanning","prepare_worker","prepare_worker","prepare_worker","release","release","release","reset_collection_trigger","ro_space","scanned_stacks","schedule_collection","set_collection_kind","set_gc_status","should_do_stress_gc","should_trigger_gc_when_heap_is_full","should_trigger_gc_when_heap_is_full","should_trigger_gc_when_heap_is_full","stacks_prepared","stacks_prepared","stacks_prepared","stats","to_owned","trace_object","trace_object","trace_object","trace_object","trace_object","trigger_gc_when_heap_is_full","trigger_internal_collection_request","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","user_triggered_collection","verify_side_metadata_sanity","verify_side_metadata_sanity","vm_map","vm_space","gc_work","global","mutator","0","ImmixGCWorkContext","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","into_any","into_any_arc","into_any_rc","try_from","try_into","type_id","IMMIX_CONSTRAINTS","Immix","as_any","as_any_mut","base","borrow","borrow_mut","collection_required","common","common","constraints","create_copy_config","deref","deref_mut","drop","from","get_allocator_mapping","get_collection_reserved_pages","get_spaces","get_used_pages","immix_space","init","into","into_any","into_any_arc","into_any_rc","last_collection_was_exhaustive","last_gc_was_defrag","may_move_objects","new","post_scan_object","prepare","release","schedule_collection","trace_object","try_from","try_into","type_id","ALLOCATOR_MAPPING","RESERVED_ALLOCATORS","__private_field","as_any","as_any_mut","borrow","borrow_mut","create_immix_mutator","deref","deref","deref_mut","drop","from","immix_mutator_prepare","immix_mutator_release","init","into","into_any","into_any_arc","into_any_rc","try_from","try_into","type_id","gc_work","global","mutator","0","CalculateForwardingAddress","Compact","ForwardingProcessEdges","MarkCompactGCWorkContext","MarkingProcessEdges","UpdateReferences","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","do_work","do_work","do_work","drop","drop","drop","drop","from","from","from","from","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","mc_space","mc_space","new","new","new","p","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","MARKCOMPACT_CONSTRAINTS","MarkCompact","as_any","as_any_mut","base","borrow","borrow_mut","collection_required","common","common","constraints","deref","deref_mut","drop","from","get_allocator_mapping","get_collection_reserved_pages","get_spaces","get_used_pages","init","into","into_any","into_any_arc","into_any_rc","may_move_objects","mc_space","mc_space","new","post_scan_object","prepare","release","schedule_collection","trace_object","try_from","try_into","type_id","ALLOCATOR_MAPPING","RESERVED_ALLOCATORS","__private_field","as_any","as_any_mut","borrow","borrow_mut","create_markcompact_mutator","deref","deref","deref_mut","drop","from","init","into","into_any","into_any_arc","into_any_rc","markcompact_mutator_prepare","markcompact_mutator_release","try_from","try_into","type_id","gc_work","global","mutator","0","MSGCWorkContext","MSSweepChunk","MSSweepChunks","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chunk","deref","deref","deref","deref_mut","deref_mut","deref_mut","do_work","do_work","drop","drop","drop","from","from","from","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","ms","new","plan","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","MS_CONSTRAINTS","MarkSweep","as_any","as_any_mut","base","borrow","borrow_mut","collection_required","common","common","constraints","deref","deref_mut","drop","from","get_allocator_mapping","get_spaces","get_used_pages","init","into","into_any","into_any_arc","into_any_rc","may_move_objects","ms","ms_space","new","post_scan_object","prepare","release","schedule_collection","trace_object","try_from","try_into","type_id","ALLOCATOR_MAPPING","RESERVED_ALLOCATORS","__private_field","as_any","as_any_mut","borrow","borrow_mut","create_ms_mutator","deref","deref","deref_mut","drop","from","init","into","into_any","into_any_arc","into_any_rc","ms_mutator_prepare","ms_mutator_release","try_from","try_into","type_id","DEFAULT","Mutator","MutatorConfig","MutatorContext","ReservedAllocators","SpaceMapping","alloc","alloc","allocator_mapping","allocators","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","barrier","barrier","barrier","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","config","create_allocator_mapping","create_space_mapping","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","flush","flush","flush","flush_remembered_sets","flush_remembered_sets","flush_remembered_sets","fmt","from","from","from","get_tls","get_tls","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","mutator_tls","n_bump_pointer","n_immix","n_large_object","n_malloc","n_mark_compact","plan","post_alloc","post_alloc","prepare","prepare","prepare_func","release","release","release_func","space_mapping","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","validate","global","mutator","NOGC_CONSTRAINTS","NoGC","as_any","as_any_mut","base","base","borrow","borrow_mut","collection_required","constraints","deref","deref_mut","drop","from","get_allocator_mapping","get_spaces","get_used_pages","handle_user_collection_request","immortal","init","into","into_any","into_any_arc","into_any_rc","los","new","nogc_space","prepare","release","schedule_collection","try_from","try_into","type_id","ALLOCATOR_MAPPING","ALLOCATOR_MAPPING_SINGLE_SPACE","MULTI_SPACE_RESERVED_ALLOCATORS","__private_field","__private_field","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","create_nogc_mutator","deref","deref","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","nogc_mutator_noop","try_from","try_from","try_into","try_into","type_id","type_id","gc_work","global","mutator","0","PPGCWorkContext","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","into_any","into_any_arc","into_any_rc","try_from","try_into","type_id","CONSTRAINTS","PageProtect","as_any","as_any_mut","base","borrow","borrow_mut","collection_required","common","common","constraints","deref","deref_mut","drop","from","get_allocator_mapping","get_spaces","get_used_pages","init","into","into_any","into_any_arc","into_any_rc","may_move_objects","new","post_scan_object","prepare","release","schedule_collection","space","trace_object","try_from","try_into","type_id","ALLOCATOR_MAPPING","RESERVED_ALLOCATORS","__private_field","as_any","as_any_mut","borrow","borrow_mut","create_pp_mutator","deref","deref","deref_mut","drop","from","init","into","into_any","into_any_arc","into_any_rc","pp_mutator_prepare","pp_mutator_release","try_from","try_into","type_id","DEFAULT_PLAN_CONSTRAINTS","MAX_NON_LOS_ALLOC_BYTES_COPYING_PLAN","PlanConstraints","as_any","as_any_mut","barrier","borrow","borrow_mut","default","deref","deref_mut","drop","from","gc_header_bits","gc_header_words","generate_gc_trace","init","into","into_any","into_any_arc","into_any_rc","max_non_los_copy_bytes","max_non_los_default_alloc_bytes","may_trace_duplicate_edges","moves_objects","needs_concurrent_workers","needs_forward_after_liveness","needs_linear_scan","needs_log_bit","num_specialized_scans","try_from","try_into","type_id","gc_work","global","mutator","0","SSGCWorkContext","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","into_any","into_any_arc","into_any_rc","try_from","try_into","type_id","SS_CONSTRAINTS","SemiSpace","as_any","as_any_mut","base","borrow","borrow_mut","collection_required","common","common","constraints","copyspace0","copyspace1","create_copy_config","deref","deref_mut","drop","from","fromspace","fromspace_mut","get_allocator_mapping","get_collection_reserved_pages","get_spaces","get_used_pages","hi","init","into","into_any","into_any_arc","into_any_rc","may_move_objects","new","post_scan_object","prepare","prepare_worker","release","schedule_collection","tospace","tospace_mut","trace_object","try_from","try_into","type_id","ALLOCATOR_MAPPING","RESERVED_ALLOCATORS","__private_field","as_any","as_any_mut","borrow","borrow_mut","create_ss_mutator","deref","deref","deref_mut","drop","from","init","into","into_any","into_any_arc","into_any_rc","ss_mutator_prepare","ss_mutator_release","try_from","try_into","type_id","CAPACITY","ObjectQueue","ObjectsClosure","VectorObjectQueue","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","buffer","default","deref","deref","deref_mut","deref_mut","drop","drop","drop","enqueue","enqueue","flush","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_rc","into_any_rc","into_vec","is_empty","new","new","nodes","take","try_from","try_from","try_into","try_into","type_id","type_id","visit_edge","worker","copy_context","copyspace","gc_work","immix","immortalspace","largeobjectspace","lockfreeimmortalspace","mallocspace","markcompactspace","space","PolicyCopyContext","VM","alloc_copy","post_copy","post_copy","prepare","release","CopySpace","CopySpaceCopyContext","META_DATA_PAGES_PER_REGION","alloc_copy","as_any","as_any","as_any_mut","as_any_mut","as_sft","as_space","borrow","borrow","borrow_mut","borrow_mut","common","common","copy_allocator","deref","deref","deref_mut","deref_mut","drop","drop","from","from","from_space","get_forwarded_object","get_page_resource","init","init","initialize_object_metadata","initialize_sft","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_from_space","is_live","is_movable","is_sane","may_move_objects","name","new","new","pr","prepare","prepare","protect","rebind","release","release","release_multiple_pages","reset_alloc_bit","set_copy_for_sft_trace","sft_trace_object","trace_object","trace_object","try_from","try_from","try_into","try_into","type_id","type_id","unprotect","DEFAULT_TRACE","PolicyTraceObject","TraceKind","may_move_objects","post_scan_object","trace_object","BLOCK_ONLY","DEFRAG","MARK_LINE_AT_SCAN_TIME","MAX_IMMIX_OBJECT_SIZE","block","chunk","defrag","immixspace","line","validate","validate_features","0","Block","BlockList","BlockState","DEFRAG_SOURCE_STATE","DEFRAG_STATE_TABLE","LINES","LOG_LINES","LOG_PAGES","MARK_MARKED","MARK_TABLE","MARK_UNALLOCATED","MARK_UNMARKED","Marked","PAGES","Reusable","Unallocated","Unmarked","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chunk","clone","clone","clone_into","clone_into","default","deinit","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","end_line","eq","eq","fmt","fmt","from","from","from","from","from","get_blocks","get_holes","get_state","init","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","is_defrag_source","is_reusable","len","line_mark_table","lines","ne","ne","partial_cmp","pop","push","queue","reset","set_as_defrag_source","set_holes","set_state","start_line","sweep","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unavailable_lines","0","ALLOC_TABLE","Allocated","BLOCKS","Chunk","ChunkMap","ChunkState","Free","LOG_BLOCKS","SweepChunk","ZERO","all_chunks","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","blocks","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk","chunk_range","clone","clone","clone_into","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","do_work","drop","drop","drop","drop","eq","eq","fmt","fmt","from","from","from","from","from","generate_sweep_tasks","generate_tasks","get","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","ne","new","partial_cmp","set","space","sweep","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","DEFRAG_HEADROOM_PERCENT","DEFRAG_LINE_REUSE_RATIO","DEFRAG_STRESS","Defrag","Histogram","MIN_SPILL_THRESHOLD","NUM_BINS","add_completed_mark_histogram","as_any","as_any_mut","available_clean_pages_for_defrag","borrow","borrow_mut","decide_whether_to_defrag","default","defrag_headroom_pages","defrag_space_exhausted","defrag_spill_threshold","deref","deref_mut","drop","establish_defrag_spill_threshold","fmt","from","get_available_lines","in_defrag","in_defrag_collection","init","into","into_any","into_any_arc","into_any_rc","mark_histograms","new_histogram","notify_new_clean_block","prepare","release","space_exhausted","try_from","try_into","type_id","ImmixCopyContext","ImmixSpace","MARKED_STATE","PrepareBlockState","TRACE_KIND_DEFRAG","TRACE_KIND_FAST","UNMARKED_STATE","alloc_copy","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_sft","as_space","attempt_mark","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chunk","chunk_map","common","common","copy_allocator","decide_whether_to_defrag","defrag","defrag_allocator","defrag_headroom_pages","defrag_threshold","deref","deref","deref","deref_mut","deref_mut","deref_mut","do_work","drop","drop","drop","fast_trace_object","from","from","from","get_clean_block","get_next_available_lines","get_page_resource","get_reusable_block","get_space","in_defrag","init","init","init","initialize_object_metadata","initialize_sft","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","is_last_gc_exhaustive","is_live","is_marked","is_movable","is_pinned","is_sane","line_mark_state","line_unavail_state","mark_lines","mark_state","may_move_objects","name","new","new","post_copy","post_scan_object","pr","prepare","prepare","release","release","release_block","release_multiple_pages","reset_object_mark","reusable_blocks","scheduler","scheduler","set_copy_for_sft_trace","sft_trace_object","side_metadata_specs","space","trace_object","trace_object","trace_object_with_opportunistic_copy","trace_object_without_moving","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","Line","MARK_TABLE","MAX_MARK_STATE","RESET_MARK_STATE","as_any","as_any_mut","block","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","from","from","get_index_within_block","init","into","into_any","into_any_arc","into_any_rc","is_marked","mark","mark_lines_for_object","ne","partial_cmp","to_owned","try_from","try_into","type_id","GC_MARK_BIT_MASK","ImmortalSpace","META_DATA_PAGES_PER_REGION","as_any","as_any_mut","as_sft","as_space","borrow","borrow_mut","common","common","deref","deref_mut","drop","from","get_page_resource","init","initialize_object_metadata","initialize_sft","into","into_any","into_any_arc","into_any_rc","is_live","is_movable","is_reachable","is_sane","mark_state","may_move_objects","name","new","pr","prepare","release","release_multiple_pages","sft_trace_object","test_and_mark","trace_object","trace_object","try_from","try_into","type_id","LOS_BIT_MASK","LargeObjectSpace","MARK_BIT","NURSERY_BIT","PAGE_MASK","allocate_pages","as_any","as_any_mut","as_sft","as_space","borrow","borrow_mut","clear_nursery","common","common","deref","deref_mut","drop","from","get_page_resource","get_super_page","in_nursery_gc","init","initialize_object_metadata","initialize_sft","into","into_any","into_any_arc","into_any_rc","is_in_nursery","is_live","is_movable","is_sane","mark_state","may_move_objects","name","new","pr","prepare","release","release_multiple_pages","sft_trace_object","sweep_large_pages","test_and_mark","test_mark_bit","trace_object","trace_object","treadmill","try_from","try_into","type_id","LockFreeImmortalSpace","acquire","as_any","as_any_mut","as_sft","as_space","borrow","borrow_mut","common","cursor","deref","deref_mut","drop","extent","from","get_name","get_page_resource","init","initialize_object_metadata","initialize_sft","into","into_any","into_any_arc","into_any_rc","is_live","is_movable","is_sane","limit","may_move_objects","metadata","name","name","new","phantom","release_multiple_pages","reserved_pages","sft_trace_object","slow_path_zeroing","start","trace_object","try_from","try_into","type_id","verify_side_metadata_sanity","global","metadata","0","ASSERT_ALLOCATION","MallocObjectSize","MallocSpace","active_bytes","active_mem","address_in_space","alloc","as_any","as_any","as_any_mut","as_any_mut","as_sft","as_space","borrow","borrow","borrow_mut","borrow_mut","chunk_addr_max","chunk_addr_min","clean_up_empty_chunk","common","completed_work_packets","debug_sweep_chunk_done","deref","deref","deref_mut","deref_mut","drop","drop","free","free_internal","from","from","get_malloc_addr_size","get_name","get_page_resource","in_space","init","init","initialize_object_metadata","initialize_sft","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_in_space","is_live","is_mmtk_object","is_movable","is_sane","map_metadata_and_update_bound","may_move_objects","metadata","name","new","phantom","release_multiple_pages","reserved_pages","sft_trace_object","size","sweep_chunk","sweep_chunk_mark_in_header","sweep_chunk_mark_on_side","sweep_object","total_work_packets","trace_object","trace_object","try_from","try_from","try_into","try_into","type_id","type_id","verify_side_metadata_sanity","work_live_bytes","ACTIVE_CHUNK_METADATA_SPEC","ACTIVE_PAGE_METADATA_SPEC","CHUNK_MAP_LOCK","CHUNK_METADATA","MAX_METADATA_ADDRESS","OFFSET_MALLOC_METADATA_SPEC","__private_field","__private_field","__private_field","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","from","from","from","has_object_alloced_by_malloc","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","is_alloced_by_malloc","is_chunk_mapped","is_chunk_marked","is_chunk_marked_unsafe","is_marked","is_meta_space_mapped","is_meta_space_mapped_for_address","is_offset_malloc","is_page_marked","is_page_marked_unsafe","load128","map_active_chunk_metadata","map_meta_space","set_alloc_bit","set_chunk_mark","set_mark_bit","set_offset_malloc_bit","set_page_mark","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unset_alloc_bit","unset_alloc_bit_unsafe","unset_chunk_mark_unsafe","unset_mark_bit","unset_offset_malloc_bit_unsafe","unset_page_mark_unsafe","0","GC_EXTRA_HEADER_BYTES","GC_EXTRA_HEADER_WORD","GC_MARK_BIT_MASK","HEADER_RESERVED_IN_BYTES","MarkCompactObjectSize","MarkCompactSpace","TRACE_KIND_FORWARD","TRACE_KIND_MARK","as_any","as_any","as_any_mut","as_any_mut","as_sft","as_space","borrow","borrow","borrow_mut","borrow_mut","calculate_forwarding_pointer","clear_header_forwarding_pointer","common","common","compact","deref","deref","deref_mut","deref_mut","drop","drop","from","from","get_forwarded_object","get_header_forwarding_pointer","get_page_resource","header_forwarding_pointer_address","init","init","initialize_object_metadata","initialize_sft","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_live","is_marked","is_movable","is_sane","may_move_objects","name","new","pr","prepare","release","release_multiple_pages","sft_trace_object","size","store_header_forwarding_pointer","test_and_clear_mark","test_and_mark","to_be_compacted","trace_forward_object","trace_mark_object","trace_object","try_from","try_from","try_into","try_into","type_id","type_id","0","1","CommonSpace","DEBUG_SFT","EMPTY_SFT_NAME","EMPTY_SPACE_SFT","EmptySpaceSFT","GCWorkerMutRef","SFT","SFTMap","Space","SpaceOptions","acquire","acquire_lock","address_in_space","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_sft","as_space","assert_valid_entries_for_object","available_physical_pages","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear_by_index","common","contiguous","copy","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","descriptor","downcast","downcast_mut","downcast_rc","downcast_ref","drop","drop","drop","drop","drop","ensure_mapped","extent","fmt","from","from","from","from","from","get","get_forwarded_object","get_frac_available","get_name","get_page_resource","grow_space","head_discontiguous_region","immortal","immortal","in_space","init","init","init","init","init","initialize_object_metadata","initialize_object_metadata","initialize_sft","initialize_sft","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_mut","is","is_in_any_space","is_in_space","is_in_space","is_live","is_live","is_mmtk_object","is_mmtk_object","is_mmtk_object","is_movable","is_movable","is_reachable","is_sane","is_sane","log_update","metadata","mmapper","movable","movable","mut_self","name","name","name","name","needs_log_bit","needs_log_bit","new","new","new","p","print_sft_map","print_vm_map","release_multiple_pages","required_chunks","reserved_pages","set","set_copy_for_sft_trace","sft","sft_trace_object","sft_trace_object","side_metadata_specs","start","trace_sft_map","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update","verify_side_metadata_sanity","vm_map","vm_map","vmrequest","vmrequest","zeroed","zeroed","0","CalculateForwarding","Closure","Compact","CoordinatorWork","Final","FinalRefClosure","FinalizableForwarding","GCController","GCWork","GCWorker","PhantomRefClosure","Prepare","ProcessEdgesWork","RefForwarding","Release","ScanObjectsWorkType","ScanStackRoot","SecondRoots","SoftRefClosure","Unconstrained","VM","WeakRefClosure","WorkBucketStage","controller","coordinator_worker","copy","create_scan_work","do_work","gc_work","is_coordinator","local_work_buffer","mmtk","mmtk","new","ordinal","receiver","requester","scheduler","scheduler","scheduler","sender","shared","stat","tls","trace_object","work","work_bucket","work_counter","worker","GCController","as_any","as_any_mut","borrow","borrow_mut","coordinator_worker","deref","deref_mut","do_gc_until_completion","drop","from","init","into","into_any","into_any_rc","mmtk","new","process_message","receiver","requester","run","scheduler","try_from","try_into","type_id","0","0","0","0","0","CAPACITY","CAPACITY","E","EdgeOf","EndOfGC","OVERWRITE_REFERENCE","OVERWRITE_REFERENCE","PlanProcessEdges","PlanScanObjects","Prepare","PrepareCollector","PrepareMutator","ProcessEdgesBase","ProcessEdgesWork","ProcessEdgesWorkRootsWorkFactory","ProcessModBuf","Release","ReleaseCollector","ReleaseMutator","SCAN_OBJECTS_IMMEDIATELY","SCAN_OBJECTS_IMMEDIATELY","SFTProcessEdges","ScanObjects","ScanObjectsWork","ScanObjectsWorkType","ScanStackRoot","ScanStackRoots","ScanVMSpecificRoots","ScheduleCollection","StopMutators","VM","VMProcessWeakRefs","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","base","base","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffer","cache_roots_for_sanity_gc","cache_roots_for_sanity_gc","clone","clone_into","concurrent","concurrent","create_process_edge_roots_work","create_process_node_roots_work","create_scan_work","create_scan_work","create_scan_work","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","do_work","do_work","do_work","do_work","do_work","do_work","do_work","do_work","do_work","do_work","do_work","do_work","do_work","do_work","do_work","do_work","do_work_common","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","edges","flush","flush","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","make_another","make_another","make_another","meta","mmtk","mmtk","mmtk","modbuf","mutator","mutator","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","nodes","phantom","phantom","phantom","plan","plan","plan","plan","plan","pop_nodes","post_scan_object","post_scan_object","post_scan_object","process_edge","process_edge","process_edge","process_edges","process_edges","roots","roots","roots","roots","roots","roots","set_worker","start_or_dispatch_scan_work","start_or_dispatch_scan_work","to_owned","trace_object","trace_object","trace_object","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","worker","worker","CoordinatorMessage","Finish","GCWorkScheduler","Work","add_coordinator_work","all_activated_buckets_are_empty","all_buckets_empty","are_buckets_drained","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","closure_end","coordinator_worker_shared","deactivate_all","debug_assert_all_buckets_deactivated","deref","deref","deref_mut","deref_mut","drop","drop","enable_stat","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_rc","into_any_rc","new","notify_mutators_paused","num_workers","on_closure_end","pending_coordinator_packets","poll","poll_schedulable_work","poll_schedulable_work_once","poll_slow","reset_state","schedule_common_work","spawn_gc_threads","statistics","try_from","try_from","try_into","try_into","type_id","type_id","update_buckets","work_buckets","worker_group","worker_monitor","0","SchedulerStat","WorkStat","WorkerLocalStat","_phantom","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","counter_set","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","enable","enabled","end_of_work","from","from","from","harness_stat","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_rc","into_any_rc","into_any_rc","is_enabled","measure_work","merge","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","work_counters","work_counters","work_counts","work_counts","work_id_name_map","work_id_name_map","work_name","CoordinatorWork","GCWork","GCWorkContext","PlanType","ProcessEdgesWorkType","VM","do_work","do_work_with_stat","do_work_with_stat","BucketQueue","CalculateForwarding","Closure","Compact","Final","FinalRefClosure","FinalizableForwarding","LAST_CLOSURE_BUCKET","PhantomRefClosure","Prepare","RefForwarding","Release","SecondRoots","SoftRefClosure","Unconstrained","WeakRefClosure","WorkBucket","WorkBucketStage","activate","active","add","add_boxed","add_prioritized","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bulk_add","bulk_add_prioritized","can_open","clone","clone_into","deactivate","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","first_stw_stage","fmt","from","from","from","from_usize","group","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_usize","is_activated","is_drained","is_empty","is_empty","monitor","new","new","notify_all_workers","notify_one_worker","poll","prioritized_queue","push","push_all","queue","queue","set_open_condition","steal_batch_and_pop","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","WorkCounter","WorkCounterBase","WorkCounterClone","WorkDuration","as_any","as_any","as_any_mut","as_any_mut","base","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_box","clone_into","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","get_base","get_base","get_base_mut","get_base_mut","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","max","merge","merge_inplace","merge_val","min","name","name","new","running","start","start","start_value","stop","stop","to_owned","to_owned","total","try_from","try_from","try_into","try_into","type_id","type_id","GCWorker","GCWorkerShared","LOCALLY_CACHED_WORK_PACKETS","STAT_BORROWED_MSG","WorkerGroup","add_work","add_work_prioritized","all_parked","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_stat","borrow_stat_mut","copy","dec_parked_workers","deref","deref","deref","deref_mut","deref_mut","deref_mut","designated_work","do_boxed_work","do_work","drop","drop","drop","from","from","from","get_copy_context_mut","has_designated_work","inc_parked_workers","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","is_coordinator","is_coordinator","local_work_buffer","mmtk","new","new","new","ordinal","parked_workers","parked_workers","poll","run","scheduler","scheduler","sender","shared","spawn","stat","stealer","tls","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unspawned_local_work_queues","worker_count","workers_shared","SynchronizedCounter","address","alloc","alloc_bit","analysis","constants","conversions","copy","count","edge_logger","erase_vm","finalizable_processor","generic_freelist","heap","int_array_freelist","is_mmtk_object","linear_scan","logger","malloc","memory","metadata","object_forwarding","opaque_pointer","options","raw_memory_freelist","reference_processor","rust_util","sanity","statistics","synchronized_counter","treadmill","0","0","Address","ByteOffset","ByteSize","MAX","NULL","ObjectReference","ZERO","add","add","add","add_assign","add_assign","align_down","align_up","as_any","as_any","as_any_mut","as_any_mut","as_usize","atomic_load","atomic_store","bitand","bitand","bitor","bitor","borrow","borrow","borrow_mut","borrow_mut","chunk_index","clone","clone","clone_into","clone_into","cmp","compare_exchange","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_mut_ptr","from_ptr","from_ref","from_usize","get_extent","get_forwarded_object","get_offset","get_reference","hash","hash","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_aligned_to","is_in_any_space","is_live","is_mapped","is_movable","is_null","is_reachable","is_sane","is_zero","keep_alive","load","load","max","ne","ne","partial_cmp","partial_cmp","saturating_sub","set_reference","shift","shl","shr","store","store","sub","sub","sub","sub_assign","to_address","to_mut_ptr","to_object_reference","to_owned","to_owned","to_ptr","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","value","zero","AllocationError","Allocator","AllocatorSelector","BumpAllocator","BumpPointer","HeapOutOfMemory","Immix","LargeObject","LargeObjectAllocator","Malloc","MallocAllocator","MarkCompact","MarkCompactAllocator","MmapOutOfMemory","None","alloc","alloc_slow_once","allocator","allocators","bump_allocator","bumpallocator","cursor","does_thread_local_allocation","embedded_meta_data","fill_alignment_gap","get_plan","get_space","get_tls","immix_allocator","large_object_allocator","limit","malloc_allocator","markcompact_allocator","object_ref_guard","plan","plan","plan","space","space","space","tls","tls","tls","0","0","0","0","0","AllocationError","Allocator","HeapOutOfMemory","MmapOutOfMemory","align_allocation","align_allocation_no_fill","alloc","alloc_slow","alloc_slow","alloc_slow_inline","alloc_slow_inline","alloc_slow_once","alloc_slow_once_precise_stress","alloc_slow_once_precise_stress","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","does_thread_local_allocation","downcast","downcast_mut","downcast_rc","downcast_ref","drop","fill_alignment_gap","fmt","from","get_maximum_aligned_size","get_plan","get_space","get_thread_local_buffer_granularity","get_thread_local_buffer_granularity","get_tls","init","into","into_any","into_any_arc","into_any_rc","is","try_from","try_into","type_id","AllocatorSelector","Allocators","BumpPointer","Immix","LargeObject","MAX_BUMP_ALLOCATORS","MAX_IMMIX_ALLOCATORS","MAX_LARGE_OBJECT_ALLOCATORS","MAX_MALLOC_ALLOCATORS","MAX_MARK_COMPACT_ALLOCATORS","Malloc","MarkCompact","None","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","bump_pointer","clone","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","fmt","from","from","get_allocator","get_allocator_mut","immix","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","large_object","malloc","markcompact","ne","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","BLOCK_MASK","BLOCK_SIZE","BYTES_IN_PAGE","BumpAllocator","acquire_block","alloc","alloc_slow_once","alloc_slow_once_precise_stress","as_any","as_any_mut","borrow","borrow_mut","cursor","deref","deref_mut","does_thread_local_allocation","drop","from","get_plan","get_space","get_thread_local_buffer_granularity","get_tls","init","into","into_any","into_any_arc","into_any_rc","limit","new","plan","rebind","reset","set_limit","space","tls","try_from","try_into","type_id","BYTES_IN_REGION","LOG_BYTES_IN_REGION","LOG_PAGES_IN_REGION","PAGES_IN_REGION","REGION_MASK","get_metadata_base","get_metadata_offset","ImmixAllocator","acquire_clean_block","acquire_recyclable_block","acquire_recyclable_lines","alloc","alloc_slow_hot","alloc_slow_once","alloc_slow_once_precise_stress","as_any","as_any_mut","borrow","borrow_mut","copy","cursor","deref","deref_mut","does_thread_local_allocation","drop","from","get_plan","get_space","get_thread_local_buffer_granularity","get_tls","hot","immix_space","init","into","into_any","into_any_arc","into_any_rc","large_cursor","large_limit","limit","line","new","overflow_alloc","plan","request_for_large","require_new_block","reset","restore_limit_for_stress","set_limit_for_stress","space","tls","try_from","try_into","type_id","LargeObjectAllocator","alloc","alloc_slow_once","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","does_thread_local_allocation","drop","from","get_plan","get_space","get_tls","init","into","into_any","into_any_arc","into_any_rc","new","plan","space","tls","try_from","try_into","type_id","MallocAllocator","alloc","alloc_slow_once","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","does_thread_local_allocation","drop","from","get_plan","get_space","get_tls","init","into","into_any","into_any_arc","into_any_rc","new","plan","space","tls","try_from","try_into","type_id","HEADER_RESERVED_IN_BYTES","MarkCompactAllocator","alloc","alloc_slow_once","alloc_slow_once_precise_stress","as_any","as_any_mut","borrow","borrow_mut","bump_allocator","deref","deref_mut","does_thread_local_allocation","drop","from","get_plan","get_space","get_thread_local_buffer_granularity","get_tls","init","into","into_any","into_any_arc","into_any_rc","new","rebind","reset","set_limit","try_from","try_into","type_id","adjust_thread_local_buffer_limit","assert_object_ref_in_cell","object_ref_may_cross_chunk","ALLOC_SIDE_METADATA_ADDR","ALLOC_SIDE_METADATA_SPEC","bzero_alloc_bit","is_alloced","is_alloced_object","is_alloced_object_unsafe","map_meta_space_for_chunk","set_alloc_bit","unset_addr_alloc_bit","unset_alloc_bit","unset_alloc_bit_unsafe","AnalysisManager","GcHookWork","RtAnalysis","add_analysis_routine","alloc_hook","alloc_hook","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","default","default","deref","deref","deref_mut","deref_mut","do_work","drop","drop","from","from","gc_count","gc_hook","gc_hook","init","init","initialize_routines","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","new","obj_num","obj_size","routines","set_running","try_from","try_from","try_into","try_into","type_id","type_id","GcCounter","as_any","as_any_mut","borrow","borrow_mut","counter","deref","deref_mut","drop","from","gc_hook","init","into","into_any","into_any_arc","into_any_rc","new","running","set_running","try_from","try_into","type_id","ObjectCounter","alloc_hook","as_any","as_any_mut","borrow","borrow_mut","counter","deref","deref_mut","drop","from","init","into","into_any","into_any_arc","into_any_rc","new","running","set_running","try_from","try_into","type_id","PerSizeClassObjectCounter","alloc_hook","as_any","as_any_mut","borrow","borrow_mut","default","deref","deref_mut","drop","from","init","into","into_any","into_any_arc","into_any_rc","new","new_ctr","running","set_running","size_class","size_classes","try_from","try_into","type_id","ARRAY_ELEMENT","BITS_IN_ADDRESS","BITS_IN_BYTE","BITS_IN_CHAR","BITS_IN_INT","BITS_IN_LONG","BITS_IN_PAGE","BITS_IN_SHORT","BITS_IN_WORD","BYTES_IN_ADDRESS","BYTES_IN_BYTE","BYTES_IN_CHAR","BYTES_IN_INT","BYTES_IN_KBYTE","BYTES_IN_LONG","BYTES_IN_MBYTE","BYTES_IN_PAGE","BYTES_IN_SHORT","BYTES_IN_WORD","CARD_MASK","CARD_META_PAGES_PER_REGION","DEFAULT_STRESS_FACTOR","INSTANCE_FIELD","LAZY_SWEEP","LOG_BITS_IN_ADDRESS","LOG_BITS_IN_BYTE","LOG_BITS_IN_CHAR","LOG_BITS_IN_INT","LOG_BITS_IN_LONG","LOG_BITS_IN_PAGE","LOG_BITS_IN_SHORT","LOG_BITS_IN_WORD","LOG_BYTES_IN_ADDRESS","LOG_BYTES_IN_ADDRESS_SPACE","LOG_BYTES_IN_BYTE","LOG_BYTES_IN_CHAR","LOG_BYTES_IN_INT","LOG_BYTES_IN_KBYTE","LOG_BYTES_IN_LONG","LOG_BYTES_IN_MBYTE","LOG_BYTES_IN_PAGE","LOG_BYTES_IN_SHORT","LOG_BYTES_IN_WORD","LOG_CARD_BYTES","LOG_CARD_GRAIN","LOG_CARD_META_BYTES","LOG_CARD_META_PAGES","LOG_CARD_META_SIZE","LOG_CARD_UNITS","LOG_MIN_OBJECT_SIZE","MAX_INT","MIN_INT","MIN_OBJECT_SIZE","SUPPORT_CARD_SCANNING","address_to_chunk_index","bytes_to_chunks_up","bytes_to_formatted_string","bytes_to_pages","bytes_to_pages_up","chunk_align_down","chunk_align_up","chunk_index_to_address","is_address_aligned","is_page_aligned","mmap_chunk_align_down","mmap_chunk_align_up","page_align_down","pages_to_bytes","raw_align_down","raw_align_up","raw_is_aligned","CopyConfig","CopySelector","CopySemantics","CopySpace","CopySpaceMapping","DefaultCopy","GCWorkerCopyContext","Immix","MAX_COPYSPACE_COPY_ALLOCATORS","MAX_IMMIX_COPY_ALLOCATORS","Mature","Nursery","PromoteToMature","Unused","alloc_copy","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","config","constraints","copy","copy_mapping","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from_usize","immix","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_usize","is_mature","new","new_non_copy","post_copy","prepare","release","space_mapping","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","EdgeLogger","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","drop","edge_log","from","init","into","into_any","into_any_arc","into_any_rc","log_edge","new","reset","should_check_duplicate_edges","try_from","try_into","type_id","define_erased_vm_mut_ref","0","0","FinalizableProcessor","Finalization","ForwardFinalization","add","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","candidates","default","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","do_work","do_work","drop","drop","drop","forward_candidate","forward_finalizable","forward_finalizable_reference","from","from","from","get_all_finalizers","get_finalizers_for","get_ready_object","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","new","new","new","nursery_index","ready_for_finalize","scan","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","COALESC_MASK","FAILURE","FREE_MASK","GenericFreeList","MAX_HEADS","MAX_UNITS","MULTI_MASK","NEXT_MASK","PREV_MASK","SIZE_MASK","TOTAL_BITS","UNIT_BITS","__alloc","__coalesce","__remove_from_free","__split","add_to_free","alloc","alloc_from_unit","clear_uncoalescable","free","get_entry","get_free","get_hi_entry","get_left","get_lo_entry","get_next","get_prev","get_right","get_size","head","heads","initialize_heap","is_coalescable","is_free","is_multi","set_entry","set_free","set_hi_entry","set_lo_entry","set_next","set_prev","set_sentinel","set_size","set_uncoalescable","size","accounting","freelistpageresource","heap_meta","layout","monotonepageresource","pageresource","space_descriptor","vmrequest","PageAccounting","as_any","as_any_mut","borrow","borrow_mut","clear_reserved","commit","committed","default","deref","deref_mut","drop","from","get_committed_pages","get_reserved_pages","init","into","into_any","into_any_arc","into_any_rc","new","release","reserve","reserve_and_commit","reserved","reset","try_from","try_into","type_id","CommonFreeListPageResource","FreeListPageResource","FreeListPageResourceSync","UNINITIALIZED_WATER_MARK","_p","adjust_for_metadata","alloc_pages","allocate_contiguous_chunks","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","common","common","common_flpr","common_mut","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","free_contiguous_chunk","free_list","from","from","from","get_available_physical_pages","get_start","highwater_mark","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","meta_data_pages_per_region","mprotect","munprotect","new_contiguous","new_discontiguous","pages_currently_on_freelist","protect_memory_on_release","release_free_chunks","release_pages","reserve_metadata","resize_freelist","start","sync","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","HeapMeta","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","drop","from","get_discontig_end","get_discontig_start","get_total_pages","heap_cursor","heap_limit","init","into","into_any","into_any_arc","into_any_rc","new","reserve","total_pages","try_from","try_into","type_id","fragmented_mapper","heap_layout","heap_parameters","map","map64","mmapper","vm_layout_constants","FragmentedMapper","HASH_MASK","LOG_MAPPABLE_BYTES","LOG_MAX_SLABS","LOG_MMAP_CHUNKS_PER_SLAB","LOG_MMAP_SLAB_BYTES","LOG_SLAB_TABLE_SIZE","MAX_SLABS","MMAP_NUM_CHUNKS","MMAP_SLAB_EXTENT","MMAP_SLAB_MASK","SENTINEL","SLAB_TABLE_SIZE","Slab","as_any","as_any_mut","borrow","borrow_mut","chunk_index","chunk_index_to_address","commit_free_slab","default","deref","deref_mut","drop","eagerly_mmap_all_spaces","ensure_mapped","fmt","free_slab_index","free_slabs","from","get_or_allocate_slab_table","get_or_optionally_allocate_slab_table","hash","init","into","into_any","into_any_arc","into_any_rc","is_mapped_address","lock","mark_as_mapped","mut_self","new","new_slab","protect","quarantine_address_range","slab_align_down","slab_limit","slab_map","slab_table","slab_table","slab_table_for","try_from","try_into","type_id","Mmapper","VMMap","LOG_MAX_SPACES","LOG_SPACE_SIZE_64","MAX_SPACES","FreeList","Map","add_to_cumulative_committed_pages","allocate_contiguous_chunks","boot","create_freelist","create_parent_freelist","finalize_static_space_map","free_all_chunks","free_contiguous_chunks","get_available_discontiguous_chunks","get_chunk_consumer_count","get_contiguous_region_chunks","get_contiguous_region_size","get_descriptor_for_address","get_discontig_freelist_pr_ordinal","get_next_contiguous_region","insert","is_finalized","new","Map64","NON_MAP_FRACTION","add_to_cumulative_committed_pages","allocate_contiguous_chunks","as_any","as_any_mut","base_address","boot","borrow","borrow_mut","create_freelist","create_parent_freelist","cumulative_committed_pages","default","deref","deref_mut","descriptor_map","drop","finalize_static_space_map","finalized","fl_map","fl_page_resources","free_all_chunks","free_contiguous_chunks","from","get_available_discontiguous_chunks","get_chunk_consumer_count","get_contiguous_region_chunks","get_contiguous_region_size","get_descriptor_for_address","get_discontig_freelist_pr_ordinal","get_next_contiguous_region","high_water","init","insert","into","into_any","into_any_arc","into_any_rc","is_finalized","is_space_start","mut_self","new","space_index","try_from","try_into","type_id","MapState","Mapped","Mmapper","Protected","Quarantined","Unmapped","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eagerly_mmap_all_spaces","ensure_mapped","eq","fmt","from","init","into","into_any","into_any_arc","into_any_rc","is_mapped_address","mark_as_mapped","protect","quarantine_address_range","to_owned","transition_to_mapped","transition_to_protected","transition_to_quarantined","try_from","try_into","type_id","AVAILABLE_BYTES","AVAILABLE_END","AVAILABLE_START","BYTES_IN_CHUNK","CHUNK_MASK","HEAP_END","HEAP_START","LOG_ADDRESS_SPACE","LOG_BYTES_IN_CHUNK","LOG_MAX_CHUNKS","LOG_MMAP_CHUNK_BYTES","LOG_PAGES_IN_SPACE64","LOG_SPACE_EXTENT","MAX_CHUNKS","MAX_SPACE_EXTENT","MMAP_CHUNK_BYTES","PAGES_IN_CHUNK","PAGES_IN_SPACE64","SPACE_MASK_64","SPACE_SHIFT_64","SPACE_SIZE_64","VM_SPACE_SIZE","Contiguous","Discontiguous","MonotonePageResource","MonotonePageResourceConditional","MonotonePageResourceSync","_p","adjust_for_metadata","alloc_pages","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","common","common","common_mut","conditional","current_chunk","cursor","cursor","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","from","from","from","get_available_physical_pages","get_current_chunk","get_region_start","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","log_chunk_fields","meta_data_pages_per_region","move_to_next_chunk","new_contiguous","new_discontiguous","release_pages","release_pages_extent","reserve_pages","reset","reset_cursor","sentinel","sync","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","start","zeroing_cursor","zeroing_sentinel","CommonPageResource","PRAllocFail","PRAllocResult","PageResource","accounting","adjust_for_metadata","alloc_pages","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear_request","commit_pages","committed_pages","common","common_mut","concurrent_zeroing","contiguous","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","from","from","from","get_available_physical_pages","get_head_discontiguous_region","get_new_pages","grow_discontiguous_space","growable","head_discontiguous_region","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","new","new_chunk","pages","release_all_chunks","release_discontiguous_chunks","reserve_pages","reserved_pages","skip_concurrent_zeroing","start","trigger_concurrent_zeroing","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_zeroing_approach","vm_map","vm_map","0","BASE_EXPONENT","DISCONTIGUOUS_SPACE_INDEX","DISCONTIG_INDEX_INCREMENT","EXPONENT_BITS","EXPONENT_SHIFT","INDEX_MASK","INDEX_SHIFT","MANTISSA_BITS","MANTISSA_SHIFT","SIZE_BITS","SIZE_SHIFT","SpaceDescriptor","TYPE_BITS","TYPE_CONTIGUOUS","TYPE_CONTIGUOUS_HI","TYPE_MASK","TYPE_SHARED","UNINITIALIZED","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","create_descriptor","create_descriptor_from_heap_range","deref","deref_mut","drop","eq","fmt","from","get_extent","get_index","get_start","init","into","into_any","into_any_arc","into_any_rc","is_contiguous","is_contiguous_hi","is_empty","ne","to_owned","try_from","try_into","type_id","Discontiguous","Extent","Fixed","Fraction","VMRequest","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","common64bit","deref","deref_mut","discontiguous","drop","fixed_extent","fixed_size","fmt","fraction","from","high_fixed_size","init","into","into_any","into_any_arc","into_any_rc","is_discontiguous","to_owned","try_from","try_into","type_id","extent","extent","frac","start","top","top","top","IntArrayFreeList","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","from_parent","get_entry","head","head","heads","heads","init","into","into_any","into_any_arc","into_any_rc","new","parent","resize_freelist","set_entry","table","table","table_mut","try_from","try_into","type_id","ALLOC_BIT_REGION_SIZE","is_mmtk_object","0","BYTES","DefaultObjectSize","LOG_BYTES","LinearScanObjectSize","ObjectIterator","Region","RegionIterator","_p","align","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","containing","current","cursor","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","end","end","end","from","from","from","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_iter","into_iter","is_aligned","new","new","next","next","next","next_nth","size","size","start","start","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","try_init","calloc","counted_calloc","counted_malloc","free","free_with_size","library","malloc","malloc_ms_util","realloc","realloc_with_old_size","libc_malloc","calloc","free","malloc","malloc_usable_size","posix_memalign","realloc","align_alloc","align_offset_alloc","alloc","free","get_malloc_usable_size","offset_free","offset_malloc_usable_size","dzmmap","dzmmap_noreplace","get_process_memory_maps","handle_mmap_error","mmap_fixed","mmap_noreserve","mprotect","munmap","munprotect","panic_if_unmapped","result_is_mapped","wrap_libc_call","zero","InHeader","MetadataSpec","OnSide","compare_exchange_metadata","fetch_add_metadata","fetch_sub_metadata","global","header_metadata","load_metadata","log_bit","side_metadata","store_metadata","0","0","InHeader","MetadataSpec","OnSide","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","compare_exchange_metadata","deref","deref_mut","drop","extract_side_metadata","extract_side_spec","fetch_add_metadata","fetch_sub_metadata","fmt","from","init","into","into_any","into_any_arc","into_any_rc","is_on_side","load_metadata","store_metadata","to_owned","try_from","try_into","type_id","0","0","BITS_IN_U32","BIT_IN_U16","HeaderMetadataSpec","LOG_BITS_IN_U16","LOG_BITS_IN_U32","as_any","as_any_mut","bit_offset","borrow","borrow_mut","clone","clone_into","compare_exchange_metadata","deref","deref_mut","drop","eq","fetch_add_metadata","fetch_sub_metadata","fmt","from","hash","init","into","into_any","into_any_arc","into_any_rc","load_metadata","ne","num_of_bits","store_metadata","to_owned","try_from","try_into","type_id","ALLOC_SIDE_METADATA_ADDR","GLOBAL_SIDE_METADATA_BASE_ADDRESS","GLOBAL_SIDE_METADATA_VM_BASE_ADDRESS","GLOBAL_SIDE_METADATA_VM_BASE_OFFSET","LOCAL_SIDE_METADATA_VM_BASE_OFFSET","LOG_MAX_GLOBAL_SIDE_METADATA_SIZE","MetadataByteArrayRef","SideMetadataContext","SideMetadataOffset","SideMetadataSanity","SideMetadataSpec","addr","bzero_metadata","compare_exchange_atomic","constants","data","ensure_metadata_is_mapped","fetch_add_atomic","fetch_sub_atomic","global","global","heap_range_start","helpers","is_global","load","load_atomic","local","log_bytes_in_region","log_num_of_bits","metadata_address_range_size","name","offset","rel_offset","sanity","side_metadata_tests","spec","spec_defs","specs_sanity_map","store","store_atomic","ALLOC_SIDE_METADATA_ADDR","GLOBAL_SIDE_METADATA_BASE_ADDRESS","GLOBAL_SIDE_METADATA_BASE_OFFSET","GLOBAL_SIDE_METADATA_VM_BASE_ADDRESS","GLOBAL_SIDE_METADATA_VM_BASE_OFFSET","LOCAL_SIDE_METADATA_BASE_ADDRESS","LOCAL_SIDE_METADATA_BASE_OFFSET","LOCAL_SIDE_METADATA_VM_BASE_OFFSET","LOG_GLOBAL_SIDE_METADATA_WORST_CASE_RATIO","LOG_LOCAL_SIDE_METADATA_WORST_CASE_RATIO","LOG_MAX_GLOBAL_SIDE_METADATA_SIZE","MetadataByteArrayRef","SideMetadataContext","SideMetadataOffset","SideMetadataSpec","addr","addr","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bzero_metadata","calculate_reserved_pages","clone","clone","clone_into","clone_into","compare_exchange_atomic","data","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","ensure_metadata_is_mapped","eq","eq","fetch_add_atomic","fetch_sub_atomic","fmt","from","from","from","from","get","get_absolute_offset","get_local_specs","get_rel_offset","global","hash","hash","heap_range_start","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_absolute_offset","is_global","is_rel_offset","layout_after","len","load","load_atomic","local","log_bytes_in_region","log_num_of_bits","map_metadata_internal","name","ne","new","new_global_specs","offset","rel","rel_offset","reset","spec","store","store_atomic","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_map_metadata_address_range","try_map_metadata_space","type_id","type_id","type_id","type_id","upper_bound_address_for_contiguous","upper_bound_offset","addr_rshift","address_to_contiguous_meta_address","address_to_meta_address","meta_byte_lshift","meta_byte_mask","metadata_address_range_size","try_mmap_contiguous_metadata_space","Add","CONTENT_SANITY_MAP","GLOBAL_META_NAME","MathOp","SANITY_LOCK","SideMetadataSanity","Sub","__private_field","__private_field","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","do_math","drop","drop","drop","drop","from","from","from","from","get_all_specs","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","new","specs_sanity_map","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify_add","verify_bzero","verify_global_specs","verify_global_specs_total_size","verify_load","verify_local_specs","verify_local_specs_size","verify_metadata_address_bound","verify_metadata_context","verify_no_overlap_contiguous","verify_store","verify_sub","ALLOC_BIT","IX_BLOCK_DEFRAG","IX_BLOCK_MARK","IX_CHUNK_MARK","IX_LINE_MARK","LAST_GLOBAL_SIDE_METADATA_SPEC","LAST_LOCAL_SIDE_METADATA_SPEC","MS_ACTIVE_CHUNK","MS_ACTIVE_PAGE","MS_OFFSET_MALLOC","define_side_metadata_specs","BEING_FORWARDED","FORWARDED","FORWARDING_BITS","FORWARDING_MASK","FORWARDING_NOT_TRIGGERED_YET","FORWARDING_POINTER_MASK","attempt_to_forward","clear_forwarding_bits","forward_object","forwarding_bits_offset_in_forwarding_pointer","get_forwarding_status","is_being_forwarded","is_forwarded","is_forwarded_or_being_forwarded","read_forwarding_pointer","spin_and_get_forwarded_object","state_is_being_forwarded","state_is_forwarded_or_being_forwarded","write_forwarding_pointer","0","0","0","0","OpaquePointer","UNINITIALIZED","UNINITIALIZED","VMMutatorThread","VMThread","VMWorkerThread","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_address","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_null","ne","ne","ne","ne","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Adaptive","Bounded","Concurrent","DEFAULT_MAX_NURSERY","DEFAULT_MIN_NURSERY","Fixed","GenCopy","GenImmix","Immix","MMTKOption","MarkCompact","MarkSweep","NURSERY_SIZE","NoGC","Nontemporal","NurseryKind","NurserySize","NurseryZeroingOptions","Options","PageProtect","PerfEventOptions","PlanSelector","SemiSpace","Temporal","always_valid","analysis_factor","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","eager_complete_sweep","eq","events","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_command_line","from_env_var","from_str","from_str","from_str","from_str","from_str","full_heap_system_gc","get_max_nursery","get_min_nursery","heap_size","ignore_system_gc","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","kind","max","min","ne","new","new","no_finalizer","no_reference_types","nursery","nursery_zeroing","options","parse","parse_perf_events","phase_perf_events","plan","precise_stress","set","set_bulk_from_command_line","set_from_command_line","set_from_env_var","set_inner","stress_factor","threads","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","use_return_barrier","use_short_stack_scans","validator","value","variable_size_heap","vm_space_size","work_perf_events","LOG_BYTES_IN_ENTRY","LOG_BYTES_IN_UNIT","LOG_ENTRY_BITS","RawMemoryFreeList","alloc","as_any","as_any_mut","base","borrow","borrow_mut","current_capacity","current_units","default_block_size","deref","deref_mut","drop","fmt","from","get_entry","get_limit","grain","grow_freelist","grow_list_by_blocks","head","head","heads","heads","high_water","init","into","into_any","into_any_arc","into_any_rc","limit","max_units","mmap","new","pages_per_block","raise_high_water","set_entry","size_in_pages","try_from","try_into","type_id","units_in_first_block","units_per_block","0","0","0","0","0","INITIAL_SIZE","PHANTOM","PhantomRefProcessing","RefEnqueue","RefForwarding","ReferenceProcessor","ReferenceProcessorSync","ReferenceProcessors","SOFT","Semantics","SoftRefProcessing","WEAK","WeakRefProcessing","add_candidate","add_phantom_candidate","add_soft_candidate","add_weak_candidate","allow_new_candidate","allow_new_candidate","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","disallow_new_candidate","do_work","do_work","do_work","do_work","do_work","drop","drop","drop","drop","drop","drop","drop","drop","drop","enqueue","enqueue_refs","enqueued_references","eq","fmt","forward","forward_refs","from","from","from","from","from","from","from","from","from","get","get_forwarded_reference","get_forwarded_referent","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","keep_referent_alive","new","new","new","new","new","new","new","nursery_index","phantom","process_reference","references","retain","scan","scan_phantom_refs","scan_soft_refs","scan_weak_refs","semantics","soft","sync","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","weak","InitializeOnce","as_any","as_any_mut","borrow","borrow_mut","cold","deref","deref","deref_mut","drop","from","get_ref","init","initialize_once","into","into_any","into_any_arc","into_any_rc","likely","min_of_usize","new","once","try_from","try_into","type_id","unlikely","v","memory_scan","sanity_checker","scan_region","SanityChecker","SanityGCProcessEdges","SanityPrepare","SanityRelease","ScheduleSanityGC","_plan","add_roots","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","base","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_roots_cache","create_scan_work","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","do_work","do_work","do_work","drop","drop","drop","drop","drop","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","new","new","new","new","new","plan","plan","refs","roots","trace_object","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","counter","stats","Counter","Diffable","MonotoneNanoTime","Val","as_any","as_any_mut","borrow","borrow_mut","current_value","current_value","deref","deref_mut","diff","diff","drop","event_counter","from","get_total","implicitly_start","init","into","into_any","into_any_arc","into_any_rc","long_counter","merge_phases","name","phase_change","print_count","print_diff","print_diff","print_last","print_max","print_min","print_total","size_counter","start","start","start","stop","stop","stop","try_from","try_into","type_id","EventCounter","as_any","as_any_mut","borrow","borrow_mut","count","current_count","deref","deref_mut","drop","from","get_total","implicitly_start","implicitly_start","inc","inc_by","init","into","into_any","into_any_arc","into_any_rc","merge_phases","merge_phases","name","name","new","phase_change","print_count","print_current","print_last","print_max","print_min","print_total","print_value","running","start","stats","stop","try_from","try_into","type_id","LongCounter","Timer","as_any","as_any_mut","borrow","borrow_mut","count","deref","deref_mut","diffable","drop","fmt","from","get_total","implicitly_start","implicitly_start","init","into","into_any","into_any_arc","into_any_rc","merge_phases","merge_phases","name","name","new","phase_change","print_count","print_last","print_max","print_min","print_total","print_value","running","start","start_value","stats","stop","total_count","try_from","try_into","type_id","SizeCounter","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","drop","from","inc","init","into","into_any","into_any_arc","into_any_rc","new","print_current_units","print_current_volume","print_units","print_volume","start","stop","try_from","try_into","type_id","units","volume","MAX_COUNTERS","MAX_PHASES","SharedStats","Stats","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","counters","deref","deref","deref_mut","deref_mut","drop","drop","end_gc","exceeded_phase_limit","from","from","gathering_stats","gc_count","get_gathering_stats","get_gathering_stats","get_phase","get_phase","increment_phase","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","new","new_event_counter","new_size_counter","new_timer","phase","print_column_names","print_stats","set_gathering_stats","shared","start_all","start_gc","stop_all","stop_all_counters","total_time","try_from","try_from","try_into","try_into","type_id","type_id","SynchronizedCounter","as_any","as_any_mut","borrow","borrow_mut","count","deref","deref_mut","drop","from","increment","init","into","into_any","into_any_arc","into_any_rc","new","peek","reset","try_from","try_into","type_id","TreadMill","add_to_treadmill","alloc_nursery","as_any","as_any_mut","borrow","borrow_mut","collect","collect_nursery","collect_nursery","copy","default","deref","deref_mut","drop","flip","fmt","from","from_space","init","into","into_any","into_any_arc","into_any_rc","is_from_space_empty","is_nursery_empty","is_to_space_empty","new","to_space","try_from","try_into","type_id","0","0","0","0","0","ALIGNMENT_VALUE","ALLOC_END_ALIGNMENT","ActivePlan","Collection","Controller","EdgeVisitor","Finalizable","FinalizableType","GCThreadContext","LOG_MIN_ALIGNMENT","MAX_ALIGNMENT","MAX_ALIGNMENT_SHIFT","MIN_ALIGNMENT","ObjectModel","ObjectTracer","ReferenceGlue","RootsWorkFactory","Scanning","VMActivePlan","VMBinding","VMCollection","VMEdge","VMGlobalLogBitSpec","VMLocalForwardingBitsSpec","VMLocalForwardingPointerSpec","VMLocalLOSMarkNurserySpec","VMLocalMarkBitSpec","VMObjectModel","VMReferenceGlue","VMScanning","Worker","active_plan","block_for_gc","collection","compare_exchange_metadata","copy","copy_to","create_process_edge_roots_work","create_process_node_roots_work","dump_object","edge_shape","enqueue_references","fetch_add_metadata","fetch_sub_metadata","get_align_offset_when_copied","get_align_when_copied","get_current_size","get_next_mutator","get_reference","get_reference_when_copied_to","get_referent","get_size_when_copied","get_type_descriptor","global","is_mutator","keep_alive","load_metadata","mutator","notify_initial_thread_scan_complete","number_of_mutators","object_model","object_start_ref","prepare_for_roots_re_scanning","prepare_mutator","ref_to_address","reference_glue","reset_mutator_iterator","resume_mutators","scan_object","scan_thread_root","scan_thread_roots","scan_vm_specific_roots","scanning","set_reference","set_referent","spawn_gc_thread","stop_all_mutators","store_metadata","supports_return_barrier","trace_object","visit_edge","0","0","ActivePlan","SynchronizedMutatorIterator","_guard","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","drop","from","get_next_mutator","global","init","into","into_any","into_any_arc","into_any_rc","into_iter","is_mutator","mutator","mutators","mutators","next","number_of_mutators","phantom","reset_mutator_iterator","start","try_from","try_into","type_id","vm_trace_object","vm_trace_object","COORDINATOR_ONLY_STW","COORDINATOR_ONLY_STW","Collection","Controller","GCThreadContext","Worker","as_any","as_any_mut","block_for_gc","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","into_any","into_any_rc","out_of_memory","out_of_memory","prepare_mutator","process_weak_refs","process_weak_refs","resume_mutators","schedule_finalization","schedule_finalization","spawn_gc_thread","stop_all_mutators","try_from","try_into","type_id","vm_release","vm_release","0","0","Edge","SimpleEdge","as_address","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","from","from_address","hash","init","into","into_any","into_any_arc","into_any_rc","load","load","ne","prefetch_load","prefetch_store","slot_addr","store","store","to_owned","try_from","try_into","type_id","GLOBAL_LOG_BIT_SPEC","GLOBAL_LOG_BIT_SPEC","LOCAL_FORWARDING_BITS_SPEC","LOCAL_FORWARDING_BITS_SPEC","LOCAL_FORWARDING_POINTER_SPEC","LOCAL_FORWARDING_POINTER_SPEC","LOCAL_LOS_MARK_NURSERY_SPEC","LOCAL_LOS_MARK_NURSERY_SPEC","LOCAL_MARK_BIT_SPEC","LOCAL_MARK_BIT_SPEC","OBJECT_REF_OFFSET_BEYOND_CELL","OBJECT_REF_OFFSET_BEYOND_CELL","ObjectModel","VM_WORST_CASE_COPY_EXPANSION","VM_WORST_CASE_COPY_EXPANSION","compare_exchange_metadata","copy","copy_to","dump_object","fetch_add_metadata","fetch_sub_metadata","get_align_offset_when_copied","get_align_when_copied","get_current_size","get_reference_when_copied_to","get_size_when_copied","get_type_descriptor","load_metadata","object_start_ref","ref_to_address","specs","store_metadata","0","0","0","0","0","IS_GLOBAL","IS_GLOBAL","IS_GLOBAL","IS_GLOBAL","IS_GLOBAL","LOG_NUM_BITS","LOG_NUM_BITS","LOG_NUM_BITS","LOG_NUM_BITS","LOG_NUM_BITS","VMGlobalLogBitSpec","VMLocalForwardingBitsSpec","VMLocalForwardingPointerSpec","VMLocalLOSMarkNurserySpec","VMLocalMarkBitSpec","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_spec","as_spec","as_spec","as_spec","as_spec","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","define_vm_metadata_spec","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","from","from","from","from","from","in_header","in_header","in_header","in_header","in_header","init","init","init","init","init","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","mark_as_unlogged","num_bits","num_bits","num_bits","num_bits","num_bits","side_after","side_after","side_after","side_after","side_after","side_first","side_first","side_first","side_first","side_first","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Finalizable","FinalizableType","ReferenceGlue","clear_referent","clear_referent","enqueue_references","get_reference","get_referent","keep_alive","set_reference","set_referent","EdgeVisitor","ObjectTracer","RootsWorkFactory","SCAN_MUTATORS_IN_SAFEPOINT","SCAN_MUTATORS_IN_SAFEPOINT","SINGLE_THREAD_MUTATOR_SCANNING","SINGLE_THREAD_MUTATOR_SCANNING","Scanning","create_process_edge_roots_work","create_process_node_roots_work","notify_initial_thread_scan_complete","prepare_for_roots_re_scanning","scan_object","scan_object_and_trace_edges","scan_object_and_trace_edges","scan_thread_root","scan_thread_roots","scan_vm_specific_roots","support_edge_enqueuing","support_edge_enqueuing","supports_return_barrier","trace_object","visit_edge"],"q":["mmtk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::build_info","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::build_info::raw","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::memory_manager","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::mmtk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::BarrierWriteTarget","","mmtk::plan::barriers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::barriers::BarrierWriteTarget","","mmtk::plan::gc_requester","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::generational","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::generational::copying","","","mmtk::plan::generational::copying::gc_work","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::generational::copying::global","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::generational::copying::mutator","","","mmtk::plan::generational::gc_work","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::generational::global","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::generational::immix","","","mmtk::plan::generational::immix::gc_work","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::generational::immix::global","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::generational::immix::mutator","","","mmtk::plan::globalmmtk::plan::immix","","","mmtk::plan::immix::gc_work","","","","","","","","","","","","","","","","","","mmtk::plan::immix::global","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::immix::mutator","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::markcompact","","","mmtk::plan::markcompact::gc_work","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::markcompact::global","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::markcompact::mutator","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::marksweep","","","mmtk::plan::marksweep::gc_work","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::marksweep::global","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::marksweep::mutator","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::mutator_context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::nogc","","mmtk::plan::nogc::global","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::nogc::mutator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::pageprotect","","","mmtk::plan::pageprotect::gc_work","","","","","","","","","","","","","","","","","","mmtk::plan::pageprotect::global","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::pageprotect::mutator","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::plan_constraints","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::semispace","","","mmtk::plan::semispace::gc_work","","","","","","","","","","","","","","","","","","mmtk::plan::semispace::global","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::semispace::mutator","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::tracing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy","","","","","","","","","","mmtk::policy::copy_context","","","","","","","mmtk::policy::copyspace","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy::gc_work","","","","","","mmtk::policy::immix","","","","","","","","","","","mmtk::policy::immix::block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy::immix::block::BlockState","mmtk::policy::immix::chunk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy::immix::defrag","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy::immix::immixspace","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy::immix::line","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy::immortalspace","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy::largeobjectspace","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy::lockfreeimmortalspace","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy::mallocspace","","mmtk::policy::mallocspace::global","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy::mallocspace::metadata","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy::markcompactspace","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy::spacemmtk::scheduler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::scheduler::controller","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::scheduler::gc_workmmtk::scheduler::scheduler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::scheduler::scheduler::CoordinatorMessage","mmtk::scheduler::stat","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::scheduler::work","","","","","","","","","mmtk::scheduler::work_bucket","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::scheduler::work_counter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::scheduler::worker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::address","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::alloc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::alloc::AllocatorSelector","","","","","mmtk::util::alloc::allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::alloc::allocators","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::alloc::allocators::AllocatorSelector","","","","","mmtk::util::alloc::bumpallocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::alloc::embedded_meta_data","","","","","","","mmtk::util::alloc::immix_allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::alloc::large_object_allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::alloc::malloc_allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::alloc::markcompact_allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::alloc::object_ref_guard","","","mmtk::util::alloc_bit","","","","","","","","","","","mmtk::util::analysis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::analysis::gc_count","","","","","","","","","","","","","","","","","","","","","","mmtk::util::analysis::obj_num","","","","","","","","","","","","","","","","","","","","","","mmtk::util::analysis::obj_size","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::constants","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::conversions","","","","","","","","","","","","","","","","","mmtk::util::copy","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::copy::CopySelector","","mmtk::util::edge_logger","","","","","","","","","","","","","","","","","","","","","","mmtk::util::erase_vm","mmtk::util::finalizable_processor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::generic_freelist","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::heap","","","","","","","","mmtk::util::heap::accounting","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::heap::freelistpageresource","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::heap::heap_meta","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::heap::layout","","","","","","","mmtk::util::heap::layout::fragmented_mapper","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::heap::layout::heap_layout","","mmtk::util::heap::layout::heap_parameters","","","mmtk::util::heap::layout::map","","","","","","","","","","","","","","","","","","","","mmtk::util::heap::layout::map64","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::heap::layout::mmapper","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::heap::layout::vm_layout_constants","","","","","","","","","","","","","","","","","","","","","","mmtk::util::heap::monotonepageresource","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::heap::monotonepageresource::MonotonePageResourceConditional","","","mmtk::util::heap::pageresource","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::heap::space_descriptor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::heap::vmrequest","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::heap::vmrequest::VMRequest","","","","","","","mmtk::util::int_array_freelist","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::is_mmtk_object","","mmtk::util::linear_scan","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::logger","mmtk::util::malloc","","","","","","","","","","mmtk::util::malloc::library","mmtk::util::malloc::library::libc_malloc","","","","","","mmtk::util::malloc::malloc_ms_util","","","","","","","mmtk::util::memory","","","","","","","","","","","","","mmtk::util::metadata","","","","","","","","","","","","mmtk::util::metadata::MetadataSpec","","mmtk::util::metadata::global","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::metadata::global::MetadataSpec","","mmtk::util::metadata::header_metadata","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::metadata::side_metadata","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::metadata::side_metadata::constants","","","","","","","","","","","mmtk::util::metadata::side_metadata::global","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::metadata::side_metadata::helpers","","","","","","","mmtk::util::metadata::side_metadata::sanity","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::metadata::side_metadata::spec_defs","","","","","","","","","","","mmtk::util::object_forwarding","","","","","","","","","","","","","","","","","","","mmtk::util::opaque_pointer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::optionsmmtk::util::raw_memory_freelist","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::reference_processormmtk::util::rust_util","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::sanity","","mmtk::util::sanity::memory_scan","mmtk::util::sanity::sanity_checker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::statistics","","mmtk::util::statistics::counter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::statistics::counter::event_counter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::statistics::counter::long_counter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::statistics::counter::size_counter","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::statistics::stats","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::synchronized_counter","","","","","","","","","","","","","","","","","","","","","","mmtk::util::treadmill","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::vm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::vm::GCThreadContext","","mmtk::vm::active_plan","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::vm::collection","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::vm::collection::GCThreadContext","","mmtk::vm::edge_shape","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::vm::object_model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::vm::object_model::specs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::vm::reference_glue","","","","","","","","","","","mmtk::vm::scanning","","","","","","","","","","","","","","","","","","","","","",""],"d":["Allocation semantics that MMTk provides. Each allocation â€¦","BarrierSelector describes which barrier to use.","","","","","","An MMTk instance. MMTk allows multiple instances to run â€¦","","A mutator is a per-thread data structure that manages â€¦","Each GC plan should provide their implementation of a â€¦","","","This trait represents an object queue to enqueue objects â€¦","A plan describes the global core functionality for all â€¦","A GC workerâ€™s copy allocator for copying GCs. Each â€¦","","","","","","","","","","","This method controls the triggering of a GC. It is called â€¦","","","","Enqueue an object into the queue.","","","get all the spaces in the plan","","Get the number of pages that are used.","","VM-to-MMTk interface: safe Rust APIs.","","The mutator thread that is bound with this Mutator struct.","The options for this instance.","","GC algorithms from the MMTk suite.","","","Memory policies that can be used for spaces.","","","Prepare the plan before a GC. This is invoked in an â€¦","","","","Release the plan after a GC. This is invoked at the end of â€¦","","","","A general scheduler implementation. MMTk uses it to â€¦","","Utilities used by other modules, including allocators, â€¦","MMTk-to-VM interface: the VMBinding trait.","Comma separated features enabled for this build","Full build info, including MMTkâ€™s name, version, git, â€¦","","Git version as short commit hash, such as a96e8f9, or â€¦","","MMTk crate version such as 0.14.0","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The endianness, given by <code>CARGO_CFG_TARGET_ENDIAN</code>.","The toolchain-environment, given by <code>CARGO_CFG_TARGET_ENV</code>.","The OS-family, given by <code>CARGO_CFG_TARGET_FAMILY</code>.","The operating system, given by <code>CARGO_CFG_TARGET_OS</code>.","The pointer width, given by <code>CARGO_CFG_TARGET_POINTER_WIDTH</code>.","The target architecture, given by <code>CARGO_CFG_TARGET_ARCH</code>.","The Continuous Integration platform detected during â€¦","Value of DEBUG for the profile used during compilation.","The features that were enabled during compilation.","The features as a comma-separated string.","If the crate was compiled from within a git-repository, â€¦","If the repository had dirty/staged files.","If the crate was compiled from within a git-repository, â€¦","If the crate was compiled from within a git-repository, â€¦","The host triple of the rust compiler.","The parallelism that was specified during compilation.","Value of OPT_LEVEL for the profile used during compilation.","A colon-separated list of authors.","The description.","The homepage.","The license.","The name of the package.","The source repository as advertised in Cargo.toml.","The full version.","The major version.","The minor version.","The patch version.","The pre-release version.","<code>release</code> for release builds, <code>debug</code> for other builds.","The compiler that cargo resolved to use.","The output of <code>rustc -V</code>","The documentation generator that cargo resolved to use.","The output of <code>rustdoc -V</code>","The target triple that was being compiled for.","Register a finalizable object. MMTk will retain the â€¦","Add a reference to the list of phantom references. A â€¦","Add a reference to the list of soft references. A binding â€¦","Add a reference to the list of weak references. A binding â€¦","Add a work packet to the given work bucket. Note that this â€¦","Bulk add a number of work packets to the given work â€¦","Allocate memory for an object. For performance reasons, a â€¦","Request MMTk to create a mutator for the given thread. For â€¦","The standard calloc.","The standard calloc except that with the feature â€¦","The standard malloc except that with the feature â€¦","Reclaim a mutator that is no longer needed.","Disallow MMTk to trigger garbage collection. When â€¦","Allow MMTk to trigger garbage collection when heap is â€¦","Flush the mutatorâ€™s local states.","The standard free. The <code>addr</code> in the arguments must be an â€¦","Return free memory in bytes.","The standard free except that with the feature â€¦","Poll for GC. MMTk will decide if a GC is needed. If so, â€¦","Pop all the finalizers that were registered for â€¦","Return an AllocatorSelector for the given allocation â€¦","Get an object that is ready for finalization. After each â€¦","Pop finalizers that were registered and associated with a â€¦","Trigger a garbage collection as requested by the user.","Generic hook to allow benchmarks to be harnessed. We do a â€¦","Generic hook to allow benchmarks to be harnessed. We stop â€¦","Initialize the scheduler and GC workers that are required â€¦","Return true if the <code>object</code> lies in a region of memory where","Is the object alive?","Is the address in the mapped memory? The runtime can use â€¦","Check if <code>addr</code> is the address of an object reference to an â€¦","Return the ending address of the heap. <em>Note that currently </em>â€¦","The standard malloc. MMTk either uses its own allocator, â€¦","Initialize an MMTk instance. A VM should call this method â€¦","Check that if a garbage collection is in progress and if â€¦","Get the number of workers. MMTk spawns worker threads for â€¦","Add a callback to be notified after the transitive closure â€¦","Perform post-allocation actions, usually initializing â€¦","The write barrier by MMTk. This is a <em>post</em> write barrier, â€¦","Process MMTk run-time options. Returns true if the option â€¦","Process multiple MMTk run-time options. Returns true if â€¦","The standard realloc.","The standard realloc except that with the feature â€¦","Run the main loop for the GC controller thread. This â€¦","Run the main loop of a GC worker. This method does not â€¦","Return the starting address of the heap. <em>Note that </em>â€¦","Return the total memory in bytes.","Return used memory in bytes.","A global Mmapper for mmaping and protection of virtual â€¦","An MMTk instance. MMTk allows multiple instances to run â€¦","","","A global VMMap that manages the mapping of spaces to â€¦","","","","","","","","","","","","","","","","","","","Build an MMTk instance from the builder.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an MMTK builder with default options","","The options for this instance.","","","","","","Set an option.","Set multiple options by a string. The string should be â€¦","","","","","","","","","","","","","Allocation semantics that MMTk provides. Each allocation â€¦","","BarrierSelector describes which barrier to use.","For field writes in HotSpot, we cannot always get the â€¦","","","","","","","","","","","A mutator is a per-thread data structure that manages â€¦","Each GC plan should provide their implementation of a â€¦","","","","","This trait represents an object queue to enqueue objects â€¦","A transitive closure visitor to collect all the edges of â€¦","","A plan describes the global core functionality for all â€¦","This struct defines plan-specific constraints. Most of the â€¦","","","","","An implementation of <code>ObjectQueue</code> using a <code>Vec</code>.","","","","","","Read/Write barrier implementations.","","","This method controls the triggering of a GC. It is called â€¦","","","Enqueue an object into the queue.","","","","","","","","get all the spaces in the plan","","Get the number of pages that are used.","The global part of a plan implementation.","","","Plan: marksweep (currently using malloc as its freelist â€¦","Size (in bytes) beyond which copied objects must be copied â€¦","Size (in bytes) beyond which new regular objects must be â€¦","Some plans may allow benign race for testing mark bit, and â€¦","","Mutator context for each application thread.","The mutator thread that is bound with this Mutator struct.","","Some policies do object forwarding after the first â€¦","","Does this plan use the log bit? See â€¦","Enqueued nodes.","Plan: nogc (allocation-only)","","Plan: pageprotect","","Plan-specific constraints.","","","","Prepare the plan before a GC. This is invoked in an â€¦","","Release the plan after a GC. This is invoked at the end of â€¦","","","Plan: semispace","This module contains code useful for tracing, i.e. â€¦","","","","","BarrierSelector describes which barrier to use.","For field writes in HotSpot, we cannot always get the â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attepmt to atomically log an object. Returns true if the â€¦","The metadata used for log bit. Though this allows taking â€¦","","","","","","","","","","","","","","","","","","","","","","","","","GC requester.  This object allows other threads to request â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Barrier overhead measurement:","","Full heap collection as nursery GC.","Constraints for generational plans. Each generational plan â€¦","","","","","","","Generational copying (GenCopy) Plan: generational copying","","","","","","","","","Generational immix (GenImmix) Plan: generational immix","","","","","","Create global side metadata specs for generational plans. â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the number of pages available for allocation. â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Process edges for a nursery GC. This type is provided if a â€¦","","","","","","","","","","","","","","","","","","","","","","","","Common implementation for generational plans. Each â€¦","","","","","Check if we need a GC based on the nursery space usage. â€¦","The common plan.","","","","","","","Is this GC full heap?","Get pages reserved for the collection by a generational â€¦","Get spaces in generation plans","Get pages used by a generational plan. A generational plan â€¦","","","","","","Is the current GC a nursery GC?","","","","Is next GC full heap?","The nursery space.","","Prepare Gen. This should be called by a single thread in â€¦","Release Gen. This should be called by a single thread in â€¦","Check if we should do a full heap GC. It returns true if â€¦","Set next_gc_full_heap to the given value.","Check a plan to see if the next GC should be a full heap â€¦","","Trace objects for spaces in generational and common plans â€¦","Trace objects for spaces in generational and common plans â€¦","","","","Verify side metadata specs used in the spaces in Gen.","Independent of how many pages remain in the page budget (a â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generational immix. This implements the functionality of a â€¦","","","","","","","","","","","","","","","Generational plan, which includes a nursery space and â€¦","","","Return the number of pages avilable for allocation. â€¦","","","","","An immix space as the mature space.","","","","","","","","","Whether the last GC was a defrag GC for the immix space.","Whether the last GC was a full heap GC","","","","","","","","","","","","","","","Allocation semantics that MMTk provides. Each allocation â€¦","BasePlan should contain all plan-related state and â€¦","","CommonPlan is for representing state and features used by â€¦","","","","","","","","","A plan describes the global core functionality for all â€¦","A plan that uses <code>PlanProcessEdges</code> needs to provide an â€¦","","","A counter that keeps tracks of the number of bytes â€¦","","Wrapper around analysis counters","","","","","","","","","","","","","","","","","","","","","","","This method controls the triggering of a GC. It is called â€¦","","","","","","Create a copy config for this plan. A copying GC plan MUST â€¦","Create a copy config for this plan. A copying GC plan MUST â€¦","Create a copy config for this plan. A copying GC plan MUST â€¦","Create thread local GC worker.","","","","","","","","","","","","","","","Returns a boxed object from a boxed trait object if the â€¦","Returns a mutable reference to the object within the trait â€¦","Returns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the â€¦","Returns a reference to the object within the trait object â€¦","","","","","","","","","","","","Force the next collection to be full heap.","Force the next collection to be full heap.","Force the next collection to be full heap.","","","","","","","","","","","","","","Get the number of pages that are still available for use. â€¦","Get the number of pages that are still available for use. â€¦","Get the number of pages that are still available for use. â€¦","Get the number of pages that are reserved for collection. â€¦","Get the number of pages that are reserved for collection. â€¦","Get the number of pages that are reserved for collection. â€¦","Get the number of pages that are NOT used. This is clearly â€¦","Get the number of pages that are NOT used. This is clearly â€¦","Get the number of pages that are NOT used. This is clearly â€¦","","","","Return the number of pages available for allocation into â€¦","Return the number of pages available for allocation into â€¦","Return the number of pages available for allocation into â€¦","Get the number of pages that are reserved, including used â€¦","Get the number of pages that are reserved, including used â€¦","Get the number of pages that are reserved, including used â€¦","get all the spaces in the plan","","","Get the total number of pages for the heap.","Get the total number of pages for the heap.","Get the total number of pages for the heap.","Get the number of pages that are used.","","","The application code has requested a collection.","The application code has requested a collection.","The application code has requested a collection.","The application code has requested a collection.","","","Increase the allocation bytes and return the current â€¦","","Inform that 1 stack has been scanned. The argument â€¦","","","","","Whether MMTk is now ready for collection. This is set to â€¦","","","","","","","","","","","","","","","","","","","","Returns true if the trait object wraps an object of type â€¦","Is current GC only collecting objects allocated since last â€¦","Is current GC only collecting objects allocated since last â€¦","Is current GC only collecting objects allocated since last â€¦","","","","","","","","","","Return true if this collection was triggered internally.","Check if we should do precise stress test. If so, we need â€¦","Check if the options are set for stress GC. If either â€¦","Return true if this collection was triggered by â€¦","Return whether last GC is a full GC.","Return whether last GC is a full GC.","Return whether last GC is a full GC.","Return whether last GC was an exhaustive attempt to â€¦","Return whether last GC was an exhaustive attempt to â€¦","Return whether last GC was an exhaustive attempt to â€¦","","","","","","","","","","A counteer that keeps tracks of the number of bytes â€¦","","Whether objects in this plan may move. If any of the â€¦","","","","","","","","","","","","","","","","","This method is called periodically by the allocation â€¦","This method is called periodically by the allocation â€¦","This method is called periodically by the allocation â€¦","Post-scan objects in the plan. Each object is scanned by â€¦","","","Prepare the plan before a GC. This is invoked in an â€¦","","","Prepare for stack scanning. This is usually used with â€¦","Prepare a worker for a GC. Each worker has its own prepare â€¦","Prepare a worker for a GC. Each worker has its own prepare â€¦","Prepare a worker for a GC. Each worker has its own prepare â€¦","Release the plan after a GC. This is invoked at the end of â€¦","","","Reset collection state information.","","A counter for per-mutator stack scanning","","","","Check if we should do a stress GC now. If GC is â€¦","","","","Are the stacks scanned?","","Have we scanned all the stacks?","","","Trace objects in the plan. Generally one needs to figure â€¦","","","","","Should we trigger a GC when the heap is full? It seems â€¦","MMTK has requested stop-the-world activity (e.g., stw â€¦","","","","","","","","","","","","","","","","","A VM space is a space allocated and populated by the VM.  â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","iterate through the heap and calculate the new location of â€¦","compact live objects based on forwarding pointers â€¦","Forwarding trace","","Marking trace","create another round of root scanning work packets to â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Simple work packet that just sweeps a single chunk","Work packet that generates sweep jobs for gc workers. Each â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A mutator is a per-thread data structure that manages â€¦","","Each GC plan should provide their implementation of a â€¦","This is used for plans to indicate the number of â€¦","","","","Mapping between allocation semantics and allocator selector","","","","","","","","","","","","","","","","","","Create an allocator mapping for spaces in Common/BasePlan â€¦","Create a space mapping for spaces in Common/BasePlan for a â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The mutator thread that is bound with this Mutator struct.","","","","","","","","","","","Plan-specific code for mutator prepare. The VMWorkerThread â€¦","","","Plan-specific code for mutator release. The VMWorkerThread â€¦","Mapping between allocator selector and spaces. Each pair â€¦","","","","","","","","","","check if the number of each allocator is okay. Panics if â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","When nogc_multi_space is disabled, force all the â€¦","We use three bump allocators when enabling â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a mutator instance. Every object is allocated to â€¦","","","","","","","","","","","Prepare mutator. Do nothing.","Release mutator. Do nothing.","","","","","","This struct defines plan-specific constraints. Most of the â€¦","","","","","","","","","","","","","","","","","","","Size (in bytes) beyond which copied objects must be copied â€¦","Size (in bytes) beyond which new regular objects must be â€¦","Some plans may allow benign race for testing mark bit, and â€¦","","","Some policies do object forwarding after the first â€¦","","Does this plan use the log bit? See â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reserve a capacity of this on first enqueue to avoid â€¦","This trait represents an object queue to enqueue objects â€¦","A transitive closure visitor to collect all the edges of â€¦","An implementation of <code>ObjectQueue</code> using a <code>Vec</code>.","","","","","","","","","","","","","","","","","","Enqueue an object into the queue.","","","","","","","","","","","","","","Consume this <code>VectorObjectQueue</code> and return its underlying â€¦","Return <code>true</code> if the queue is empty.","Create an empty <code>VectorObjectQueue</code>.","","Enqueued nodes.","Return the contents of the underlying vector.  It will â€¦","","","","","","","","","Copy context defines the thread local copy allocator for â€¦","","Policy specific GC work","","","","","","","This class defines and manages spaces.  Each policy is an â€¦","A GC workerâ€™s copy allocator for copying GCs. Each â€¦","","","","","","","This type implements a simple copying space.","Copy allocator for CopySpace","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This trait defines policy-specific behavior for tracing â€¦","Used to identify the trace if a policy has different kinds â€¦","Return whether the policy moves objects.","Policy-specific post-scan-object hook.  It is called after â€¦","Trace object in the policy. If the policy copies objects, â€¦","Mark/sweep memory for block-level only","Opportunistic copying","Mark lines when scanning objects. Otherwise, do it at mark â€¦","The max object size for immix: half of a block","","","","","","","","","Data structure to reference an immix block.","A non-block single-linked list to store blocks.","The block allocation state.","","Block defrag state table (side)","Lines in block","Log lines in block","Log pages in block","Private constant","Block mark table (side)","Private constant","Private constant","the block is allocated and marked.","Pages in block","the block is marked as reusable.","the block is not allocated.","the block is allocated but not marked.","","","","","","","","","","","","","Get the chunk containing the block.","","","","","","Deinitalize a block before releasing.","","","","","","","","","","","","","","","","","","","","Get an array of all reusable blocks stored in this â€¦","Get the number of holes.","Get block mark state.","","","Initialize a clean block after acquired from page-resource.","","","","","","","","","","","","","","Test if the block is marked for defragmentation.","Test if the block is reuasable.","Get number of blocks in this list.","Get the address range of the blockâ€™s line mark table.","Get the range of lines within the block.","","","","Pop a block out of the list.","Add a block to the list.","","Clear the list.","Mark the block for defragmentation.","Record the number of holes in the block.","Set block mark state.","","Sweep this block. Return true if the block is swept.","","","","","","","","","","","","","","Chunk alloc table","The chunk is allocated.","Blocks in chunk","Data structure to reference a MMTk 4 MB chunk.","A byte-map to record all the allocated chunks","Chunk allocation state","The chunk is not allocated.","Log blocks in chunk","Chunk sweeping work packet.","Chunk constant with zero address","A range of all chunks in the heap.","","","","","","","","","Get a range of blocks within this chunk.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate chunk sweep work packets.","Helper function to create per-chunk processing work â€¦","Get chunk state","","","","","","","","","","","","","","","","","","","","","","","","Set chunk state","","Sweep this chunk.","","","","","","","","","","","","","","","","","","","","","","Report back a completed mark histogram","","","The number of remaining clean pages in defrag space.","","","Determine whether the current GC should do defragmentation.","","Get the number of defrag headroom pages.","Is defrag space exhausted?","A block with number of holes greater than this threshold â€¦","","","","Calculate the defrag threshold.","","","Get the numebr of all the recyclable lines in all the â€¦","Check if the current GC is a defrag GC.","Is current GC a defrag GC?","","","","","","A list of completed mark histograms reported by workers","Allocate a new local histogram.","Update available_clean_pages_for_defrag counter when a â€¦","Prepare work. Should be called in ImmixSpace::prepare.","Release work. Should be called in ImmixSpace::release.","Check if the defrag space is exhausted.","","","","Immix copy allocator","","","A work packet to prepare each block for GC. Performs the â€¦","","","","","","","","","","","","","Atomically mark an object.","","","","","","","","Allocation status for all chunks in immix space","","","","check if the current GC should do defragmentation.","Defrag utilities","","Get the number of defrag headroom pages.","","","","","","","","","","","","Trace and mark objects without evacuation.","","","","Allocate a clean block.","Hole searching.","","Pop a reusable block from the reusable block list.","","Check if current GC is a defrag GC.","","","","","","","","","","","","","","","","","","","","Check if an object is marked.","","Check if an object is pinned.","","Current line mark state","Line mark state in previous GC","Mark all the lines that the given object spans.","Object mark state","","","","","","","","","","Release for the immix space. This is called when a GC â€¦","","Release a block.","","Clear object mark table","A list of all reusable blocks","Get work packet scheduler","Work packet scheduler","","","Get side metadata specs","","","Trace and mark objects. If the current object is in defrag â€¦","Trace object and do evacuation if required.","Trace and mark objects without evacuation.","","","","","","","","","","","Data structure to reference a line within an immix block.","Line mark table (side)","","","","","Get the block containing the line.","","","","","","","","","","","","Get line index within its containing block.","","","","","","Test line mark state.","Mark the line. This will update the side line mark table.","Mark all lines the object is spanned to.","","","","","","","","This type implements a simple immortal collection policy. â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This type implements a policy for large objects. Each â€¦","","","","Allocate an object","","","","","","","Move a given object out of nursery","","","","","","","","","","","","","","","","","Check if a given object is in nursery","","","","","","","","","","","","","","","","","","","","","","This type implements a lock free version of the immortal â€¦","","","","","","","","","Heap range start","","","","Total bytes for the space","","Get the name of the space","","","","","","","","","","","","Heap range end","","","","","","","","","","Zero memory after slow-path allocation","start of this space","","","","","We have to override the default implementation because â€¦","! A marksweep space that allocates from malloc.","","","","","","","","","","","","","","","","","","","","","","Clean up for an empty chunk","","","Used when each chunk is done. Only called in debug build.","","","","","","","","","","","Given an object in MallocSpace, return its malloc address, â€¦","","","","","","","","","","","","","","","","","","For malloc space, we just use the side metadata.","","","","","","","","","","","","","","This sweep function is called when the mark bit sits in â€¦","This function is called when the mark bits sit on the side â€¦","Sweep an object if it is dead, and unset page marks for â€¦","","","","","","","","","","","","Metadata spec for the active chunk byte","Metadata spec for the active page byte","Lock to synchronize the mapping of side metadata for a â€¦","","Maximum metadata address for the â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check if there is an object allocated by malloc at the â€¦","","","","","","","","","","","","","","","","Check if a given object was allocated by malloc","","","","","Check if metadata is mapped for a range [addr, addr + â€¦","Check if metadata is mapped for a given address. We check â€¦","","","","Load u128 bits of side metadata","Eagerly map the active chunk metadata surrounding â€¦","We map the active chunk metadata (if not previously â€¦","","","","","","","","","","","","","","","","","","","","","","","For each MarkCompact object, we need one extra word for â€¦","","We need one extra header word for each object. Considering â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get header forwarding pointer for an object","","Get the address for header forwarding pointer","","","","","","","","","","","","","","","","","","","","","","","","","","Store header forwarding pointer for an object","","","","","","","","","","","","","","","","Print debug info for SFT. Should be false when committed.","","","","","Space Function Table (SFT).","","","","","A lock used during acquire() to make sure only one thread â€¦","","","","","","","","","","","","","","Make sure we have valid SFT entries for the object â€¦","Return the number of physical pages available.","","","","","","","","","","","","","","","For a copying space that allows sft_trace_object(), this â€¦","","","","","","","","","","","","Returns a boxed object from a boxed trait object if the â€¦","Returns a mutable reference to the object within the trait â€¦","Returns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the â€¦","Returns a reference to the object within the trait object â€¦","","","","","","Ensure this space is marked as mapped â€“ used when the â€¦","","","","","","","","","Get forwarding pointer if the object is forwarded.","","","","This is called after we get result from page resources.  â€¦","","","","","","","","","","Initialize object metadata (in the header, or in the side â€¦","","Initialize entires in SFT map for the space. This is â€¦","","","","","","","","","","","","","","","","","","","","","","","Returns true if the trait object wraps an object of type â€¦","","Is the object managed by MMTk? For most cases, if we find â€¦","","Is the object live, determined by the policy?","","Is <code>addr</code> a valid object reference to an object allocated in â€¦","","","Is the object movable, determined by the policy? E.g. the â€¦","","Is the object reachable, determined by the policy? Note: â€¦","Is the object sane? A policy should return false if there â€¦","","","","","","","","The space name","","","","This field equals to needs_log_bit in the plan constraints.","","","","","","","Print the VM map for a space. Space needs to be â€¦","","","","","What copy semantic we should use for this space if we copy â€¦","","Trace objects through SFT. This along with <code>SFTProcessEdges</code> â€¦","","","","","","","","","","","","","","","","","","","","Update SFT map for the given address range. It should be â€¦","Ensure that the current spaceâ€™s metadata context does â€¦","","","","","","","","","","","A special kind of work that will execute on the â€¦","","","","The thread local struct for the GC controller, the â€¦","","A GC worker.  This part is privately owned by a worker â€¦","","","Scan &amp; update a list of object slots","","","The work packet type for scanning objects when using this â€¦","","","","","","","","The GC controller thread.","The <code>GCWorker</code> is used to execute packets. The controller is â€¦","The copy context, used to implement copying GC.","Create an object-scanning work packet to be used for this â€¦","Define the work for this packet. However, this is not â€¦","","True if this struct is the embedded GCWorker of the â€¦","Local work packet queue.","The reference to the MMTk instance.","The reference to the MMTk instance.","","The ordinal of the worker, numbered from 0 to the number â€¦","The receiving end of the channel to get â€¦","The reference to the GC requester.","","The reference to the scheduler.","The reference to the scheduler.","The sending end of the channel to send message to the â€¦","Reference to the shared part of the GC worker.  It is used â€¦","Statistics for work packets","The VM-specific thread-local state of the GC thread.","Trace an MMTk object. The implementation should forward â€¦","","","Counter for work packets","","The thread local struct for the GC controller, the â€¦","","","","","The <code>GCWorker</code> is used to execute packets. The controller is â€¦","","","Coordinate workers to perform GC in response to a GC â€¦","","","","","","","The reference to the MMTk instance.","","Process a message. Return true if the GC is finished.","The receiving end of the channel to get â€¦","The reference to the GC requester.","","The reference to the scheduler.","","","","","","","","","","","The associated ProcessEdgesWork for processing the edges â€¦","A short-hand for <code>&lt;E::VM as VMBinding&gt;::VMEdge</code>.","","","","This provides an implementation of <code>ProcessEdgesWork</code>. A â€¦","This is an alternative to <code>ScanObjects</code> that calls the â€¦","The global GC Preparation Work This work packet invokes â€¦","The collector GC Preparation Work","The mutator GC Preparation Work","","Scan &amp; update a list of object slots","","","The global GC release Work This work packet invokes â€¦","The collector release Work","The mutator release Work","","","A general process edges implementation using SFT. A plan â€¦","Scan objects and enqueue the edges of the objects.  For â€¦","Trait for a work packet that scans objects","The work packet type for scanning objects when using this â€¦","","","","","Stop all mutators","","Delegate to the VM binding for reference processing.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an object-scanning work packet to be used for this â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The common code for ScanObjects and PlanScanObjects.","","","","","","","","","","","","","","","","","","","","","","Flush the nodes in ProcessEdgesBase, and create a â€¦","Flush the nodes in ProcessEdgesBase, and create a â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create another object-scanning work packet of the same â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Pop all nodes from nodes, and clear nodes to an empty â€¦","Called after each object is scanned.","","","","","","","","Return true if the objects in this packet are pointed by â€¦","","","","","","","Start the a scan work packet. If SCAN_OBJECTS_IMMEDIATELY, â€¦","Start the a scan work packet. If SCAN_OBJECTS_IMMEDIATELY, â€¦","","Trace an MMTk object. The implementation should forward â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Notify the coordinator thread that all GC tasks are â€¦","","Send a work-packet to the coordinator thread/","","Check if all the work buckets are empty","","","","","","","","","","","A callback to be fired after the <code>Closure</code> bucket is drained.","The shared part of the GC worker object of the controller â€¦","","","","","","","","","","","","","","","","","","","","","","","","","Counter for pending coordinator messages.","Called by workers to get a schedulable work packet. Park â€¦","Get a schedulable work packet.","Get a schedulable work packet without retry.","","","Schedule all the common work packets","Create GC threads, including the controller thread and all â€¦","","","","","","","","Open buckets if their conditions are met.","Work buckets","Workers","Condition Variable for worker synchronization","","Merge and print the work-packet level statistics from all â€¦","Describing a single work packet","Worker thread local counterpart of <code>SchedulerStat</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","Stop all work counters for the work packet type of the â€¦","","","","Used during statistics printing at â€¦","","","","","","","","","","","","","","","Measure the execution of a work packet by starting all â€¦","Merge work counters from different worker threads","","","","","","","","","","","","","Collect work counters from work threads. Two dimensional â€¦","","Count the number of work packets executed for different â€¦","","Map work packet type IDs to work packet names","Extract the work-packet name from the full type name. i.e. â€¦","A special kind of work that will execute on the â€¦","","This trait provides a group of associated types that are â€¦","","","","Define the work for this packet. However, this is not â€¦","Do work and collect statistics. This internally calls â€¦","Do work and collect statistics. This internally calls â€¦","","","","","","","","","","","","","","","","","","","Enable the bucket","","Add a work packet to this bucket","Add a work packet to this bucket","Add a work packet to this bucket Panic if this bucket â€¦","","","","","","","","","","","","","Add multiple packets","Add multiple packets with a higher priority. Panic if this â€¦","","","","Disable the bucket","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Test if the bucket is drained","","","","","","Get a work packet from this bucket","","","","","","","","","","","","","","","","","","","An abstraction of work counters","Common struct for different work counters","Make <code>WorkCounter</code> trait objects cloneable","Measure the durations of work packets","","","","","","","","","","","","Clone the object","","","","","","","","","","","","","","Return a reference to <code>WorkCounterBase</code>","","Return a mutatable reference to <code>WorkCounterBase</code>","","","","","","","","","","","","","Merge two <code>WorkCounterBase</code>, keep the semantics of the â€¦","Merge two <code>WorkCounterBase</code>, modify the current object in â€¦","Update the object based on a single value","","Name of counter","","","","Start the counter","","","Stop the counter","","","","","","","","","","","A GC worker.  This part is privately owned by a worker â€¦","The part shared between a GCWorker and the scheduler. This â€¦","","","A worker group to manage all the GC workers (except the â€¦","Add a work packet to the work queue. If the bucket is â€¦","Add a work packet to the work queue and mark it with a â€¦","Check if all the workers are packed","","","","","","","","","","","","","","","The copy context, used to implement copying GC.","Decrease the packed-workers counter. Called after a worker â€¦","","","","","","","A queue of GCWork that can only be processed by the owned â€¦","","","","","","","","","","Return true if thereâ€™re any pending designated work","Increase the packed-workers counter. Called before a â€¦","","","","","","","","","","","","","","","","True if this struct is the embedded GCWorker of the â€¦","Local work packet queue.","The reference to the MMTk instance.","","","Create a WorkerGroup","The ordinal of the worker, numbered from 0 to the number â€¦","Get the number of parked workers in the group","","Poll a ready-to-execute work packet in the following order:","Entry of the worker thread. Each worker will keep polling â€¦","","The reference to the scheduler.","The sending end of the channel to send message to the â€¦","Reference to the shared part of the GC worker.  It is used â€¦","Spawn all the worker threads","Worker-local statistics data.","Handle for stealing packets from the current worker","The VM-specific thread-local state of the GC thread.","","","","","","","","","","","Get the number of workers in the group","Shared worker data","","An abstract of memory address and object reference.","Allocators","Alloc bit","An analysis framework for collecting data and profiling in â€¦","Constants used in MMTk","Calculation, conversion and rounding for memory related â€¦","The copy allocators for a GC worker.","","Logging edges to check duplicated edges in GC. This is a â€¦","Non-generic refs to generic types of . MMTk uses â€¦","Finalization implementation.","A very simple, generic malloc-free allocator","Heap implementation, including page resource, mmapper, etc.","Implementation of GenericFreeList by an int vector.","","Linear scan through a heap range","Logger initialization","Various malloc implementations (conditionally compiled by â€¦","Wrapper functions for memory syscalls such as mmap, â€¦","Metadata (OnSide or InHeader) implementation. This is a â€¦","Forwarding word in object copying.","Opaque pointers used in MMTk, e.g. VMThread.","MMTk command line options.","Implementation of GenericFreeList backed by raw memory, â€¦","Reference processing implementation.","Utilities funcitons for Rust","Sanity checker for GC.","Utils for collecting statistics.","","A treadmill implementation.","","","Address represents an arbitrary address. This is designed â€¦","offset in byte","size in bytes","","","ObjectReference represents address for an object. Compared â€¦","","","","","","","aligns down the address to the given alignment","aligns up the address to the given alignment","","","","","converts the Address to a pointer-sized integer","atomic operation: load","atomic operation: store","","","","","","","","","returns the chunk index for this address","","","","","","atomic operation: compare and exchange usize","","","","","","","","","","","","","","","","","","","","","","creates Address from a mutable pointer","creates Address from a pointer","","creates an arbitrary Address","","Get forwarding pointer if the object is forwarded.","","","","","","","","","","","","","","","is this address aligned to the given alignment","","Is the object live, determined by the policy?","return true if the referenced memory is mapped","","is this object reference null reference?","Is the object reachable, determined by the policy? Note: â€¦","","is this address zero?","","loads a value of type T from the address","","creates an Address of (usize::MAX)","","","","","","","shifts the address by N T-typed objects (returns addr + N â€¦","","","","stores a value of type T to the address","","","","","converts the ObjectReference to an Address","converts the Address to a mutable pointer","converts the Address into an ObjectReference","","","converts the Address to a pointer","","","","","","","","","returns the ObjectReference","creates a null Address (0)","A list of errors that MMTk can encounter during allocation.","A trait which implements allocation routines. Every â€¦","","","","The specified heap size is too small for the given program â€¦","","","","","","","A thin wrapper(specific implementation) of bump allocator â€¦","The OS is unable to mmap or acquire more memory. Critical â€¦","","An allocation attempt. The implementation of this function â€¦","Single slow path allocation attempt. This is called by â€¦","! Various allocators implementation. The allocator trait â€¦","A list of all the allocators, embedded in Mutator","","Bump pointer allocator","Current cursor for bump pointer","Return if this allocator can do thread local allocation. â€¦","Embedded metadata pages","","Return the <code>Plan</code> instance that this allocator instance is â€¦","Return the <code>Space</code> instance associated with this allocator â€¦","Return the <code>VMThread</code> associated with this allocator â€¦","Immix allocator","Large object allocator","Limit for bump pointer","An alloactor backed by malloc","Mark compact allocator (actually a bump pointer allocator â€¦","Functions to ensure an object reference for an allocation â€¦","<code>Plan</code> instance that this allocator instance is associated â€¦","<code>Plan</code> instance that this allocator instance is associated â€¦","<code>Plan</code> instance that this allocator instance is associated â€¦","<code>Space</code> instance associated with this allocator instance.","<code>Space</code> instance associated with this allocator instance.","<code>Space</code> instance associated with this allocator instance.","<code>VMThread</code> associated with this allocator instance","<code>VMThread</code> associated with this allocator instance","<code>VMThread</code> associated with this allocator instance","","","","","","A list of errors that MMTk can encounter during allocation.","A trait which implements allocation routines. Every â€¦","The specified heap size is too small for the given program â€¦","The OS is unable to mmap or acquire more memory. Critical â€¦","","","An allocation attempt. The implementation of this function â€¦","Slowpath allocation attempt. This function is explicitly â€¦","Slowpath allocation attempt. This function is explicitly â€¦","Slowpath allocation attempt. This function executes the â€¦","Slowpath allocation attempt. This function executes the â€¦","Single slow path allocation attempt. This is called by â€¦","Single slowpath allocation attempt for stress test. When â€¦","Single slowpath allocation attempt for stress test. When â€¦","","","","","","","Return if this allocator can do thread local allocation. â€¦","Returns a boxed object from a boxed trait object if the â€¦","Returns a mutable reference to the object within the trait â€¦","Returns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the â€¦","Returns a reference to the object within the trait object â€¦","","","","","","Return the <code>Plan</code> instance that this allocator instance is â€¦","Return the <code>Space</code> instance associated with this allocator â€¦","Return at which granularity the allocator acquires memory â€¦","Return at which granularity the allocator acquires memory â€¦","Return the <code>VMThread</code> associated with this allocator â€¦","","","","","","Returns true if the trait object wraps an object of type â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Slow path for allocation if precise stress testing has â€¦","","","","","Current cursor for bump pointer","","","","","","","","","","","","","","","Limit for bump pointer","","<code>Plan</code> instance that this allocator instance is associated â€¦","","","","<code>Space</code> instance associated with this allocator instance.","<code>VMThread</code> associated with this allocator instance","","","","","","","","","","","Immix allocator","","Get a recyclable block from ImmixSpace.","Search for recyclable lines.","","Bump allocate small objects into recyclable lines (i.e. â€¦","Acquire a clean block from ImmixSpace for allocation.","This is called when precise stress is used. We try use the â€¦","","","","","Is this a copy allocator?","Bump pointer","","","","","","","","","","<em>unused</em>","","","","","","","Bump pointer for large objects","Limit for bump pointer for large objects","Limit for bump pointer","Hole-searching cursor","","Large-object (larger than a line) bump allocation.","<code>Plan</code> instance that this allocator instance is associated â€¦","Is the current request for large or small?","Return whether the TLAB has been exhausted and we need to â€¦","","Restore the real limits for the bump allocation so we can â€¦","Set fake limits for the bump allocation for stress tests. â€¦","<code>Space</code> instance associated with this allocator instance.","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Plan</code> instance that this allocator instance is associated â€¦","<code>Space</code> instance associated with this allocator instance.","<code>VMThread</code> associated with this allocator instance","","","","","","","","","","","","","","","","","","","","","","","","","<code>Plan</code> instance that this allocator instance is associated â€¦","<code>Space</code> instance associated with this allocator instance.","<code>VMThread</code> associated with this allocator instance","","","","","A thin wrapper(specific implementation) of bump allocator â€¦","","","Slow path for allocation if precise stress testing has â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","Adjust limit for thread local buffer to make sure that we â€¦","Assert that the object reference should always inside the â€¦","Check if the object reference for this allocation may â€¦","","An alloc-bit is required per min-object-size aligned â€¦","","","","Safety","","","","","Safety","","","This trait exposes hooks for developers to implement their â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Simple analysis routine that counts the number of â€¦","","","","","","","","","","","","","","","","","","","","","","Simple analysis routine that counts the number of objects â€¦","","","","","","","","","","","","","","","","","","","","","","This file implements an analysis routine that counts the â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Modes.","Lazy sweeping - controlled from here because â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert size in bytes to a readable short string, such as â€¦","","Convert size in bytes to the number of pages (aligned up)","","","","","","","","","","","","","A configuration for GCWorkerCopyContext. Similar to â€¦","","CopySemantics describes the copying operation. It depends â€¦","","","Copy for non generational plans.","The thread local struct for each GC worker for copying. â€¦","","","","Copy in mature generation.","Copy in nursery generation.","Promote an object from nursery to mature spaces.","","Allocate for the object for GC copying.","","","","","","","","","","","","","","","","","","","","","The config for the plan","A reference to the plan constraints. GCWorkerCopyContext â€¦","Copy allocators for CopySpace","Mapping CopySemantics to the actual copying allocators â€¦","","","","","","","","","","","","","","","","","","","","","","Copy allocators for ImmixSpace","","","","","","","","","","","","","","","","","","","","","","","Create a GCWorkerCopyContext based on the configuration â€¦","Create a stub GCWorkerCopyContext for non copying plans.","Post allocation after allocating an object.","Prepare the copying allocators.","Release the copying allocators.","Mapping copying allocators with space","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Logs an edge. Panics if the edge was already logged.","","Reset the edge logger by clearing the hash-set of edges. â€¦","Whether we should check duplicate edges. This depends on â€¦","","","","","","","A special processor for Finalizable objects.","","","","","","","","","","","","","","","","Candidate objects that has finalizers with them","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Index into candidates to record where we are up to in the â€¦","Objects that can be finalized. They are actually dead, but â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Free a previously allocated contiguous lump of units","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The struct is used for page usage. Both page resource and â€¦","","","","","Inform of clearing some reserved pages. This is used when â€¦","Inform of successfully committing a certain number of â€¦","The committed pages. This should be incremented when we â€¦","","","","","","","","","","","","","","Inform of releasing a certain number of pages. The number â€¦","Inform of reserving a certain number of pages. Usually â€¦","Inform of both reserving and committing a certain number â€¦","The reserved pages. This should be incremented when we are â€¦","Set both reserved and committed pages to zero. This is â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of pages to reserve at the start of every â€¦","Protect the memory","Unprotect the memory","","","","Protect memory on release, and unprotect on re-allocate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Maximum number of slabs, which determines the maximum â€¦","","","Parameters for the slab table.  The hash function requires â€¦","","","","","","","","","","","","@param slab Address of the slab @param addr Address within â€¦","","Take a free slab of chunks from the freeSlabs array, and â€¦","","","","","","","","","","","","","","","","","","","Return {@code true} if the given address has been mmapped","","","","","","","","@param addr an address @return the base address of the â€¦","@param addr an address @return the base address of the â€¦","","","","","","","","","","log_2 of the maximum number of spaces a Plan can support.","In a 64-bit addressing model, each space is the same size, â€¦","Maximum number of spaces a Plan can support.","","","","","","","","","","","Return the total number of chunks available (unassigned) â€¦","Return the total number of clients contending for chunks. â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","","","The mmap state of a mmap chunk.","The chunk is mapped by MMTk and is in use.","Generic mmap and protection functionality","The chunk is mapped and is also protected by MMTk.","The chunk is reserved for future use. MMTk reserved the â€¦","The chunk is unmapped and not managed by MMTk.","","","","","","","","","","Given an address array describing the regions of virtual â€¦","Ensure that a range of pages is mmapped (or equivalent).  â€¦","","","","","","","","","Is the page pointed to by this address mapped? Returns â€¦","Mark a number of pages as mapped, without making any â€¦","Mark a number of pages as inaccessible.","Quarantine/reserve address range. We mmap from the OS with â€¦","","Check the current MapState of the chunk, and transition â€¦","Check the current MapState of the chunk, and transition â€¦","Check the current MapState of the chunk, and transition â€¦","","","","Size of the address space available to the MMTk heap. ","Highest virtual address available for MMTk to manage.  The â€¦","Lowest virtual address available for MMTk to manage.  The â€¦","Coarsest unit of address space allocation. ","","","","log_2 of the addressable virtual space.","log_2 of the coarsest unit of address space allocation.","log_2 of the maximum number of chunks we need to track.  â€¦","Granularity at which we map and unmap virtual address â€¦","log_2 of the number of pages in a 64-bit space ","An upper bound on the extent of any space in the current â€¦","Maximum number of chunks we need to track.  Only used in â€¦","An upper bound on the extent of any space in the current â€¦","","Coarsest unit of address space allocation, in pages ","The number of pages in a 64-bit space ","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Base address of the current chunk of addresses ","Get highwater mark of current monotone space.","Pointer to the next block to be allocated. ","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of pages to reserve at the start of every â€¦","","","","","","","Safety","","The limit of the currently allocated address space. ","","","","","","","","","","","","Current frontier of zeroing, in a separate zeroing thread ","Current limit of zeroing.  If zeroingCursor &lt; â€¦","","","","","","","","","","","","","","","","","","","","","Commit pages to the page budget.  This is called after â€¦","","","","","","","","","","","","","","","","","","Return the number of available physical pages by this â€¦","","Allocate pages from this resource. Simply bump the cursor, â€¦","Extend the virtual memory associated with a particular â€¦","","","","","","","","","","","","","","","","","","","","","","Release one or more contiguous chunks associated with a â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The region size (in bytes) of the <code>ALLOC_BIT</code> side metadata. â€¦","","","","Default object size as ObjectModel::get_current_size()","","Describe object size for linear scan. Different policies â€¦","Iterate over an address range, and find each object by â€¦","Region represents a memory region with a properly aligned â€¦","","","Align the address to the region.","","","","","","","","","","","","","Return the region that contains the object (by its cell â€¦","","","","","","","","","","","","Return the end address of the region. Note that the end â€¦","","","","","","","","","","","","","","","","","","","","","","","Check if an address is aligned to the region.","Create an iterator for the address range. The caller must â€¦","","","Return the next region after this one.","","Return the next nth region after this one.","","","Return the start address of the region.","","","","","","","","","","","Attempt to init a env_logger for MMTk.","","","","","","Malloc provided by libraries","","Using malloc as mark sweep free-list allocator","","","If no malloc lib is specified, use the libc implementation","","","","","","","Allocate with alignment. This also guarantees the memory â€¦","","allocate <code>size</code> bytes, which is aligned to <code>align</code> at <code>offset</code> â€¦","","get malloc usable size of an address is_offset_malloc: â€¦","free an address that is allocated with some offset","","Demand-zero mmap: This function mmaps the memory and â€¦","Demand-zero mmap (no replace): This function mmaps the â€¦","Get the memory maps for the process. The returned string â€¦","Properly handle errors from a mmap Result, including â€¦","","mmap with no swap space reserve: This function does not â€¦","","","","Checks if the memory has already been mapped. If not, we â€¦","","","","","This struct stores the specification of a metadata bit-set.","","A function to atomically compare-and-exchange the â€¦","A function to atomically perform an add operation on the â€¦","A function to atomically perform a subtract operation on â€¦","","","A function to load the specified metadataâ€™s content.","","","A function to store a value to the specified metadata.","","","","This struct stores the specification of a metadata bit-set.","","","","","","","","A function to atomically compare-and-exchange the â€¦","","","","Given a slice of metadata specifications, returns a vector â€¦","Extract SideMetadataSpec from a MetadataSpec. Panics if â€¦","A function to atomically perform an add operation on the â€¦","A function to atomically perform a subtract operation on â€¦","","","","","","","","","A function to load the specified metadataâ€™s content.","A function to store a value to the specified metadata.","","","","","","","","","This module provides a default implementation of the â€¦","","","","","","","","","","This function provides a default implementation for the â€¦","","","","","This function provides a default implementation for the â€¦","This function provides a default implementation for the â€¦","","","","","","","","","This function provides a default implementation for the â€¦","","","This function provides a default implementation for the â€¦","","","","","","","The base address for the global side metadata space â€¦","The base offset for the global side metadata available to â€¦","The base address for the local side metadata space â€¦","","A byte array in side-metadata","This struct stores all the side metadata specs for a â€¦","A union of Address or relative offset (usize) used to â€¦","This struct includes a hashmap to store the metadata specs â€¦","This struct stores the specification of a side metadata â€¦","","Bulk-zero a specific metadata for a chunk.","","","","","","","","","","","","Non-atomic load of metadata.","","","Number of bytes of the region. E.g. 3 = 8 bytes, 12 = 4096 â€¦","Number of bits needed per region. E.g. 0 = 1 bit, 1 = 2 â€¦","","","","","","","","","","Non-atomic store of metadata.","","","","","The base address for the global side metadata space â€¦","The base offset for the global side metadata available to â€¦","","","The base address for the local side metadata space â€¦","","","","A byte array in side-metadata","This struct stores all the side metadata specs for a â€¦","A union of Address or relative offset (usize) used to â€¦","This struct stores the specification of a side metadata â€¦","","","","","","","","","","","","","","","","","","","Bulk-zero a specific metadata for a chunk.","Return the pages reserved for side metadata based on the â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a byte from the metadata byte array at the given index.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Is offset for this spec Address? (contiguous side metadata â€¦","","If offset for this spec relative? (chunked side metadata â€¦","Get an offset after a spec. This is used to layout another â€¦","Get the length of the array.","Non-atomic load of metadata.","","","Number of bytes of the region. E.g. 3 = 8 bytes, 12 = 4096 â€¦","Number of bits needed per region. E.g. 0 = 1 bit, 1 = 2 â€¦","The internal function to mmap metadata","","","Get a piece of metadata address range as a byte array.","","","","","","","Non-atomic store of metadata.","","","","","","","","","","","","Tries to map the required metadata address range, without â€¦","Tries to map the required metadata space and returns <code>true</code> â€¦","","","","","The upper bound address for metadata address computed for â€¦","Return the upperbound offset for the side metadata. The â€¦","","Performs address translation in contiguous metadata spaces â€¦","Performs the translation of data address (<code>data_addr</code>) to â€¦","","","","Tries to mmap the metadata space (<code>spec</code>) for the specified â€¦","","This is a two-level hashmap to store the metadata content â€¦","An internal str used as a name for global side metadata â€¦","An internal enum to enhance code style for add/sub","","This struct includes a hashmap to store the metadata specs â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A helper function encapsulating the common parts of â€¦","","","","","","","","","Returns all global or policy-specific specs based-on the â€¦","","","","","","","","","","","","","","","","","","","","","Creates a new SideMetadataSanity instance.","","","","","","","","","","","","","","Commits a fetch and add operation and ensures it returns â€¦","Commits a side metadata bulk zero operation. Panics if the â€¦","Checks whether a slice of global specifications fit within â€¦","Checks whether the input global specifications fit within â€¦","Ensures a side metadata load operation returns the correct â€¦","Verifies that all local side metadata specs: 1 - are not â€¦","(For 64-bits targets) Checks whether the input local â€¦","This verifies two things:","An internal method to ensure that a metadata context does â€¦","(For contiguous metadata) Checks whether two input â€¦","Commits a side metadata store operation. Panics if: 1 - â€¦","Commits a fetch and sub operation and ensures it returns â€¦","","","","","","","","","","","","","","","","","","Attempt to become the worker thread who will forward the â€¦","Zero the forwarding bits of an object. This function is â€¦","","(This function is only used internal to the <code>util</code> module)","Return the forwarding bits for a given <code>ObjectReference</code>.","","","","Read the forwarding pointer of an object. This function is â€¦","Spin-wait for the objectâ€™s forwarding to become complete â€¦","","","Write the forwarding pointer of an object. This function â€¦","","","","","","","","A VMMutatorThread is a VMThread that associates with a â€¦","A VMThread is an opaque pointer that can uniquely identify â€¦","A VMWorkerThread is a VMThread that is associates with a â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Bounded nursery has different upper and lower bounds. â€¦","","The default max nursery size. This does not affect the â€¦","The default min nursery size. This does not affect the â€¦","A Fixed nursery has the same upper and lower bounds. The â€¦","","","","An MMTk option of a given type. This type allows us to â€¦","","","The default nursery space size.","","","Different nursery types.","An option that provides a min/max interface to MMTk and a â€¦","","","","MMTk option for perf events","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Can we set this option through command line options/API?","Can we set this option through env vars?","","","","","","","Return upper bound of the nursery size (in number of bytes)","Return lower bound of the nursery size (in number of bytes)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The nursery type","Maximum nursery size (in bytes)","Minimum nursery size (in bytes)","","Create a new MMTKOption","","","","","","","Returns a NurserySize or String containing error. Expects â€¦","","","","","Set the option to the given value. Returns true if the â€¦","Bulk process options. Returns true if all the options are â€¦","Set an option from command line","Set an option from env var","Set an option and run its validator for its value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The validator to ensure the value is valid.","The actual value for the option","","","","log2 of the number of bytes used by a free list entry (two â€¦","log2 of the number of bytes used by a free list unit ","log2 of the number of bits used by a free list entry (two â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","We create a reference processor for each semantics. â€¦","","Holds all reference processors for each weak reference â€¦","","","","","","Add a candidate.","","","","","Is it allowed to add candidate to this reference â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inform the binding to enqueue the weak references whose â€¦","This will invoke enqueue for each reference processor, â€¦","References whose referents are cleared during this GC. We â€¦","","","Forward the reference tables in the reference processor. â€¦","A separate reference forwarding step. Normally when we â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Index into the references table for the start of nursery â€¦","","Process a reference.","The table of reference objects for the current semantics. â€¦","Retain referent in the reference table. This method deals â€¦","Scan the reference table, and update each â€¦","Scan phantom references.","Scan soft references.","Scan weak references.","The semantics for the reference processor","","Most of the reference processor is protected by a mutex.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","InitializeOnce creates an uninitialized value that needs â€¦","","","","","","","","","","","Get the value. This should only be used after â€¦","","Initialize the value. This should be called before ever â€¦","","","","","","Const function for min value of two usize numbers.","","This is used to guarantee <code>init_fn</code> is only called once.","","","","","","","","","","","","","","","Cache a list of root edges to the sanity checker.","","","","","","","","","","","","","","","","","","","","","","Reset roots cache at the end of the sanity gc.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Visited objects","Cached root edges for sanity root scanning","","","","","","","","","","","","","","","","","","","An abstraction over how a specific Diffable value is â€¦","An abstraction over some changing values that we want to â€¦","","The type of each reading","","","","","Read the current value","","","","Compute the difference between two readings","","","","","Get the total count over past phases","Whether the counter starts implicitly after creation","","","","","","","Whether the counter merges other and stw phases.","Get the name of the counter","Signal a change in GC phase.","Print the counter value for a particular phase","Print the difference in a specific format","","Print the count of the last phases","Print the maximum count of the past phases","Print the minimum count of the past phases","Print the total count over past phases","","Start the counter","Start the Diffable","nop for the wall-clock time","Stop the counter","Stop the Diffable","nop for the wall-clock time","","","","This file implements a simple event counter (counting â€¦","","","","","","","","","","","","","","Increment the event counter","Increment the event counter by provided value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Increment the event counter by provided value","","","","","","","Print current (mid-phase) units","Print (mid-phase) volume","Print units","Print volume","Start this counter","Stop this counter","","","","","","","","GC stats shared among counters","GC statistics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A value to fill in alignment gaps. This value can be used â€¦","This value is used to assert if the cursor is reasonable â€¦","VM-specific methods for the current plan.","VM-specific methods for garbage collection.","","Callback trait of scanning functions that report edges.","A finalizable object for MMTk. MMTk needs to know the â€¦","The type of finalizable objects. This type is used when â€¦","Thread context for the spawned GC thread.  It is used by â€¦","Allowed minimal alignment.","Allowed maximum alignment in bytes.","Allowed maximum alignment as shift by min alignment.    ","Allowed minimal alignment in bytes.","VM-specific methods for object model.","Callback trait of scanning functions that directly trace â€¦","VM-specific methods for reference processing, including â€¦","Root-scanning methods use this trait to create work â€¦","VM-specific methods for scanning roots/objects.","","The <code>VMBinding</code> trait associates with each trait, and â€¦","","The type of edges in this VM.","","","","","","","","","","","Block the current thread for GC. This is called when an â€¦","","A function to atomically compare-and-exchange the â€¦","Copy an object and return the address of the new object. â€¦","Copy an object. This is required for delayed-copy â€¦","Create work packets to handle root edges.","Create work packets to handle nodes pointed by root edges.","Dump debugging information for an object.","","For weak reference types, if the referent is cleared â€¦","A function to atomically perform an add operation on the â€¦","A function to atomically perform a subtract operation on â€¦","Return the alignment offset when an object is copied.","Return the alignment when an object is copied.","Return the size used by an object.","Return the next mutator if there is any. This method â€¦","Load the object reference.","Return the reference that an object will be referred to â€¦","Get the referent from a weak reference object.","Return the size when an object is copied.","Get the type descriptor for an object.","Return a reference to the current plan.","Return whether there is a mutator created and associated â€¦","Keep the heap references in the finalizable object alive. â€¦","A function to load the specified per-object metadataâ€™s â€¦","Return a <code>Mutator</code> reference for the thread.","MMTk calls this method at the first time during a â€¦","Return the total count of mutators.","","Return the lowest address of the storage associated with â€¦","","Allow VM-specific behaviors for a mutator after all the â€¦","Return an address guaranteed to be inside the storage â€¦","","Reset the mutator iterator so that <code>get_next_mutator()</code> â€¦","Resume all the mutator threads, the opposite of the above. â€¦","Delegated scanning of a object, visiting each reference â€¦","Scan one mutator for roots.","Scan all the mutators for roots.","Scan VM-specific roots. The creation of all root scan â€¦","","Store the object reference.","Set the referent in a weak reference object.","Ask the VM to spawn a GC thread for MMTk. A GC thread may â€¦","Stop all the mutator threads. MMTk calls this method when â€¦","A function to store a value to the specified per-object â€¦","Return whether the VM supports return barriers. This is â€¦","Call this function for the content of each edge, and â€¦","Call this function for each edge.","","","VM-specific methods for the current plan.","","","","","","","","","","","Return the next mutator if there is any. This method â€¦","Return a reference to the current plan.","","","","","","","Return whether there is a mutator created and associated â€¦","Return a <code>Mutator</code> reference for the thread.","A utility method to provide a thread-safe mutator iterator â€¦","A utility method to provide a thread-safe mutator iterator â€¦","","Return the total count of mutators.","","Reset the mutator iterator so that <code>get_next_mutator()</code> â€¦","","","","","The fallback for object tracing. MMTk generally expects to â€¦","The fallback for object tracing. MMTk generally expects to â€¦","If true, only the coordinator thread can call â€¦","If true, only the coordinator thread can call â€¦","VM-specific methods for garbage collection.","","Thread context for the spawned GC thread.  It is used by â€¦","","","","Block the current thread for GC. This is called when an â€¦","","","","","","","","","","","Inform the VM of an out-of-memory error. The binding â€¦","Inform the VM of an out-of-memory error. The binding â€¦","Allow VM-specific behaviors for a mutator after all the â€¦","Delegate to the VM binding for reference processing.","Delegate to the VM binding for reference processing.","Resume all the mutator threads, the opposite of the above. â€¦","Inform the VM to schedule finalization threads.","Inform the VM to schedule finalization threads.","Ask the VM to spawn a GC thread for MMTk. A GC thread may â€¦","Stop all the mutator threads. MMTk calls this method when â€¦","","","","Inform the VM to do its VM-specific release work at the â€¦","Inform the VM to do its VM-specific release work at the â€¦","","","An abstract edge.  An edge holds an object reference.  â€¦","A simple edge implementation that represents a word-sized â€¦","Get the address of the edge.","","","","","","","","","","","","","Create a simple edge from an address.","","","","","","","Load object reference from the edge.","","","Prefetch the edge so that a subsequent <code>load</code> will be faster.","Prefetch the edge so that a subsequent <code>store</code> will be â€¦","","Store the object reference <code>object</code> into the edge.","","","","","","The metadata specification of the global log bit. 1 bit. â€¦","The metadata specification of the global log bit. 1 bit. â€¦","The metadata specification for the forwarding status bits, â€¦","The metadata specification for the forwarding status bits, â€¦","The metadata specification for the forwarding pointer, â€¦","The metadata specification for the forwarding pointer, â€¦","The metadata specification for the mark-and-nursery bits, â€¦","The metadata specification for the mark-and-nursery bits, â€¦","The metadata specification for the mark bit, used by most â€¦","The metadata specification for the mark bit, used by most â€¦","For our allocation result <code>[cell, cell + bytes)</code>, if a â€¦","For our allocation result <code>[cell, cell + bytes)</code>, if a â€¦","VM-specific methods for object model.","This is the worst case expansion that can occur due to â€¦","This is the worst case expansion that can occur due to â€¦","A function to atomically compare-and-exchange the â€¦","Copy an object and return the address of the new object. â€¦","Copy an object. This is required for delayed-copy â€¦","Dump debugging information for an object.","A function to atomically perform an add operation on the â€¦","A function to atomically perform a subtract operation on â€¦","Return the alignment offset when an object is copied.","Return the alignment when an object is copied.","Return the size used by an object.","Return the reference that an object will be referred to â€¦","Return the size when an object is copied.","Get the type descriptor for an object.","A function to load the specified per-object metadataâ€™s â€¦","Return the lowest address of the storage associated with â€¦","Return an address guaranteed to be inside the storage â€¦","","A function to store a value to the specified per-object â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mark the log bit as unlogged (1 means unlogged)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A finalizable object for MMTk. MMTk needs to know the â€¦","The type of finalizable objects. This type is used when â€¦","VM-specific methods for reference processing, including â€¦","Weak and soft references always clear the referent before â€¦","Weak and soft references always clear the referent before â€¦","For weak reference types, if the referent is cleared â€¦","Load the object reference.","Get the referent from a weak reference object.","Keep the heap references in the finalizable object alive. â€¦","Store the object reference.","Set the referent in a weak reference object.","Callback trait of scanning functions that report edges.","Callback trait of scanning functions that directly trace â€¦","Root-scanning methods use this trait to create work â€¦","Scan stack roots after all mutators are paused.","Scan stack roots after all mutators are paused.","Scan all the mutators within a single work packet.","Scan all the mutators within a single work packet.","VM-specific methods for scanning roots/objects.","Create work packets to handle root edges.","Create work packets to handle nodes pointed by root edges.","MMTk calls this method at the first time during a â€¦","","Delegated scanning of a object, visiting each reference â€¦","Delegated scanning of a object, visiting each reference â€¦","Delegated scanning of a object, visiting each reference â€¦","Scan one mutator for roots.","Scan all the mutators for roots.","Scan VM-specific roots. The creation of all root scan â€¦","Return true if the given object supports edge enqueuing.","Return true if the given object supports edge enqueuing.","Return whether the VM supports return barriers. This is â€¦","Call this function for the content of each edge, and â€¦","Call this function for each edge."],"i":[0,0,1,1,1,1,1,0,0,0,0,2,2,0,0,0,1,3,4,5,3,6,5,6,4,0,4,6,4,7,8,7,4,4,5,4,7,0,0,6,9,7,0,7,6,0,5,3,4,5,7,3,4,5,7,4,0,7,0,0,0,0,0,0,0,0,10,11,12,13,10,11,12,13,10,11,12,13,10,11,12,13,10,11,12,13,10,10,11,11,12,12,13,13,10,11,12,13,10,11,12,13,10,11,12,13,10,11,12,13,10,11,12,13,10,11,12,13,10,11,12,13,10,11,12,13,0,10,11,12,13,10,11,12,13,10,11,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,15,9,7,14,15,9,7,14,15,9,7,14,15,9,7,14,15,9,9,9,7,14,14,15,15,9,7,14,15,9,7,14,15,7,7,9,7,14,15,7,7,7,7,9,7,14,15,7,9,7,14,15,9,7,14,15,9,14,15,9,7,14,15,9,7,9,7,7,7,7,7,9,9,9,7,14,15,9,7,14,15,9,7,14,15,0,0,0,0,1,0,1,0,0,1,1,1,0,0,0,0,0,2,16,2,0,0,0,0,0,1,0,16,4,0,5,6,5,6,17,0,4,18,4,6,4,8,19,17,17,0,17,0,4,4,5,4,0,0,0,0,17,17,17,17,0,6,17,17,17,17,20,0,17,0,6,0,5,19,19,4,5,4,5,4,0,0,18,21,22,0,0,0,0,2,16,2,0,16,16,23,24,2,16,23,24,2,24,24,16,23,24,2,16,23,24,2,2,2,16,23,24,2,16,23,24,2,16,23,24,2,24,2,2,19,23,24,2,16,23,24,2,16,23,24,2,16,23,24,2,16,23,24,2,16,23,24,2,16,23,24,2,24,24,24,24,24,19,23,24,19,23,24,2,16,23,24,2,16,23,24,2,16,23,24,2,21,22,0,0,25,26,25,26,25,26,25,26,26,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,26,26,26,25,26,26,25,26,25,26,25,26,26,0,0,0,0,0,27,27,27,27,27,0,0,27,27,27,27,27,0,0,0,27,27,27,27,27,0,27,27,27,0,0,0,28,29,0,0,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,29,0,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,0,0,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,0,0,33,34,0,0,33,34,33,34,33,34,33,34,33,34,33,34,33,34,33,34,33,34,33,34,33,34,33,34,33,34,33,34,33,34,33,34,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,0,0,0,0,1,0,1,36,36,0,1,1,1,36,0,0,1,4,37,37,37,36,37,38,1,36,37,38,1,4,38,36,37,38,1,36,37,38,1,1,1,37,37,4,37,4,4,4,4,4,4,4,0,0,0,0,37,37,36,37,38,1,36,37,38,1,37,4,4,4,4,36,37,38,1,37,4,4,4,36,1,1,4,4,4,36,37,38,1,1,37,37,37,37,4,4,4,4,4,4,4,4,4,4,4,4,4,38,38,37,4,4,4,4,4,4,4,37,38,4,4,4,4,37,38,4,4,4,37,37,38,37,37,37,36,37,38,1,37,37,37,36,37,38,1,36,37,38,1,36,37,38,1,36,37,38,1,1,4,4,4,4,4,4,4,4,4,4,4,4,4,37,37,37,37,4,4,4,4,4,4,37,37,4,4,4,4,4,4,38,37,37,39,37,38,4,4,4,37,4,4,4,37,37,38,4,4,4,37,4,4,4,39,37,38,4,37,38,37,4,4,4,4,37,38,37,37,37,4,37,37,37,4,4,4,37,38,37,37,1,39,37,37,38,38,37,37,36,37,38,1,36,37,38,1,36,37,38,1,37,37,38,37,37,0,0,0,40,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,0,42,42,42,42,42,0,42,42,42,42,42,0,0,42,42,42,42,42,42,42,42,0,0,0,43,0,0,0,0,0,0,44,45,46,43,44,45,46,43,44,45,46,43,44,45,46,43,44,45,46,43,44,45,46,43,44,45,46,44,45,46,43,44,45,46,43,44,45,46,43,44,45,46,43,44,45,46,43,44,45,46,43,44,45,46,43,44,46,44,45,46,45,44,45,46,43,44,45,46,43,44,45,46,43,0,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,0,48,48,48,48,48,0,48,48,48,48,48,48,48,48,48,48,0,0,48,48,48,0,0,0,49,0,0,0,50,51,49,50,51,49,50,51,49,50,51,49,50,50,51,49,50,51,49,50,51,50,51,49,50,51,49,50,51,49,50,51,49,50,51,49,50,51,49,50,51,49,50,51,51,50,51,49,50,51,49,50,51,49,0,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,0,53,53,53,53,53,0,53,53,53,53,53,53,53,53,53,53,0,0,53,53,53,54,0,0,0,0,0,5,6,55,6,55,6,54,55,6,54,5,6,6,55,6,54,55,6,54,6,0,0,54,55,6,54,55,6,54,55,6,54,5,5,5,5,5,5,55,55,6,54,5,6,55,6,54,55,6,54,55,6,54,55,6,54,55,6,54,6,54,54,54,54,54,6,5,6,5,6,55,5,6,55,55,55,6,54,55,6,54,55,6,54,54,0,0,0,0,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,0,0,0,57,58,57,58,57,58,57,58,57,58,0,57,57,58,58,57,58,57,58,57,58,57,58,57,58,57,58,57,58,57,58,0,57,58,57,58,57,58,0,0,0,59,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,0,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,0,0,61,61,61,61,61,0,61,61,61,61,61,61,61,61,61,61,0,0,61,61,61,0,0,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,62,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,0,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,0,64,64,64,64,64,0,64,64,64,64,64,64,64,64,64,64,0,0,64,64,64,20,0,0,0,20,18,20,18,20,18,20,18,18,20,20,18,20,18,20,18,18,8,20,18,20,18,20,18,20,18,20,18,20,20,18,20,20,20,18,20,20,20,18,20,18,20,18,18,18,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,0,0,0,65,66,65,66,65,66,66,66,65,66,65,66,66,65,66,65,66,65,66,65,66,65,66,66,66,66,65,66,66,66,65,66,65,66,65,66,65,66,66,66,66,66,66,66,65,66,66,65,66,65,66,65,66,66,66,66,66,66,66,65,66,65,66,65,66,0,0,0,67,67,67,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,68,68,68,68,68,69,68,69,69,69,68,69,69,69,69,68,70,69,68,70,69,68,70,69,68,70,68,69,68,69,68,70,68,69,68,70,69,68,70,69,68,70,68,69,68,69,68,69,69,68,68,70,70,68,68,69,68,68,70,69,68,70,69,68,70,69,68,70,69,68,70,68,69,70,68,68,69,68,68,70,70,70,70,68,68,68,68,68,69,68,69,68,70,69,68,70,69,68,70,71,72,73,74,72,0,0,0,74,72,0,72,73,73,75,72,74,73,75,72,74,72,73,75,72,74,73,75,72,74,75,73,72,74,72,74,73,73,75,72,74,73,75,72,74,75,73,75,72,74,72,74,72,74,73,75,72,72,74,73,73,73,73,75,72,74,73,75,72,74,73,75,72,74,73,75,72,74,73,75,72,74,72,73,72,73,75,72,72,74,73,75,72,74,73,75,72,74,73,75,72,74,76,76,76,0,0,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,0,0,77,0,0,0,77,78,77,79,78,77,79,78,77,77,77,77,79,78,77,79,78,79,77,77,77,78,77,77,78,77,79,77,79,78,77,79,78,79,77,79,78,77,77,79,78,77,77,77,77,78,77,77,79,78,77,77,77,79,78,77,79,78,77,79,78,77,79,78,77,77,77,77,77,77,77,77,77,77,77,77,77,78,78,77,77,77,78,77,78,77,77,79,77,77,77,77,77,77,79,77,77,77,77,77,79,78,77,79,78,77,79,78,80,0,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,0,0,0,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,0,0,0,0,0,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,0,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,0,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,0,0,84,0,0,0,85,85,85,85,85,84,85,84,85,85,85,84,85,84,85,85,85,85,85,85,85,84,85,84,85,84,85,85,85,84,85,85,85,85,85,84,85,85,85,84,85,84,85,84,85,84,85,85,85,85,85,85,85,85,85,85,85,85,85,85,84,85,85,85,85,85,85,85,85,84,85,84,85,84,85,85,0,0,0,0,0,0,86,87,88,86,87,88,86,87,88,86,87,88,86,87,88,86,86,87,87,88,88,86,87,88,86,87,88,86,87,88,0,86,87,88,86,87,88,86,87,88,86,87,88,86,87,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,87,88,86,87,88,86,87,88,0,0,0,0,0,0,89,0,0,0,90,0,0,0,0,90,89,90,89,90,90,90,89,90,89,90,90,90,90,90,90,89,90,89,90,89,90,89,90,90,90,90,90,89,90,90,90,89,90,89,90,89,90,89,90,90,90,90,90,90,90,90,90,90,90,90,89,90,90,90,90,90,90,90,90,89,90,89,90,89,91,91,0,0,0,0,0,0,0,0,0,0,92,93,92,94,93,95,91,96,94,93,95,91,96,92,92,94,92,94,93,95,91,96,94,93,95,91,96,94,94,92,93,93,94,93,95,91,96,94,93,95,91,96,93,92,92,92,92,94,93,95,91,96,92,93,96,94,93,95,91,96,94,97,0,92,92,92,93,93,95,92,94,93,95,91,96,97,96,92,93,94,93,95,91,96,94,93,95,91,96,94,93,95,91,96,94,93,95,91,96,91,92,94,97,96,97,96,97,94,96,97,96,97,97,96,94,93,93,93,95,94,97,96,93,95,93,95,94,93,91,93,94,0,92,0,92,94,92,94,97,96,95,93,94,94,93,95,91,96,94,93,95,91,96,94,93,95,91,96,94,92,93,93,93,95,93,95,98,99,99,99,0,99,99,99,0,0,0,99,99,0,99,99,100,0,99,99,99,100,99,0,0,101,102,100,103,0,102,102,102,101,100,102,101,101,0,102,101,102,102,0,102,100,0,0,0,0,0,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,98,104,105,106,107,100,100,108,0,0,100,100,0,0,0,0,0,0,0,0,0,0,0,0,100,100,0,0,0,100,0,0,0,0,0,100,0,109,110,111,112,113,98,114,115,116,117,118,119,120,121,122,104,123,105,106,107,109,110,111,112,113,98,114,115,116,117,118,119,120,121,122,104,123,105,106,107,115,119,109,110,111,112,113,98,114,115,116,117,118,119,120,121,122,104,123,105,106,107,109,110,111,112,113,98,114,115,116,117,118,119,120,121,122,104,123,105,106,107,117,120,100,100,116,116,117,120,116,116,100,115,119,121,122,104,123,105,106,107,109,110,111,112,113,98,114,115,115,116,117,118,119,119,120,121,122,104,123,105,106,107,109,110,111,112,113,98,114,115,115,116,117,118,119,119,120,121,122,104,123,105,106,107,109,110,111,112,113,98,117,118,120,121,122,104,123,105,106,107,108,109,110,111,112,113,98,114,115,116,117,118,119,120,121,122,104,123,105,106,107,114,100,100,109,110,111,112,113,98,114,115,116,117,118,119,120,121,122,104,123,105,106,107,109,110,111,112,113,98,114,115,116,117,118,119,120,121,122,104,123,105,106,107,109,110,111,112,113,98,114,115,116,117,118,119,120,121,122,104,123,105,106,107,109,110,111,112,113,98,114,115,116,117,118,119,120,121,122,104,123,105,106,107,109,110,111,112,113,116,117,118,119,120,121,122,104,123,105,106,107,109,110,111,112,113,98,114,115,116,117,118,119,120,121,122,104,123,105,106,107,108,117,120,118,114,114,116,118,111,113,100,110,111,112,113,114,115,116,117,118,119,120,104,105,106,107,114,117,118,120,114,110,112,119,120,114,108,117,120,100,100,119,100,100,108,117,120,114,117,120,114,100,100,116,100,115,119,109,110,111,112,113,98,114,115,116,117,118,119,120,121,122,104,123,105,106,107,109,110,111,112,113,98,114,115,116,117,118,119,120,121,122,104,123,105,106,107,109,110,111,112,113,98,114,115,116,117,118,119,120,121,122,104,123,105,106,107,114,114,0,124,0,124,125,125,125,125,124,125,124,125,124,125,124,125,125,125,125,125,124,125,124,125,124,125,125,124,125,124,125,124,125,124,125,125,124,125,125,125,125,125,125,125,125,125,125,125,125,125,125,124,125,124,125,124,125,125,125,125,125,126,0,0,0,127,128,127,129,128,127,129,128,127,129,128,127,129,127,127,129,128,127,129,128,127,129,128,127,129,127,127,128,128,127,129,129,128,127,129,128,127,129,128,127,129,128,128,127,129,127,127,129,128,127,129,128,127,129,128,127,129,128,128,127,129,127,129,127,129,129,0,0,0,130,130,130,103,103,103,0,99,99,99,99,99,99,0,99,99,99,99,99,99,99,99,0,0,131,131,131,131,131,132,131,99,132,131,99,132,131,99,132,131,99,131,131,131,99,99,131,132,131,99,132,131,99,132,131,99,99,99,99,132,131,99,99,131,132,131,99,132,131,99,132,131,99,132,99,132,131,99,99,131,131,132,131,131,132,131,131,131,131,131,132,132,132,131,131,132,99,132,131,99,132,131,99,132,131,99,131,0,0,0,0,133,134,133,134,134,133,134,133,134,133,134,135,133,134,133,133,134,133,134,133,134,133,134,133,134,136,134,136,134,133,134,133,134,133,134,133,134,133,134,133,133,133,133,133,136,134,134,134,136,134,134,136,134,133,134,133,133,134,133,134,133,134,0,0,102,0,0,102,102,137,138,102,137,138,102,137,138,102,137,138,102,137,138,138,102,137,138,102,137,138,102,137,138,102,102,138,102,137,138,102,137,102,137,137,138,102,137,138,102,137,138,102,137,138,137,138,102,137,102,102,102,102,138,102,137,102,137,137,102,102,102,102,102,102,137,138,138,102,138,102,137,138,102,137,138,102,137,137,137,137,0,0,0,0,0,0,0,0,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,141,0,0,0,140,141,0,140,140,140,140,140,140,140,140,140,141,140,141,140,140,140,140,140,140,140,140,141,140,141,140,140,141,140,141,140,140,140,141,140,141,140,141,140,141,140,140,140,140,141,141,141,141,140,140,140,140,141,140,140,140,140,140,141,140,141,140,141,140,141,140,141,140,141,140,141,140,141,140,141,141,140,141,141,141,141,140,141,140,140,140,140,141,140,141,140,141,140,140,140,140,140,140,140,140,140,141,140,140,140,141,140,140,141,140,141,140,141,140,141,141,140,0,0,0,0,142,143,142,142,0,142,0,142,0,143,142,144,144,0,0,145,0,146,144,0,0,144,144,144,0,0,146,0,0,0,146,147,148,146,147,148,146,147,148,149,150,151,152,153,0,0,143,143,0,0,144,144,144,144,144,144,144,144,143,143,143,143,143,143,144,144,144,144,144,143,0,143,143,0,144,144,144,144,144,143,143,143,143,143,144,143,143,143,0,0,142,142,142,0,0,0,0,0,142,142,142,154,142,154,142,154,142,154,142,154,142,142,142,154,142,154,142,154,142,142,142,154,142,154,154,154,154,142,154,142,154,142,154,142,154,142,154,154,154,142,154,142,154,142,154,142,154,142,149,150,151,152,153,0,0,0,0,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,0,0,0,0,0,0,0,0,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,0,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,0,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,145,0,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,157,156,158,156,158,156,158,156,158,156,158,156,158,156,158,156,158,158,156,158,156,0,157,156,158,156,156,158,156,158,156,158,156,158,156,156,0,0,156,157,158,156,158,156,158,156,0,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,0,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,0,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,0,161,161,161,161,161,161,161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,162,0,163,0,162,0,0,163,163,163,162,164,165,164,163,162,165,164,163,162,165,164,163,162,165,164,163,162,163,162,163,162,164,165,164,165,165,162,165,164,163,162,165,164,163,162,165,164,163,162,163,162,165,164,163,162,163,164,165,164,163,162,165,164,163,162,165,164,163,162,165,164,163,162,165,164,163,162,163,163,164,164,164,164,164,165,163,162,165,164,163,162,165,164,163,162,165,164,163,162,166,167,0,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,0,168,168,168,0,169,170,0,0,0,171,171,169,170,171,169,170,171,169,170,171,169,170,171,171,169,170,171,169,170,171,169,170,169,170,171,169,170,171,171,171,171,169,170,171,171,171,171,169,170,171,169,170,171,169,170,171,169,170,171,169,170,171,169,170,171,171,171,171,169,170,171,169,170,171,169,170,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,0,0,0,0,174,174,174,174,175,174,176,175,174,176,175,174,176,175,174,176,174,174,174,174,175,174,174,176,175,174,174,176,175,174,176,174,175,175,174,176,174,175,176,175,174,176,175,174,176,175,174,176,175,174,176,175,174,176,174,174,174,174,174,176,174,174,174,174,175,175,174,175,174,176,175,174,176,175,174,176,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,0,0,0,0,0,179,0,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,0,0,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,0,181,0,181,181,181,181,181,181,181,181,181,181,181,181,182,182,181,181,181,181,181,181,181,181,182,182,182,182,181,181,181,181,181,181,181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,183,183,0,0,0,184,184,184,184,185,183,184,185,183,184,185,183,184,185,183,184,184,184,185,185,184,185,184,185,183,184,185,183,184,185,183,184,185,183,184,184,184,184,185,183,184,185,183,184,185,183,184,185,183,184,185,183,184,184,184,184,184,184,184,184,184,184,185,184,184,185,183,184,185,183,184,185,183,186,186,186,0,0,0,0,187,188,188,189,190,187,189,190,187,189,190,187,189,190,187,188,188,188,188,188,188,187,189,190,187,189,190,187,189,190,187,189,190,187,188,187,188,187,187,187,189,190,187,189,190,187,189,190,187,189,190,187,189,190,187,187,189,189,187,187,188,188,188,189,188,189,190,187,189,190,187,189,190,187,188,188,187,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,192,192,192,192,0,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,193,194,195,193,193,194,195,0,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,0,0,197,198,0,198,0,0,0,0,199,198,199,197,200,199,197,200,199,197,200,199,197,200,198,200,199,199,197,200,199,197,200,199,197,200,198,199,200,199,197,200,199,197,200,199,197,200,199,197,200,199,197,200,199,197,200,199,200,198,199,200,199,198,200,198,201,197,198,199,199,197,200,199,197,200,199,197,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,0,202,0,0,0,0,0,0,0,0,0,203,204,202,0,202,202,202,202,202,202,202,0,202,202,202,0,202,0,0,202,202,202,202,202,202,202,202,0,0,202,202,202,202,203,204,0,0,0,0,0,205,205,205,205,205,205,205,0,205,205,205,205,0,0,205,205,205,205,205,205,205,205,0,205,205,0,205,205,205,205,0,0,0,0,0,0,0,0,0,0,0,206,0,0,0,207,0,0,0,0,208,207,0,209,0,0,208,209,209,0,209,209,206,0,0,207,0,210,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,206,206,208,207,209,206,208,207,209,206,208,207,209,206,208,207,209,206,0,208,209,206,209,206,0,207,208,207,209,206,208,207,209,206,208,207,209,206,0,209,206,0,0,209,208,207,209,206,207,209,208,209,208,209,206,207,208,207,209,206,208,207,209,206,208,207,209,206,208,207,209,206,208,207,209,206,209,209,209,206,207,0,0,208,209,209,208,209,209,207,208,209,206,206,208,207,0,0,209,206,208,207,209,206,208,207,209,206,208,208,208,207,209,206,209,209,0,0,0,0,0,0,0,211,0,0,0,0,0,211,212,213,211,210,212,213,211,210,212,213,211,210,212,213,211,210,212,213,210,211,210,212,212,213,213,211,210,212,213,0,211,210,212,213,211,210,212,213,210,211,210,212,213,211,210,212,213,211,210,212,213,211,210,212,213,211,210,212,213,210,210,211,210,212,213,211,210,212,213,211,210,212,213,0,0,0,0,0,210,0,0,210,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,215,216,217,0,214,215,0,0,0,214,215,216,217,214,215,216,217,214,215,216,217,214,215,216,217,214,215,216,217,214,215,216,217,214,214,215,216,217,214,215,216,217,214,215,216,217,214,215,216,217,214,215,216,217,214,215,216,217,214,214,215,216,217,214,215,216,217,214,215,216,217,214,215,216,217,214,215,216,217,214,214,215,216,217,214,215,216,217,214,215,216,217,214,215,216,217,214,215,216,217,218,219,218,0,0,219,220,220,220,0,220,220,0,220,218,0,0,0,0,220,0,0,220,218,0,221,218,220,222,223,219,224,221,218,220,222,223,219,224,221,218,220,222,223,219,224,221,218,220,222,223,219,224,221,218,220,222,223,219,224,221,218,220,222,223,219,224,221,221,218,220,222,223,223,219,224,221,218,220,222,223,219,224,221,218,220,222,223,219,224,221,221,222,222,218,220,222,219,224,218,220,222,223,219,224,221,223,223,218,220,222,219,224,221,221,221,221,221,218,220,222,223,219,224,221,218,220,222,223,219,224,221,218,220,222,223,219,224,221,218,220,222,223,219,224,221,218,220,222,223,219,224,221,224,224,224,222,223,224,221,221,221,221,0,224,222,221,221,221,223,221,221,221,221,221,221,218,220,222,223,219,224,221,218,218,220,220,222,223,219,219,224,221,218,220,222,223,219,224,221,218,220,222,223,219,224,221,221,221,223,223,221,221,221,0,0,0,0,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,226,227,228,229,230,0,231,0,0,0,0,0,0,231,0,0,231,0,232,233,233,233,232,232,233,232,234,231,226,227,228,229,230,233,232,234,231,226,227,228,229,230,233,232,234,231,226,227,228,229,230,233,232,234,231,226,227,228,229,230,233,226,227,228,229,230,233,232,234,231,226,227,228,229,230,233,232,234,231,226,227,228,229,230,232,226,227,228,229,230,233,232,234,231,226,227,228,229,230,232,233,234,231,231,232,233,233,232,234,231,226,227,228,229,230,233,232,232,233,232,234,231,226,227,228,229,230,233,232,234,231,226,227,228,229,230,233,232,234,231,226,227,228,229,230,233,232,234,231,226,227,228,229,230,233,232,234,231,226,227,228,229,230,232,233,232,226,227,228,229,230,234,233,232,234,232,232,233,233,233,232,233,232,233,232,234,231,226,227,228,229,230,233,232,234,231,226,227,228,229,230,233,232,234,231,226,227,228,229,230,233,0,235,235,235,235,0,235,235,235,235,235,235,235,235,235,235,235,235,0,0,235,235,235,235,235,0,235,0,0,0,0,0,0,0,0,236,237,237,236,238,239,240,237,236,238,239,240,240,237,236,238,239,240,237,236,238,239,240,237,240,237,237,236,238,239,240,240,237,236,238,239,240,240,236,238,239,237,236,238,239,240,237,236,238,239,240,237,236,238,239,240,237,236,238,239,240,237,236,238,239,240,237,236,238,239,237,236,238,239,240,237,236,238,239,240,238,239,237,237,240,237,236,238,239,240,237,236,238,239,240,237,236,238,239,240,0,0,0,0,0,241,242,242,242,242,241,242,242,242,241,242,242,0,242,243,243,242,242,242,242,242,0,243,243,243,243,241,242,243,243,243,243,0,243,241,242,243,241,242,242,242,242,0,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,0,0,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,0,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,0,0,0,0,247,248,247,248,247,248,247,248,248,247,248,247,248,247,248,248,248,247,248,247,248,247,248,247,248,247,247,248,247,248,247,248,247,248,247,248,248,248,248,248,247,248,248,247,248,248,248,248,248,248,247,248,247,248,247,248,0,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,0,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,250,251,252,253,254,255,255,0,0,256,0,0,257,0,255,255,255,255,0,0,0,0,0,255,0,255,255,0,0,0,0,0,255,255,255,256,0,258,0,259,259,259,260,260,259,0,257,259,259,259,259,259,261,262,259,257,259,259,261,261,262,259,261,263,261,0,259,263,258,259,0,261,258,263,263,263,263,0,262,257,258,258,259,263,264,265,266,267,0,0,268,268,268,268,268,268,268,268,268,261,261,268,268,268,268,268,268,261,261,261,261,268,261,268,261,268,268,268,268,261,261,258,258,0,256,0,256,256,256,258,256,256,256,256,256,256,256,256,256,256,258,258,258,258,258,258,258,258,258,258,256,256,256,258,258,266,267,0,0,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,270,269,269,270,270,269,270,269,269,269,269,269,259,259,259,259,259,259,259,259,259,259,259,259,0,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,0,259,250,251,252,253,254,250,251,252,253,254,250,251,252,253,254,0,0,0,0,0,250,251,252,253,254,250,251,252,253,254,250,251,252,253,254,250,251,252,253,254,250,251,252,253,254,0,250,250,251,251,252,252,253,253,254,254,250,251,252,253,254,250,251,252,253,254,250,251,252,253,254,250,251,252,253,254,250,251,252,253,254,250,251,252,253,254,250,251,252,253,254,250,251,252,253,254,250,251,252,253,254,250,250,251,252,253,254,250,251,252,253,254,250,251,252,253,254,250,251,252,253,254,250,251,252,253,254,250,251,252,253,254,0,257,0,257,257,257,262,257,262,262,257,0,0,0,263,263,263,263,0,260,260,263,263,263,263,263,263,263,263,263,263,263,264,265],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["usize",15],["isize",15],["allocationsemantics",4]],["address",3]],[[["objectreference",3],["usize",15],["usize",15],["isize",15]],["address",3]],null,[[],["barrier",8]],null,[[],["baseplan",3]],null,[[["bool",15],["option",4,[["space",8]]]],["bool",15]],null,[[],["planconstraints",3]],null,[[["objectreference",3]]],null,[[],["enummap",3]],[[],["vec",3,[["space",8]]]],[[],["vmmutatorthread",3]],[[],["usize",15]],null,null,null,null,null,null,null,null,null,null,[[["objectreference",3],["usize",15],["allocationsemantics",4]]],[[]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],null,[[]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],null,[[["gcworkscheduler",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["string",3]],[[]],[[["usize",15]]],[[],["string",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["mmtk",3]]],[[["mmtk",3],["objectreference",3]]],[[["mmtk",3],["objectreference",3]]],[[["mmtk",3],["objectreference",3]]],[[["mmtk",3],["workbucketstage",4],["gcwork",8,[["vmbinding",8]]]]],[[["mmtk",3],["workbucketstage",4],["vec",3,[["box",3,[["gcwork",8]]]]]]],[[["mutator",3],["usize",15],["usize",15],["isize",15],["allocationsemantics",4]],["address",3]],[[["mmtk",3],["vmmutatorthread",3]],["box",3,[["mutator",3,[["vmbinding",8]]]]]],[[["usize",15],["usize",15]],["address",3]],[[["mmtk",3],["usize",15],["usize",15]],["address",3]],[[["mmtk",3],["usize",15]],["address",3]],[[["box",3,[["mutator",3,[["vmbinding",8]]]]]]],[[["mmtk",3]]],[[["mmtk",3]]],[[["mutator",3]]],[[["address",3]]],[[["mmtk",3]],["usize",15]],[[["mmtk",3],["address",3],["usize",15]]],[[["mmtk",3],["vmmutatorthread",3]]],[[["mmtk",3]],["vec",3]],[[["mmtk",3],["allocationsemantics",4]],["allocatorselector",4]],[[["mmtk",3]],["option",4]],[[["mmtk",3],["objectreference",3]],["vec",3]],[[["mmtk",3],["vmmutatorthread",3]]],[[["mmtk",3],["vmmutatorthread",3]]],[[["mmtk",3]]],[[["mmtk",3],["vmthread",3]]],[[["objectreference",3]],["bool",15]],[[["objectreference",3]],["bool",15]],[[["address",3]],["bool",15]],[[["address",3]],["bool",15]],[[],["address",3]],[[["usize",15]],["address",3]],[[["mmtkbuilder",3]],["box",3,[["mmtk",3,[["vmbinding",8]]]]]],[[["mmtk",3],["objectreference",3]]],[[["mmtk",3]],["usize",15]],[[["mmtk",3],["box",3,[["send",8]]]]],[[["mutator",3],["objectreference",3],["usize",15],["allocationsemantics",4]]],[[["mutator",3],["barrierwritetarget",4]]],[[["mmtkbuilder",3],["str",15],["str",15]],["bool",15]],[[["mmtkbuilder",3],["str",15]],["bool",15]],[[["address",3],["usize",15]],["address",3]],[[["mmtk",3],["address",3],["usize",15],["usize",15]],["address",3]],[[["mmtk",3],["vmworkerthread",3],["gccontroller",3]]],[[["mmtk",3],["vmworkerthread",3],["gcworker",3]]],[[],["address",3]],[[["mmtk",3]],["usize",15]],[[["mmtk",3]],["usize",15]],null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mmtk",3,[["vmbinding",8]]]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["map64",3]],[[["usize",15]]],[[],["fragmentedmapper",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[]],[[]],[[]],[[]],[[],["options",3]],[[],["plan",8]],[[["vmmutatorthread",3]]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[]],[[["arc",3,[["options",3]]]]],null,null,null,null,null,null,[[["str",15],["str",15]],["bool",15]],[[["str",15]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["usize",15],["isize",15],["allocationsemantics",4]],["address",3]],null,[[],["barrier",8]],null,null,null,[[],["baseplan",3]],null,[[["bool",15],["option",4,[["space",8]]]],["bool",15]],null,[[],["planconstraints",3]],[[["objectreference",3]]],[[]],null,null,null,null,null,[[],["enummap",3]],[[],["vec",3,[["space",8]]]],[[],["vmmutatorthread",3]],[[],["usize",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["objectreference",3],["usize",15],["allocationsemantics",4]]],[[["barrierwritetarget",4]]],[[["barrierwritetarget",4]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[["gcworkscheduler",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[["objectreference",3]]],[[["objectreference",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["barrierselector",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["objectreference",3]]],[[["barrierselector",4]],["bool",15]],[[["barrierselector",4]],["bool",15]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["objectreference",3]],["bool",15]],null,null,null,[[["mmtk",3],["metadataspec",4]]],[[["barrierwritetarget",4]]],[[["barrierwritetarget",4]]],[[["barrierwritetarget",4]]],[[["barrierwritetarget",4]]],[[["barrierwritetarget",4]]],[[["barrierwritetarget",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],null,[[]],null,[[]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],null,[[["plan",8],["copyspace",3]],["vec",3]],[[["usize",15]]],[[],["enummap",3]],[[["usize",15]]],[[["usize",15]]],[[]],null,null,null,[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["vec",3,[["sidemetadataspec",3]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[],["any",8]],[[],["any",8]],[[],["baseplan",3]],[[]],[[]],[[["bool",15],["option",4,[["space",8]]]],["bool",15]],[[],["commonplan",3]],[[],["planconstraints",3]],null,null,[[],["copyconfig",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["copyspace",3]],[[],["copyspace",3]],null,[[],["gen",3]],[[],["enummap",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["vec",3,[["space",8]]]],[[],["usize",15]],null,[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["map64",3],["fragmentedmapper",3],["arc",3,[["options",3]]]]],[[["objectreference",3]]],[[["vmworkerthread",3]]],[[["gcworker",3]]],[[["vmworkerthread",3]]],[[],["bool",15]],[[["gcworkscheduler",3]]],[[],["copyspace",3]],[[],["copyspace",3]],[[["objectreference",3],["gcworker",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["vmmutatorthread",3],["mmtk",3]],["mutator",3,[["vmbinding",8]]]],[[["mutator",3],["vmworkerthread",3]]],[[["mutator",3],["vmworkerthread",3]]],null,[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[["vec",3,[["objectreference",3]]],["bool",15]],["scanobjects",3]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],null,[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["vec",3],["bool",15],["mmtk",3]]],[[]],[[["objectreference",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["bool",15],["option",4,[["space",8]]]],["bool",15]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],null,null,[[],["usize",15]],[[],["vec",3,[["space",8]]]],[[],["usize",15]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["heapmeta",3],["vec",3,[["sidemetadataspec",3]]],["planconstraints",3],["map64",3],["fragmentedmapper",3],["arc",3,[["options",3]]]]],null,null,[[["objectreference",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[],["bool",15]],[[["bool",15]]],[[["plan",8]],["bool",15]],[[["objectreference",3],["gcworker",3]],["objectreference",3]],[[["objectreference",3],["gcworker",3]],["objectreference",3]],[[["objectreference",3],["gcworker",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["sidemetadatasanity",3]]],[[],["bool",15]],null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[],["any",8]],[[],["any",8]],[[],["baseplan",3]],[[]],[[]],[[["bool",15],["option",4,[["space",8]]]],["bool",15]],[[],["commonplan",3]],[[],["planconstraints",3]],[[],["copyconfig",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],null,[[],["gen",3]],[[],["enummap",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["vec",3,[["space",8]]]],[[],["usize",15]],null,[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,[[],["bool",15]],[[["map64",3],["fragmentedmapper",3],["arc",3,[["options",3]]],["arc",3,[["gcworkscheduler",3]]]]],[[["objectreference",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[],["bool",15]],[[["gcworkscheduler",3]]],[[["objectreference",3],["gcworker",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["vmmutatorthread",3],["mmtk",3]],["mutator",3,[["vmbinding",8]]]],[[["mutator",3],["vmworkerthread",3]]],[[["mutator",3],["vmworkerthread",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["baseplan",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["allocationsemantics",4]],[[]],null,null,[[["bool",15],["option",4,[["space",8]]]],["bool",15]],[[["bool",15]],["bool",15]],[[],["commonplan",3]],[[],["commonplan",3]],[[],["commonplan",3]],[[],["planconstraints",3]],[[],["copyconfig",3]],[[],["copyconfig",3]],[[],["copyconfig",3]],[[["vmworkerthread",3],["mmtk",3]],["gcworkercopycontext",3,[["vmbinding",8]]]],[[["vmmutatorthread",3],["mmtk",3]],["box",3,[["mutator",3,[["vmbinding",8]]]]]],[[["planselector",4],["map64",3],["fragmentedmapper",3],["arc",3,[["options",3]]],["arc",3,[["gcworkscheduler",3,[["vmbinding",8]]]]]],["box",3,[["plan",8]]]],[[["map64",3],["fragmentedmapper",3],["heapmeta",3],["usize",15],["planconstraints",3],["vec",3,[["sidemetadataspec",3]]]],["immortalspace",3,[["vmbinding",8]]]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[["box",3]],["result",4,[["box",3,[["plan",8]]],["box",3]]]],[[],["option",4]],[[["rc",3]],["result",4,[["rc",3,[["plan",8]]],["rc",3]]]],[[],["option",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[]],[[]],[[]],[[["gcstatus",4]],["bool",15]],[[["allocationsemantics",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[],["bool",15]],[[],["bool",15]],null,null,[[],["gen",3]],[[],["gen",3]],[[],["gen",3]],[[],["enummap",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["immortalspace",3]],[[],["largeobjectspace",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["vec",3,[["space",8]]]],[[],["vec",3,[["space",8]]]],[[],["vec",3,[["space",8]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["vmmutatorthread",3],["bool",15]]],[[["vmmutatorthread",3],["bool",15]]],[[["vmmutatorthread",3],["bool",15]]],[[["vmmutatorthread",3],["bool",15]]],null,null,[[["usize",15]],["usize",15]],[[["usize",15]]],[[["usize",15]],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,null,null,[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,[[]],[[]],[[]],[[["option",4,[["space",8]]],["str",15]]],[[["option",4,[["space",8]]],["str",15]]],[[["option",4,[["space",8]]],["str",15]]],null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["fragmentedmapper",3]],[[],["fragmentedmapper",3]],[[],["fragmentedmapper",3]],null,[[["objectreference",3]]],[[["objectreference",3]]],[[["objectreference",3]]],null,[[["map64",3],["fragmentedmapper",3],["arc",3,[["options",3]]],["heapmeta",3],["planconstraints",3],["vec",3,[["sidemetadataspec",3]]]],["baseplan",3]],[[["map64",3],["fragmentedmapper",3],["arc",3,[["options",3]]],["heapmeta",3],["planconstraints",3],["vec",3,[["sidemetadataspec",3]]]],["commonplan",3]],[[],["options",3]],[[],["options",3]],[[],["options",3]],null,[[["bool",15],["option",4,[["space",8]]]],["bool",15]],[[["bool",15],["option",4,[["space",8]]]],["bool",15]],[[["bool",15],["option",4,[["space",8]]]],["bool",15]],[[["objectreference",3]]],[[["objectreference",3]]],[[["objectreference",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3],["bool",15]]],[[["vmworkerthread",3],["bool",15]]],[[]],[[["gcworker",3]]],[[["gcworker",3]]],[[["gcworker",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3],["bool",15]]],[[["vmworkerthread",3],["bool",15]]],[[]],null,null,[[["gcworkscheduler",3]]],[[]],[[["gcstatus",4]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,[[]],[[["objectreference",3],["gcworker",3]],["objectreference",3]],[[["objectreference",3],["gcworker",3]],["objectreference",3]],[[["objectreference",3],["gcworker",3]],["objectreference",3]],[[["objectreference",3],["gcworker",3]],["objectreference",3]],[[["objectreference",3],["gcworker",3]],["objectreference",3]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["sidemetadatasanity",3]]],[[["sidemetadatasanity",3]]],null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[],["any",8]],[[],["any",8]],[[],["baseplan",3]],[[]],[[]],[[["bool",15],["option",4,[["space",8]]]],["bool",15]],[[],["commonplan",3]],null,[[],["planconstraints",3]],[[],["copyconfig",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["enummap",3]],[[],["usize",15]],[[],["vec",3,[["space",8]]]],[[],["usize",15]],null,[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["bool",15]],null,[[],["bool",15]],[[["map64",3],["fragmentedmapper",3],["arc",3,[["options",3]]],["arc",3,[["gcworkscheduler",3]]]]],[[["objectreference",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[["gcworkscheduler",3]]],[[["objectreference",3],["gcworker",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["vmmutatorthread",3],["plan",8]],["mutator",3,[["vmbinding",8]]]],[[["usize",15]]],[[],["enummap",3]],[[["usize",15]]],[[["usize",15]]],[[]],[[["mutator",3],["vmworkerthread",3]]],[[["mutator",3],["vmworkerthread",3]]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],null,null,[[["markcompactspace",3]]],[[]],[[["markcompactspace",3]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[],["any",8]],[[],["any",8]],[[],["baseplan",3]],[[]],[[]],[[["bool",15],["option",4,[["space",8]]]],["bool",15]],[[],["commonplan",3]],null,[[],["planconstraints",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["enummap",3]],[[],["usize",15]],[[],["vec",3,[["space",8]]]],[[],["usize",15]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["bool",15]],[[],["markcompactspace",3]],null,[[["map64",3],["fragmentedmapper",3],["arc",3,[["options",3]]]]],[[["objectreference",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[["gcworkscheduler",3]]],[[["objectreference",3],["gcworker",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["vmmutatorthread",3],["plan",8]],["mutator",3,[["vmbinding",8]]]],[[["usize",15]]],[[],["enummap",3]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["mutator",3],["vmworkerthread",3]]],[[["mutator",3],["vmworkerthread",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],null,[[["marksweep",3]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[],["any",8]],[[],["any",8]],[[],["baseplan",3]],[[]],[[]],[[["bool",15],["option",4,[["space",8]]]],["bool",15]],[[],["commonplan",3]],null,[[],["planconstraints",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["enummap",3]],[[],["vec",3,[["space",8]]]],[[],["usize",15]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["bool",15]],null,[[],["mallocspace",3]],[[["map64",3],["fragmentedmapper",3],["arc",3,[["options",3]]]]],[[["objectreference",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[["gcworkscheduler",3]]],[[["objectreference",3],["gcworker",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["vmmutatorthread",3],["plan",8]],["mutator",3,[["vmbinding",8]]]],[[["usize",15]]],[[],["enummap",3]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["mutator",3],["vmworkerthread",3]]],[[["mutator",3],["vmworkerthread",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[["usize",15],["usize",15],["isize",15],["allocationsemantics",4]],["address",3]],[[["usize",15],["usize",15],["isize",15],["allocationsemantics",4]],["address",3]],null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["barrier",8]],[[],["barrier",8]],null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[["reservedallocators",3],["bool",15]],["enummap",3,[["allocationsemantics",4],["allocatorselector",4]]]],[[["reservedallocators",3],["bool",15],["plan",8]],["vec",3]],[[],["reservedallocators",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["vmmutatorthread",3]],[[],["vmmutatorthread",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],null,null,null,null,null,null,null,[[["objectreference",3],["usize",15],["allocationsemantics",4]]],[[["objectreference",3],["usize",15],["allocationsemantics",4]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],null,[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["baseplan",3]],null,[[]],[[]],[[["bool",15],["option",4,[["space",8]]]],["bool",15]],[[],["planconstraints",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["enummap",3]],[[],["vec",3,[["space",8]]]],[[],["usize",15]],[[["vmmutatorthread",3],["bool",15]]],null,[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],null,[[["map64",3],["fragmentedmapper",3],["arc",3,[["options",3]]]]],null,[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[["gcworkscheduler",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[["vmmutatorthread",3],["plan",8]],["mutator",3,[["vmbinding",8]]]],[[],["enummap",3]],[[["usize",15]]],[[],["enummap",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["mutator",3],["vmworkerthread",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[],["any",8]],[[],["any",8]],[[],["baseplan",3]],[[]],[[]],[[["bool",15],["option",4,[["space",8]]]],["bool",15]],[[],["commonplan",3]],null,[[],["planconstraints",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["enummap",3]],[[],["vec",3,[["space",8]]]],[[],["usize",15]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["bool",15]],[[["map64",3],["fragmentedmapper",3],["arc",3,[["options",3]]]]],[[["objectreference",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[["gcworkscheduler",3]]],null,[[["objectreference",3],["gcworker",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["vmmutatorthread",3],["plan",8]],["mutator",3,[["vmbinding",8]]]],[[],["enummap",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["mutator",3],["vmworkerthread",3]]],[[["mutator",3],["vmworkerthread",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],null,null,null,[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[],["any",8]],[[],["any",8]],[[],["baseplan",3]],[[]],[[]],[[["bool",15],["option",4,[["space",8]]]],["bool",15]],[[],["commonplan",3]],null,[[],["planconstraints",3]],null,null,[[],["copyconfig",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["copyspace",3]],[[],["copyspace",3]],[[],["enummap",3]],[[],["usize",15]],[[],["vec",3,[["space",8]]]],[[],["usize",15]],null,[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["bool",15]],[[["map64",3],["fragmentedmapper",3],["arc",3,[["options",3]]]]],[[["objectreference",3]]],[[["vmworkerthread",3]]],[[["gcworker",3]]],[[["vmworkerthread",3]]],[[["gcworkscheduler",3]]],[[],["copyspace",3]],[[],["copyspace",3]],[[["objectreference",3],["gcworker",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["vmmutatorthread",3],["plan",8]],["mutator",3,[["vmbinding",8]]]],[[],["enummap",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["mutator",3],["vmworkerthread",3]]],[[["mutator",3],["vmworkerthread",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],null,[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["objectreference",3]]],[[["objectreference",3]]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["vec",3,[["objectreference",3]]]],[[],["bool",15]],[[]],[[["gcworker",3]]],null,[[],["vec",3,[["objectreference",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["objectreference",3],["usize",15],["usize",15],["isize",15]],["address",3]],[[["objectreference",3],["usize",15]]],[[["objectreference",3],["usize",15]]],[[]],[[]],null,null,null,[[["objectreference",3],["usize",15],["usize",15],["isize",15]],["address",3]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["sft",8]],[[],["space",8]],[[]],[[]],[[]],[[]],[[],["commonspace",3]],null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],null,[[["objectreference",3]],["option",4,[["objectreference",3]]]],[[],["pageresource",8]],[[],["usize",15]],[[],["usize",15]],[[["objectreference",3],["bool",15]]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["bool",15]],[[["objectreference",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["str",15]],[[["str",15],["bool",15],["bool",15],["vmrequest",4],["vec",3,[["sidemetadataspec",3]]],["map64",3],["fragmentedmapper",3],["heapmeta",3]]],[[["vmworkerthread",3],["plan",8],["copyspace",3]]],null,[[["bool",15]]],[[]],[[]],[[["copyspace",3]]],[[]],[[]],[[["address",3]]],[[]],[[["option",4,[["copysemantics",4]]]]],[[["vectorobjectqueue",3],["objectreference",3],["gcworkermutref",3]],["objectreference",3]],[[["objectreference",3],["option",4,[["copysemantics",4]]],["gcworker",3]],["objectreference",3]],[[["objectreference",3],["option",4,[["copysemantics",4]]],["gcworker",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,[[],["bool",15]],[[["objectreference",3]]],[[["objectreference",3],["option",4,[["copysemantics",4]]],["gcworker",3]],["objectreference",3]],null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["chunk",3]],[[],["blockstate",4]],[[],["block",3]],[[]],[[]],[[],["blocklist",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["line",3]],[[["blockstate",4]],["bool",15]],[[["block",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u8",15]]],[[]],[[["address",3]],["block",3]],[[]],[[],["mutexguard",3,[["vec",3,[["block",3]]]]]],[[],["usize",15]],[[],["blockstate",4]],[[],["usize",15]],[[],["usize",15]],[[["bool",15]]],[[],["usize",15]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["metadatabytearrayref",3]],[[],["regioniterator",3,[["line",3]]]],[[["blockstate",4]],["bool",15]],[[["block",3]],["bool",15]],[[["block",3]],["option",4,[["ordering",4]]]],[[],["option",4,[["block",3]]]],[[["block",3]]],null,[[]],[[["bool",15]]],[[["usize",15]]],[[["blockstate",4]]],[[],["line",3]],[[["immixspace",3],["option",4,[["u8",15]]]],["bool",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["regioniterator",3,[["chunk",3]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["regioniterator",3,[["block",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["chunk",3]],[[],["chunkstate",4]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["gcworker",3],["mmtk",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["chunk",3]],["bool",15]],[[["chunkstate",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["address",3]],["chunk",3]],[[]],[[["immixspace",3]],["vec",3,[["box",3,[["gcwork",8]]]]]],[[],["vec",3,[["box",3,[["gcwork",8]]]]]],[[["chunk",3]],["chunkstate",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["chunk",3]],["bool",15]],[[]],[[["chunk",3]],["option",4,[["ordering",4]]]],[[["chunk",3],["chunkstate",4]]],null,[[["immixspace",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[]],[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[["bool",15],["bool",15],["usize",15],["bool",15],["bool",15],["bool",15]]],[[],["defrag",3]],[[["immixspace",3]],["usize",15]],null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["immixspace",3]]],[[["formatter",3]],["result",6]],[[]],[[["immixspace",3]],["usize",15]],[[],["bool",15]],null,[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],null,[[]],[[["bool",15]]],[[["immixspace",3]]],[[["immixspace",3]]],[[],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,[[["objectreference",3],["usize",15],["usize",15],["isize",15]],["address",3]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["sft",8]],[[],["space",8]],[[["objectreference",3],["u8",15]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["commonspace",3]],null,null,[[["bool",15],["bool",15],["usize",15],["bool",15],["bool",15]],["bool",15]],null,null,[[],["usize",15]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["gcworker",3],["mmtk",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["objectreference",3]],["objectreference",3]],[[]],[[]],[[]],[[["vmthread",3],["bool",15]],["option",4,[["block",3]]]],[[["line",3]],["option",4]],[[],["pageresource",8]],[[["bool",15]],["option",4,[["block",3]]]],[[],["immixspace",3]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["objectreference",3],["bool",15]]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["bool",15]],["bool",15]],[[["objectreference",3]],["bool",15]],[[["objectreference",3],["u8",15]],["bool",15]],[[],["bool",15]],[[["objectreference",3]],["bool",15]],[[],["bool",15]],null,null,[[["objectreference",3]]],null,[[],["bool",15]],[[],["str",15]],[[["str",15],["map64",3],["fragmentedmapper",3],["heapmeta",3],["arc",3,[["gcworkscheduler",3]]],["vec",3,[["sidemetadataspec",3]]]]],[[["vmworkerthread",3],["plan",8],["immixspace",3]]],[[["objectreference",3],["usize",15]]],[[["objectreference",3]]],null,[[["bool",15]]],[[]],[[["bool",15]],["bool",15]],[[]],[[["block",3]]],[[["address",3]]],[[["chunk",3]]],null,[[],["gcworkscheduler",3]],null,[[["option",4,[["copysemantics",4]]]]],[[["vectorobjectqueue",3],["objectreference",3],["gcworkermutref",3]],["objectreference",3]],[[],["vec",3,[["sidemetadataspec",3]]]],null,[[["objectreference",3],["option",4,[["copysemantics",4]]],["gcworker",3]],["objectreference",3]],[[["objectreference",3],["copysemantics",4],["gcworker",3]],["objectreference",3]],[[["objectreference",3],["copysemantics",4],["gcworker",3]],["objectreference",3]],[[["objectreference",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["block",3]],[[]],[[]],[[],["line",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["line",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["address",3]],["line",3]],[[],["usize",15]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["u8",15]],["bool",15]],[[["u8",15]]],[[["objectreference",3],["u8",15]],["usize",15]],[[["line",3]],["bool",15]],[[["line",3]],["option",4,[["ordering",4]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[],["any",8]],[[],["any",8]],[[],["sft",8]],[[],["space",8]],[[]],[[]],[[],["commonspace",3]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["pageresource",8]],[[],["usize",15]],[[["objectreference",3],["bool",15]]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["objectreference",3]],["bool",15]],[[],["bool",15]],[[["objectreference",3]],["bool",15]],[[],["bool",15]],null,[[],["bool",15]],[[],["str",15]],[[["str",15],["bool",15],["vmrequest",4],["vec",3,[["sidemetadataspec",3]]],["map64",3],["fragmentedmapper",3],["heapmeta",3],["planconstraints",3]]],null,[[]],[[]],[[["address",3]]],[[["vectorobjectqueue",3],["objectreference",3],["gcworkermutref",3]],["objectreference",3]],[[["objectreference",3],["usize",15]],["bool",15]],[[["objectreference",3]],["objectreference",3]],[[["objectreference",3],["option",4,[["copysemantics",4]]],["gcworker",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[["vmthread",3],["usize",15]],["address",3]],[[],["any",8]],[[],["any",8]],[[],["sft",8]],[[],["space",8]],[[]],[[]],[[["objectreference",3]]],[[],["commonspace",3]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["pageresource",8]],[[["address",3]],["address",3]],null,[[],["usize",15]],[[["objectreference",3],["bool",15]]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["objectreference",3]],["bool",15]],[[["objectreference",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],["bool",15]],[[],["str",15]],[[["str",15],["bool",15],["vmrequest",4],["vec",3,[["sidemetadataspec",3]]],["map64",3],["fragmentedmapper",3],["heapmeta",3],["planconstraints",3],["bool",15]]],null,[[["bool",15]]],[[["bool",15]]],[[["address",3]]],[[["vectorobjectqueue",3],["objectreference",3],["gcworkermutref",3]],["objectreference",3]],[[["bool",15]]],[[["objectreference",3],["usize",15]],["bool",15]],[[["objectreference",3],["usize",15]],["bool",15]],[[["objectreference",3],["option",4,[["copysemantics",4]]],["gcworker",3]],["objectreference",3]],[[["objectreference",3]],["objectreference",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["vmthread",3],["usize",15]],["address",3]],[[],["any",8]],[[],["any",8]],[[],["sft",8]],[[],["space",8]],[[]],[[]],[[],["commonspace",3]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[]],[[],["str",15]],[[],["pageresource",8]],[[],["usize",15]],[[["objectreference",3],["bool",15]]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["objectreference",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],["bool",15]],null,[[],["str",15]],null,[[["str",15],["bool",15],["options",3],["vec",3,[["sidemetadataspec",3]]]]],null,[[["address",3]]],[[],["usize",15]],[[["vectorobjectqueue",3],["objectreference",3],["gcworkermutref",3]],["objectreference",3]],null,null,[[["objectreference",3],["option",4,[["copysemantics",4]]],["gcworker",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["sidemetadatasanity",3]]],null,null,null,null,null,null,null,null,[[["address",3]],["bool",15]],[[["vmthread",3],["usize",15],["usize",15],["isize",15]],["address",3]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["sft",8]],[[],["space",8]],[[]],[[]],[[]],[[]],null,null,[[["address",3]]],[[],["commonspace",3]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["address",3]]],[[["address",3],["usize",15],["bool",15]]],[[]],[[]],[[["objectreference",3]]],[[],["str",15]],[[],["pageresource",8]],[[["objectreference",3]],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[["objectreference",3],["bool",15]]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["objectreference",3]],["bool",15]],[[["objectreference",3]],["bool",15]],[[["address",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["address",3],["usize",15]]],[[],["bool",15]],null,[[],["str",15]],[[["vec",3,[["sidemetadataspec",3]]]]],null,[[["address",3]]],[[],["usize",15]],[[["vectorobjectqueue",3],["objectreference",3],["gcworkermutref",3]],["objectreference",3]],[[["objectreference",3]],["usize",15]],[[["address",3]]],[[["address",3]]],[[["address",3],["sidemetadataspec",3]]],[[["objectreference",3],["address",3]],["bool",15]],null,[[["objectreference",3]],["objectreference",3]],[[["objectreference",3],["option",4,[["copysemantics",4]]],["gcworker",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["sidemetadatasanity",3]]],null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[],["sidemetadatacontext",3]],[[],["mutex",3]],[[["usize",15]]],[[["usize",15]]],[[],["address",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["address",3]],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["objectreference",3]],["bool",15]],[[["address",3]],["bool",15]],[[["address",3]],["bool",15]],[[["address",3]],["bool",15]],[[["objectreference",3],["option",4,[["ordering",4]]]],["bool",15]],[[["address",3],["usize",15]],["bool",15]],[[["address",3]],["bool",15]],[[["address",3]],["bool",15]],[[["address",3]],["bool",15]],[[["address",3]],["bool",15]],[[["sidemetadataspec",3],["address",3]],["u128",15]],[[["address",3]]],[[["sidemetadatacontext",3],["address",3],["usize",15]]],[[["objectreference",3]]],[[["address",3]]],[[["objectreference",3],["option",4,[["ordering",4]]]]],[[["address",3]]],[[["address",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["objectreference",3]]],[[["objectreference",3]]],[[["address",3]]],[[["objectreference",3],["option",4,[["ordering",4]]]]],[[["address",3]]],[[["address",3]]],null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["sft",8]],[[],["space",8]],[[]],[[]],[[]],[[]],[[]],[[["objectreference",3]]],[[],["commonspace",3]],null,[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["objectreference",3]],["option",4,[["objectreference",3]]]],[[["objectreference",3]],["objectreference",3]],[[],["pageresource",8]],[[["objectreference",3]],["address",3]],[[],["usize",15]],[[],["usize",15]],[[["objectreference",3],["bool",15]]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["objectreference",3]],["bool",15]],[[["objectreference",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["str",15]],[[["str",15],["bool",15],["vmrequest",4],["vec",3,[["sidemetadataspec",3]]],["map64",3],["fragmentedmapper",3],["heapmeta",3]]],null,[[]],[[]],[[["address",3]]],[[["vectorobjectqueue",3],["objectreference",3],["gcworkermutref",3]],["objectreference",3]],[[["objectreference",3]],["usize",15]],[[["objectreference",3],["objectreference",3]]],[[["objectreference",3]],["bool",15]],[[["objectreference",3]],["bool",15]],[[["objectreference",3]],["bool",15]],[[["objectreference",3]],["objectreference",3]],[[["objectreference",3]],["objectreference",3]],[[["objectreference",3],["option",4,[["copysemantics",4]]],["gcworker",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[["vmthread",3],["usize",15]],["address",3]],null,[[["address",3]],["bool",15]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["sft",8]],[[],["space",8]],[[["objectreference",3]]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["address",3]]],[[["usize",15]]],[[],["commonspace",3]],null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[["box",3]],["result",4,[["box",3,[["space",8]]],["box",3]]]],[[],["option",4]],[[["rc",3]],["result",4,[["rc",3,[["space",8]]],["rc",3]]]],[[],["option",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],null,[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["address",3]],["sft",8]],[[["objectreference",3]],["option",4,[["objectreference",3]]]],[[["f32",15]],["usize",15]],[[],["str",15]],[[],["pageresource",8]],[[["address",3],["usize",15],["bool",15]]],null,null,null,[[["objectreference",3]],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["objectreference",3],["bool",15]]],[[["objectreference",3],["bool",15]]],[[]],[[["sft",8]]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["gcworker",3]],[[],["bool",15]],[[["objectreference",3]],["bool",15]],[[["objectreference",3]],["bool",15]],[[["objectreference",3]],["bool",15]],[[["objectreference",3]],["bool",15]],[[["objectreference",3]],["bool",15]],[[["address",3]],["bool",15]],[[["address",3]],["bool",15]],[[["address",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["objectreference",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["sft",8],["address",3],["usize",15]]],null,null,null,null,[[]],[[],["str",15]],[[],["str",15]],null,null,null,null,[[]],[[["spaceoptions",3],["map64",3],["fragmentedmapper",3],["heapmeta",3]]],[[["gcworker",3]]],null,[[],["string",3]],[[["space",8]],["result",4,[["error",3]]]],[[["address",3]]],[[["usize",15]],["usize",15]],[[],["usize",15]],[[["usize",15],["sft",8]]],[[["option",4,[["copysemantics",4]]]]],null,[[["vectorobjectqueue",3],["objectreference",3],["gcworkermutref",3]],["objectreference",3]],[[["vectorobjectqueue",3],["objectreference",3],["gcworkermutref",3]],["objectreference",3]],null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["sft",8],["address",3],["usize",15]]],[[["sidemetadatasanity",3]]],[[],["map64",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["vec",3,[["objectreference",3]]],["bool",15]]],[[["gcworker",3],["mmtk",3]]],null,null,null,null,null,[[["vec",3],["bool",15],["mmtk",3]]],null,null,null,null,null,null,null,null,null,null,[[["objectreference",3]],["objectreference",3]],null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["rc",3]],["rc",3,[["any",8]]]],null,[[["mmtk",3],["arc",3,[["gcrequester",3]]],["arc",3,[["gcworkscheduler",3]]],["receiver",3,[["coordinatormessage",4]]],["gcworker",3]],["box",3,[["gccontroller",3]]]],[[["coordinatormessage",4]],["bool",15]],null,null,[[["vmworkerthread",3]]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],null,null,[[["vec",3]]],[[["vec",3,[["objectreference",3]]]]],[[["vec",3,[["objectreference",3]]],["bool",15]]],[[["vec",3,[["objectreference",3]]],["bool",15]],["scanobjects",3]],[[["vec",3,[["objectreference",3]]],["bool",15]]],[[],["preparecollector",3]],[[],["releasecollector",3]],[[],["stopmutators",3]],[[],["endofgc",3]],[[],["vmprocessweakrefs",3]],[[],["scanstackroots",3]],[[],["scanvmspecificroots",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["vec",3,[["objectreference",3]]]]],[[["vec",3,[["objectreference",3]]]]],[[["vec",3,[["objectreference",3]]]]],null,[[],["mmtk",3]],null,null,null,null,null,[[["vec",3],["bool",15],["mmtk",3]]],[[]],[[["mutator",3]]],[[]],[[["mutator",3]]],[[["vec",3],["bool",15],["mmtk",3]]],[[["vec",3],["bool",15],["mmtk",3]]],[[["mmtk",3]]],[[["vec",3,[["objectreference",3]]],["bool",15],["bool",15]]],[[["vec",3,[["objectreference",3]]],["metadataspec",4]]],[[["vec",3],["bool",15],["mmtk",3]]],[[["vec",3,[["objectreference",3]]],["bool",15],["bool",15]]],[[]],[[]],[[]],[[]],null,null,null,null,[[],["plan",8]],null,null,null,null,[[],["vec",3,[["objectreference",3]]]],[[["objectreference",3]]],[[["objectreference",3]]],[[["objectreference",3]]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,[[["gcworker",3]]],[[]],[[]],[[]],[[["objectreference",3]],["objectreference",3]],[[["objectreference",3]],["objectreference",3]],[[["objectreference",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["gcworker",3]],null,null,null,null,null,[[["gcworker",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["usize",15]],["arc",3]],[[["mmtk",3]]],[[],["usize",15]],[[["box",3,[["send",8]]]]],null,[[["gcworker",3]],["box",3,[["gcwork",8]]]],[[["gcworker",3]],["option",4,[["box",3,[["gcwork",8]]]]]],[[["gcworker",3]],["steal",4,[["box",3,[["gcwork",8]]]]]],[[["gcworker",3]],["box",3,[["gcwork",8]]]],[[]],[[]],[[["arc",3],["mmtk",3],["vmthread",3]]],[[],["hashmap",3,[["string",3],["string",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]],null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mmtk",3]],["vec",3,[["box",3,[["workcounter",8]]]]]],[[]],[[],["schedulerstat",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],null,[[["workerlocalstat",3]]],[[]],[[]],[[]],[[],["hashmap",3,[["string",3],["string",3]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["bool",15]],[[["typeid",3],["str",15],["mmtk",3]],["workstat",3]],[[["workerlocalstat",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[["str",15]],["string",3]],null,null,null,null,null,null,[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,[[["gcwork",8]]],[[["box",3,[["gcwork",8]]]]],[[["box",3,[["gcwork",8]]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3,[["box",3,[["gcwork",8]]]]]]],[[["vec",3,[["box",3,[["gcwork",8]]]]]]],null,[[],["workbucketstage",4]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["workbucketstage",4]],["bool",15]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["usize",15]]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[]],[[["bool",15],["arc",3],["arc",3,[["workergroup",3]]]]],[[]],[[]],[[["worker",3]],["steal",4,[["box",3,[["gcwork",8]]]]]],null,[[["box",3,[["gcwork",8]]]]],[[["vec",3,[["box",3,[["gcwork",8]]]]]]],null,null,[[]],[[["worker",3]],["steal",4,[["box",3,[["gcwork",8]]]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["gcworkscheduler",3]],["bool",15]],null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[]],[[]],[[],["workcounterbase",3]],[[],["workduration",3]],[[],["box",3,[["workcounter",8]]]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["workcounterbase",3]],[[],["workcounterbase",3]],[[],["workcounterbase",3]],[[],["workcounterbase",3]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],null,[[]],[[]],[[["f64",15]]],null,[[],["string",3]],[[],["string",3]],[[]],null,[[]],[[]],null,[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[["workbucketstage",4]]],[[["workbucketstage",4]]],[[],["bool",15]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["atomicref",3,[["workerlocalstat",3]]]],[[],["atomicrefmut",3,[["workerlocalstat",3]]]],null,[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[["box",3,[["gcwork",8]]]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["gcworkercopycontext",3]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["bool",15]],null,null,null,[[["option",4,[["stealer",3,[["box",3,[["gcwork",8]]]]]]]]],[[["mmtk",3],["usize",15],["arc",3,[["gcworkscheduler",3]]],["bool",15],["sender",3,[["coordinatormessage",4]]],["arc",3,[["gcworkershared",3]]],["worker",3,[["box",3,[["gcwork",8]]]]]]],[[["usize",15]],["arc",3]],null,[[],["usize",15]],null,[[],["box",3,[["gcwork",8]]]],[[["vmworkerthread",3],["mmtk",3]]],[[],["gcworkscheduler",3]],null,null,null,[[["mmtk",3],["sender",3,[["coordinatormessage",4]]],["vmthread",3]]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["usize",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]],["address",3]],[[["bytesize",6]],["address",3]],[[["byteoffset",6]],["address",3]],[[["byteoffset",6]]],[[["bytesize",6]]],[[["bytesize",6]],["address",3]],[[["bytesize",6]],["address",3]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["usize",15]],[[["ordering",4]]],[[["ordering",4]]],[[["usize",15]],["usize",15]],[[["u8",15]],["u8",15]],[[["u8",15]],["usize",15]],[[["usize",15]],["usize",15]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["address",3]],[[],["objectreference",3]],[[]],[[]],[[["address",3]],["ordering",4]],[[["ordering",4],["ordering",4]],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["address",3]],["bool",15]],[[["objectreference",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["block",3]],["address",3]],[[["chunk",3]],["address",3]],[[["line",3]],["address",3]],[[]],[[],["address",3]],[[],["address",3]],[[],["address",3]],[[["usize",15]],["address",3]],[[["address",3]],["bytesize",6]],[[],["option",4]],[[["address",3]],["byteoffset",6]],[[],["objectreference",3]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["usize",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["copy",8]],[[],["objectreference",3]],[[],["address",3]],[[["address",3]],["bool",15]],[[["objectreference",3]],["bool",15]],[[["address",3]],["option",4,[["ordering",4]]]],[[["objectreference",3]],["option",4,[["ordering",4]]]],[[["usize",15]],["address",3]],[[["objectreference",3]]],[[["isize",15]]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["objectreference",3]]],[[]],[[["usize",15]],["address",3]],[[["address",3]],["bytesize",6]],[[["bytesize",6]],["address",3]],[[["bytesize",6]]],[[],["address",3]],[[]],[[],["objectreference",3]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["usize",15]],[[],["address",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["usize",15],["isize",15]],["address",3]],[[["usize",15],["usize",15],["isize",15]],["address",3]],null,null,null,null,null,[[],["bool",15]],null,[[["address",3],["address",3]]],[[],["plan",8]],[[],["space",8]],[[],["vmthread",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["address",3],["usize",15],["isize",15],["usize",15],["bool",15]],["address",3]],[[["address",3],["usize",15],["isize",15]],["address",3]],[[["usize",15],["usize",15],["isize",15]],["address",3]],[[["usize",15],["usize",15],["isize",15]],["address",3]],[[["usize",15],["usize",15],["isize",15]],["address",3]],[[["usize",15],["usize",15],["isize",15]],["address",3]],[[["usize",15],["usize",15],["isize",15]],["address",3]],[[["usize",15],["usize",15],["isize",15]],["address",3]],[[["usize",15],["usize",15],["isize",15],["bool",15]],["address",3]],[[["usize",15],["usize",15],["isize",15],["bool",15]],["address",3]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[["box",3]],["result",4,[["box",3,[["allocator",8]]],["box",3]]]],[[],["option",4]],[[["rc",3]],["result",4,[["rc",3,[["allocator",8]]],["rc",3]]]],[[],["option",4]],[[["usize",15]]],[[["address",3],["address",3]]],[[["formatter",3]],["result",6]],[[]],[[["usize",15],["usize",15],["usize",15]],["usize",15]],[[],["plan",8]],[[],["space",8]],[[],["usize",15]],[[],["usize",15]],[[],["vmthread",3]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],null,[[],["allocatorselector",4]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["allocatorselector",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["allocatorselector",4]],["allocator",8]],[[["allocatorselector",4]],["allocator",8]],null,[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],null,null,null,[[["allocatorselector",4]],["bool",15]],[[["vmmutatorthread",3],["plan",8]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["usize",15],["usize",15],["isize",15],["bool",15]],["address",3]],[[["usize",15],["usize",15],["isize",15]],["address",3]],[[["usize",15],["usize",15],["isize",15]],["address",3]],[[["usize",15],["usize",15],["isize",15],["bool",15]],["address",3]],[[],["any",8]],[[],["any",8]],[[]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[["usize",15]]],[[]],[[],["plan",8]],[[],["space",8]],[[],["usize",15]],[[],["vmthread",3]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],null,[[["vmthread",3],["space",8],["plan",8]]],null,[[["space",8]]],[[]],[[["address",3],["address",3]]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[["address",3]],["address",3]],[[["address",3],["usize",15],["usize",15]],["usize",15]],null,[[["usize",15],["usize",15],["isize",15]],["address",3]],[[],["bool",15]],[[["usize",15],["usize",15],["isize",15]],["bool",15]],[[["usize",15],["usize",15],["isize",15]],["address",3]],[[["usize",15],["usize",15],["isize",15]],["address",3]],[[["usize",15],["usize",15],["isize",15]],["address",3]],[[["usize",15],["usize",15],["isize",15],["bool",15]],["address",3]],[[],["any",8]],[[],["any",8]],[[]],[[]],null,null,[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[["usize",15]]],[[]],[[],["plan",8]],[[],["space",8]],[[],["usize",15]],[[],["vmthread",3]],null,[[],["immixspace",3]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],null,null,null,null,[[["vmthread",3],["option",4,[["space",8]]],["plan",8],["bool",15]]],[[["usize",15],["usize",15],["isize",15]],["address",3]],null,null,[[["usize",15],["usize",15],["isize",15]],["bool",15]],[[]],[[]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["usize",15],["usize",15],["isize",15]],["address",3]],[[["usize",15],["usize",15],["isize",15]],["address",3]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[["usize",15]]],[[]],[[],["plan",8]],[[],["space",8]],[[],["vmthread",3]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["vmthread",3],["largeobjectspace",3],["plan",8]]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["usize",15],["usize",15],["isize",15]],["address",3]],[[["usize",15],["usize",15],["isize",15]],["address",3]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[["usize",15]]],[[]],[[],["plan",8]],[[],["space",8]],[[],["vmthread",3]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["vmthread",3],["mallocspace",3],["plan",8]]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[["usize",15],["usize",15],["isize",15]],["address",3]],[[["usize",15],["usize",15],["isize",15]],["address",3]],[[["usize",15],["usize",15],["isize",15],["bool",15]],["address",3]],[[],["any",8]],[[],["any",8]],[[]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[["usize",15]]],[[]],[[],["plan",8]],[[],["space",8]],[[],["usize",15]],[[],["vmthread",3]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["vmthread",3],["space",8],["plan",8]]],[[["space",8]]],[[]],[[["address",3],["address",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["address",3]],["address",3]],[[["usize",15]]],[[["address",3]],["bool",15]],null,null,[[["address",3],["usize",15]]],[[["objectreference",3]],["bool",15]],[[["address",3]],["bool",15]],[[["address",3]],["bool",15]],[[["sidemetadatacontext",3],["address",3]]],[[["objectreference",3]]],[[["address",3]]],[[["objectreference",3]]],[[["objectreference",3]]],null,null,null,[[["arc",3,[["mutex",3,[["rtanalysis",8]]]]]]],[[["usize",15],["usize",15],["isize",15]]],[[["usize",15],["usize",15],["isize",15]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[],["gchookwork",3]],[[],["analysismanager",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["gcworker",3],["mmtk",3]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],null,[[["mmtk",3]]],[[["mmtk",3]]],[[],["usize",15]],[[],["usize",15]],[[["stats",3]]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["stats",3]]],null,null,null,[[["bool",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["mmtk",3]]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["bool",15],["arc",3,[["mutex",3,[["eventcounter",3]]]]]]],null,[[["bool",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["usize",15],["usize",15],["isize",15]]],[[],["any",8]],[[],["any",8]],[[]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["bool",15],["arc",3,[["mutex",3,[["eventcounter",3]]]]]]],null,[[["bool",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["usize",15],["usize",15],["isize",15]]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["persizeclassobjectcounter",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["bool",15]]],null,null,[[["bool",15]]],[[["usize",15]],["usize",15]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["address",3]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["string",3]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["address",3]],["address",3]],[[["address",3]],["address",3]],[[["usize",15]],["address",3]],[[["address",3]],["bool",15]],[[["address",3]],["bool",15]],[[["address",3]],["address",3]],[[["address",3]],["address",3]],[[["address",3]],["address",3]],[[["usize",15]],["usize",15]],[[["usize",15],["usize",15]],["usize",15]],[[["usize",15],["usize",15]],["usize",15]],[[["usize",15],["usize",15]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["objectreference",3],["usize",15],["usize",15],["isize",15],["copysemantics",4]],["address",3]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["copysemantics",4]],[[],["copyselector",4]],[[]],[[]],null,null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["usize",15]]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["usize",15]],[[],["bool",15]],[[["vmworkerthread",3],["plan",8],["copyconfig",3]]],[[]],[[["objectreference",3],["usize",15],["copysemantics",4]]],[[]],[[]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[]],[[]],[[]],[[["plan",8]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["finalizableprocessor",3]],[[],["finalization",3]],[[],["forwardfinalization",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["bool",15]]],[[["bool",15]]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[["objectreference",3]],["vec",3]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[]],[[]],[[]],null,null,[[["vmworkerthread",3],["bool",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[["i32",15],["i32",15],["i32",15]],["i32",15]],[[["i32",15],["i32",15]]],[[["i32",15]]],[[["i32",15],["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15],["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15],["bool",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["bool",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15],["i32",15]]],[[["i32",15]],["bool",15]],[[["i32",15]],["bool",15]],[[["i32",15]],["bool",15]],[[["i32",15],["i32",15]]],[[["i32",15],["bool",15]]],[[["i32",15],["i32",15]]],[[["i32",15],["i32",15]]],[[["i32",15],["i32",15]]],[[["i32",15],["i32",15]]],[[["i32",15]]],[[["i32",15],["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],null,[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[["usize",15]],["usize",15]],[[["spacedescriptor",3],["usize",15],["usize",15],["vmthread",3]],["result",4,[["prallocresult",3],["prallocfail",3]]]],[[["spacedescriptor",3],["usize",15],["mutexguard",3]],["i32",15]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["commonpageresource",3]],null,null,[[],["commonpageresource",3]],[[["usize",15]]],[[["usize",15]]],[[],["commonfreelistpageresource",3]],[[["usize",15]]],[[["usize",15]]],[[],["commonfreelistpageresource",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["address",3]]],null,[[]],[[]],[[]],[[],["usize",15]],[[],["address",3]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],null,[[["address",3],["usize",15]]],[[["address",3],["usize",15]]],[[["address",3],["usize",15],["usize",15],["map64",3]]],[[["usize",15],["map64",3]]],null,null,[[["address",3],["usize",15]]],[[["address",3]]],[[["usize",15]]],[[["address",3]]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["address",3]],[[],["address",3]],[[],["usize",15]],null,null,[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["options",3]]],[[["usize",15],["bool",15]],["address",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["address",3],["address",3]],["usize",15]],[[["address",3],["usize",15]],["address",3]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["address",3],["usize",15]],["result",6]],[[["formatter",3]],["result",6]],null,null,[[]],[[["address",3]]],[[["address",3],["bool",15]],["option",4]],[[["address",3]],["usize",15]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["address",3]],["bool",15]],null,[[["address",3],["usize",15]]],[[]],[[]],[[],["box",3]],[[["address",3],["usize",15]]],[[["address",3],["usize",15]],["result",6]],[[["address",3]],["address",3]],[[["address",3]],["address",3]],null,[[["address",3]],["option",4]],null,[[["address",3],["usize",15]],["option",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,[[["usize",15]]],[[["spacedescriptor",3],["usize",15],["address",3]],["address",3]],[[]],[[["commonfreelistpageresource",3]],["box",3]],[[["commonfreelistpageresource",3],["usize",15],["i32",15]],["box",3]],[[["address",3],["address",3]]],[[["address",3]]],[[["address",3]],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["address",3]],["usize",15]],[[["address",3]],["usize",15]],[[["address",3]],["spacedescriptor",3]],[[["commonfreelistpageresource",3]],["usize",15]],[[["address",3]],["address",3]],[[["address",3],["usize",15],["spacedescriptor",3]]],[[],["bool",15]],[[]],null,null,[[["usize",15]]],[[["spacedescriptor",3],["usize",15],["address",3]],["address",3]],[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[]],[[["commonfreelistpageresource",3]],["box",3]],[[["commonfreelistpageresource",3],["usize",15],["i32",15]],["box",3]],null,[[]],[[["usize",15]]],[[["usize",15]]],null,[[["usize",15]]],[[["address",3],["address",3]]],null,null,null,[[["address",3]]],[[["address",3]],["usize",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[["address",3]],["usize",15]],[[["address",3]],["usize",15]],[[["address",3]],["spacedescriptor",3]],[[["commonfreelistpageresource",3]],["usize",15]],[[["address",3]],["address",3]],null,[[],["usize",15]],[[["address",3],["usize",15],["spacedescriptor",3]]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["bool",15]],[[["address",3]],["bool",15]],[[]],[[]],[[["address",3]],["option",4,[["usize",15]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["mapstate",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["address",3],["usize",15]],["result",6]],[[["mapstate",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["address",3]],["bool",15]],[[["address",3],["usize",15]]],[[["address",3],["usize",15]]],[[["address",3],["usize",15]],["result",6]],[[]],[[["atomic",3],["address",3]],["result",6]],[[["atomic",3],["address",3]],["result",6]],[[["atomic",3],["address",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]],["usize",15]],[[["spacedescriptor",3],["usize",15],["usize",15],["vmthread",3]],["result",4,[["prallocresult",3],["prallocfail",3]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["commonpageresource",3]],null,[[],["commonpageresource",3]],null,null,[[],["address",3]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["usize",15]],[[],["address",3]],[[["address",3]],["address",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["spacedescriptor",3],["str",15]]],null,[[["mutexguard",3]],["bool",15]],[[["address",3],["usize",15],["usize",15],["map64",3]]],[[["usize",15],["map64",3]]],[[["mutexguard",3]]],[[["address",3],["usize",15]]],[[["usize",15]],["usize",15]],[[]],[[["address",3]]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[["usize",15]],["usize",15]],[[["spacedescriptor",3],["usize",15],["usize",15],["vmthread",3]],["result",4,[["prallocresult",3],["prallocfail",3]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15],["usize",15],["vmthread",3]]],[[],["usize",15]],[[],["commonpageresource",3]],[[],["commonpageresource",3]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["usize",15]],[[],["address",3]],[[["spacedescriptor",3],["usize",15],["usize",15],["vmthread",3]],["result",4,[["prallocresult",3],["prallocfail",3]]]],[[["spacedescriptor",3],["usize",15]],["address",3]],null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["bool",15],["bool",15],["map64",3]],["commonpageresource",3]],null,null,[[]],[[["address",3]]],[[["usize",15]],["usize",15]],[[],["usize",15]],[[]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["bool",15],["bool",15]]],[[],["map64",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["spacedescriptor",3]],[[]],[[],["spacedescriptor",3]],[[["address",3],["address",3]],["spacedescriptor",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["spacedescriptor",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["address",3]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["spacedescriptor",3]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["vmrequest",4]],[[]],[[["bool",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15],["bool",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["f32",15]]],[[]],[[["usize",15]]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["intarrayfreelist",3],["i32",15]]],[[["i32",15]],["i32",15]],[[],["i32",15]],null,[[],["i32",15]],null,[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["usize",15],["i32",15],["usize",15]]],null,[[["usize",15],["i32",15]]],[[["i32",15],["i32",15]]],[[],["vec",3]],null,[[],["vec",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["address",3]],["bool",15]],null,null,null,null,null,null,null,null,null,[[["address",3]],["address",3]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[["objectreference",3]]],null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["address",3]],null,null,[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[]],[[]],[[["address",3]],["bool",15]],[[["address",3],["address",3]]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[["usize",15]]],[[["objectreference",3]],["usize",15]],[[["objectreference",3]],["usize",15]],[[],["address",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4,[["setloggererror",3]]]],[[["usize",15],["usize",15]],["address",3]],[[["mmtk",3],["usize",15],["usize",15]],["address",3]],[[["mmtk",3],["usize",15]],["address",3]],[[["address",3]]],[[["mmtk",3],["address",3],["usize",15]]],null,[[["usize",15]],["address",3]],null,[[["address",3],["usize",15]],["address",3]],[[["mmtk",3],["address",3],["usize",15],["usize",15]],["address",3]],null,[[["usize",15],["usize",15]]],[[]],[[["usize",15]]],[[],["usize",15]],[[["usize",15],["usize",15]],["i32",15]],[[["usize",15]]],[[["usize",15],["usize",15]],["address",3]],[[["usize",15],["usize",15],["isize",15]],["address",3]],[[["usize",15],["usize",15],["isize",15]]],[[]],[[["address",3],["bool",15]],["usize",15]],[[["address",3]]],[[["address",3]],["usize",15]],[[["address",3],["usize",15]],["result",6]],[[["address",3],["usize",15]],["result",6]],[[],["string",3]],[[["error",3],["vmthread",3]],["never",15]],[[["address",3],["usize",15],["c_int",6],["c_int",6]],["result",6]],[[["address",3],["usize",15]],["result",6]],[[["address",3],["usize",15]],["result",6]],[[["address",3],["usize",15]],["result",6]],[[["address",3],["usize",15]],["result",6]],[[["address",3],["usize",15]]],[[["result",6]],["bool",15]],[[["fn",8],["partialeq",8]],["result",6]],[[["address",3],["usize",15]]],null,null,null,[[["metadataspec",4],["objectreference",3],["usize",15],["usize",15],["option",4,[["usize",15]]],["ordering",4],["ordering",4]],["bool",15]],[[["metadataspec",4],["objectreference",3],["usize",15],["ordering",4]],["usize",15]],[[["metadataspec",4],["objectreference",3],["usize",15],["ordering",4]],["usize",15]],null,null,[[["metadataspec",4],["objectreference",3],["option",4,[["usize",15]]],["option",4,[["ordering",4]]]],["usize",15]],null,null,[[["metadataspec",4],["objectreference",3],["usize",15],["option",4,[["usize",15]]],["option",4,[["ordering",4]]]]],null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["metadataspec",4]],[[]],[[["metadataspec",4],["objectreference",3],["usize",15],["usize",15],["option",4,[["usize",15]]],["ordering",4],["ordering",4]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["vec",3,[["sidemetadataspec",3]]]],[[],["sidemetadataspec",3]],[[["metadataspec",4],["objectreference",3],["usize",15],["ordering",4]],["usize",15]],[[["metadataspec",4],["objectreference",3],["usize",15],["ordering",4]],["usize",15]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["bool",15]],[[["metadataspec",4],["objectreference",3],["option",4,[["usize",15]]],["option",4,[["ordering",4]]]],["usize",15]],[[["metadataspec",4],["objectreference",3],["usize",15],["option",4,[["usize",15]]],["option",4,[["ordering",4]]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[],["headermetadataspec",3]],[[]],[[["headermetadataspec",3],["objectreference",3],["usize",15],["usize",15],["option",4,[["usize",15]]],["ordering",4],["ordering",4]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["headermetadataspec",3]],["bool",15]],[[["headermetadataspec",3],["objectreference",3],["usize",15],["ordering",4]],["usize",15]],[[["headermetadataspec",3],["objectreference",3],["usize",15],["ordering",4]],["usize",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["headermetadataspec",3],["objectreference",3],["option",4,[["usize",15]]],["option",4,[["ordering",4]]]],["usize",15]],[[["headermetadataspec",3]],["bool",15]],null,[[["headermetadataspec",3],["objectreference",3],["usize",15],["option",4,[["usize",15]]],["option",4,[["ordering",4]]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[["sidemetadataspec",3],["address",3],["usize",15]]],[[["sidemetadataspec",3],["address",3],["usize",15],["usize",15],["ordering",4],["ordering",4]],["bool",15]],null,null,[[["sidemetadataspec",3],["address",3]]],[[["sidemetadataspec",3],["address",3],["usize",15],["ordering",4]],["usize",15]],[[["sidemetadataspec",3],["address",3],["usize",15],["ordering",4]],["usize",15]],null,null,null,null,null,[[["sidemetadataspec",3],["address",3]],["usize",15]],[[["sidemetadataspec",3],["address",3],["ordering",4]],["usize",15]],null,null,null,[[["sidemetadataspec",3]],["usize",15]],null,null,null,null,null,null,null,null,[[["sidemetadataspec",3],["address",3],["usize",15]]],[[["sidemetadataspec",3],["address",3],["usize",15],["ordering",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["address",3]]],null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["sidemetadataspec",3],["address",3],["usize",15]]],[[["usize",15]],["usize",15]],[[],["sidemetadataspec",3]],[[],["sidemetadataoffset",19]],[[]],[[]],[[["sidemetadataspec",3],["address",3],["usize",15],["usize",15],["ordering",4],["ordering",4]],["bool",15]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["sidemetadataspec",3],["address",3]]],[[["sidemetadataspec",3]],["bool",15]],[[],["bool",15]],[[["sidemetadataspec",3],["address",3],["usize",15],["ordering",4]],["usize",15]],[[["sidemetadataspec",3],["address",3],["usize",15],["ordering",4]],["usize",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["usize",15]],["u8",15]],[[],["address",3]],[[]],[[],["usize",15]],null,[[]],[[]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["bool",15]],null,[[],["bool",15]],[[["sidemetadataspec",3]],["sidemetadataoffset",19]],[[],["usize",15]],[[["sidemetadataspec",3],["address",3]],["usize",15]],[[["sidemetadataspec",3],["address",3],["ordering",4]],["usize",15]],null,null,null,[[["address",3],["usize",15],["bool",15]],["result",6]],null,[[["sidemetadataspec",3]],["bool",15]],[[["sidemetadataspec",3],["address",3],["usize",15]]],[[],["vec",3,[["sidemetadataspec",3]]]],null,[[["usize",15]]],null,[[]],null,[[["sidemetadataspec",3],["address",3],["usize",15]]],[[["sidemetadataspec",3],["address",3],["usize",15],["ordering",4]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["address",3],["usize",15]],["result",6]],[[["address",3],["usize",15]],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["address",3]],[[],["sidemetadataoffset",19]],[[["sidemetadataspec",3]],["i32",15]],[[["sidemetadataspec",3],["address",3]],["address",3]],[[["sidemetadataspec",3],["address",3]],["address",3]],[[["sidemetadataspec",3],["address",3]],["u8",15]],[[["sidemetadataspec",3]],["u8",15]],[[["sidemetadataspec",3]],["usize",15]],[[["address",3],["usize",15],["sidemetadataspec",3],["bool",15]],["result",6,[["usize",15]]]],null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["rwlock",3]],[[["usize",15]]],[[["usize",15]]],[[],["mutex",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["sidemetadataspec",3],["address",3],["usize",15],["mathop",4]],["result",6,[["usize",15]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["bool",15]],["vec",3,[["sidemetadataspec",3]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["sidemetadatasanity",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["sidemetadataspec",3],["address",3],["usize",15],["usize",15]]],[[["sidemetadataspec",3],["address",3],["usize",15]]],[[],["result",6]],[[],["result",6]],[[["sidemetadataspec",3],["address",3],["usize",15]]],[[],["result",6]],[[],["result",6]],[[["sidemetadataspec",3],["address",3]]],[[["str",15],["sidemetadatacontext",3]]],[[["sidemetadataspec",3],["sidemetadataspec",3]],["result",6]],[[["sidemetadataspec",3],["address",3],["usize",15]]],[[["sidemetadataspec",3],["address",3],["usize",15],["usize",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["objectreference",3]],["usize",15]],[[["objectreference",3]]],[[["objectreference",3],["copysemantics",4],["gcworkercopycontext",3]],["objectreference",3]],[[],["option",4,[["isize",15]]]],[[["objectreference",3]],["usize",15]],[[["objectreference",3]],["bool",15]],[[["objectreference",3]],["bool",15]],[[["objectreference",3]],["bool",15]],[[["objectreference",3]],["objectreference",3]],[[["objectreference",3],["usize",15]],["objectreference",3]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["objectreference",3],["objectreference",3]]],null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["opaquepointer",3]],[[],["vmthread",3]],[[],["vmmutatorthread",3]],[[],["vmworkerthread",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["opaquepointer",3]],["bool",15]],[[["vmthread",3]],["bool",15]],[[["vmmutatorthread",3]],["bool",15]],[[["vmworkerthread",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["address",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["bool",15]],[[["opaquepointer",3]],["bool",15]],[[["vmthread",3]],["bool",15]],[[["vmmutatorthread",3]],["bool",15]],[[["vmworkerthread",3]],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["nurseryzeroingoptions",4]],[[],["planselector",4]],[[],["perfeventoptions",3]],[[],["mmtkoption",3]],[[],["nurserykind",4]],[[],["nurserysize",3]],[[],["options",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[["perfeventoptions",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["str",15]],["result",4,[["nurseryzeroingoptions",4]]]],[[["str",15]],["result",4,[["planselector",4]]]],[[["str",15]],["result",4]],[[["str",15]],["result",4,[["nurserykind",4]]]],[[["str",15]],["result",4]],null,[[],["usize",15]],[[],["usize",15]],null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],null,null,null,[[["perfeventoptions",3]],["bool",15]],[[["bool",15],["bool",15]]],[[["nurserykind",4],["usize",15]]],null,null,null,null,null,[[["str",15]],["result",4,[["nurserysize",3],["string",3]]]],[[["str",15]],["result",4,[["vec",3],["string",3]]]],null,null,null,[[],["bool",15]],[[["str",15]],["bool",15]],[[["str",15],["str",15]],["bool",15]],[[["str",15],["str",15]],["bool",15]],[[["str",15],["str",15]],["bool",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[["str",15]],["result",4,[["nurseryzeroingoptions",4]]]],[[],["result",4]],[[["str",15]],["result",4,[["planselector",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4,[["nurserykind",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[["i32",15]],["i32",15]],[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[],["i32",15]],null,[[["i32",15],["i32",15]],["i32",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["i32",15]],["i32",15]],[[],["address",3]],null,[[["i32",15]],["bool",15]],[[["i32",15],["i32",15]]],[[],["i32",15]],null,[[],["i32",15]],null,null,[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],null,null,[[["address",3],["usize",15]]],[[["address",3],["address",3],["i32",15],["i32",15],["i32",15],["i32",15]]],null,[[["i32",15]]],[[["i32",15],["i32",15]]],[[["i32",15],["i32",15]],["i32",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["i32",15]],[[],["i32",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["objectreference",3]]],[[["objectreference",3]]],[[["objectreference",3]]],[[["objectreference",3]]],[[]],null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["softrefprocessing",3]],[[],["weakrefprocessing",3]],[[],["phantomrefprocessing",3]],[[],["refforwarding",3]],[[],["refenqueue",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],null,[[["semantics",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["bool",15]]],[[["mmtk",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["semantics",4]],["referenceprocessor",3]],[[["objectreference",3]],["objectreference",3]],[[["objectreference",3]],["objectreference",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["objectreference",3]],["objectreference",3]],[[]],[[["semantics",4]]],[[]],[[]],[[]],[[]],[[]],null,null,[[["objectreference",3],["vec",3]],["option",4,[["objectreference",3]]]],null,[[["bool",15]]],[[["bool",15]]],[[["mmtk",3]]],[[["mmtk",3]]],[[["mmtk",3]]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["usize",15]],[[["fn",8]]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["bool",15]],["bool",15]],[[["usize",15],["usize",15]],["usize",15]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["bool",15]],["bool",15]],null,null,null,[[]],null,null,null,null,null,null,[[["vec",3]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3,[["objectreference",3]]],["bool",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[]],[[]],[[]],[[]],[[["vec",3],["bool",15],["mmtk",3]]],null,null,null,null,[[["objectreference",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[],["instant",3]],[[["usize",15]]],[[["usize",15]]],[[],["u64",15]],[[["instant",3],["instant",3]],["u64",15]],[[["usize",15]]],null,[[]],[[["option",4,[["bool",15]]]],["u64",15]],[[],["bool",15]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],null,[[],["bool",15]],[[],["string",3]],[[["usize",15]]],[[["usize",15]]],[[["u64",15]]],[[["u64",15]]],[[]],[[["bool",15]]],[[["bool",15]]],[[["option",4,[["bool",15]]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["option",4,[["bool",15]]]],["u64",15]],[[],["bool",15]],null,[[]],[[["u64",15]]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["bool",15]],null,[[],["string",3]],null,[[["string",3],["arc",3,[["sharedstats",3]]],["bool",15],["bool",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["bool",15]]],[[["bool",15]]],[[["option",4,[["bool",15]]]]],[[["u64",15]]],null,[[]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],null,[[["usize",15]]],[[["usize",15]]],null,[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["option",4,[["bool",15]]]],["u64",15]],[[],["bool",15]],null,[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["bool",15]],null,[[],["string",3]],null,[[["string",3],["arc",3,[["sharedstats",3]]],["bool",15],["bool",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["bool",15]]],[[["bool",15]]],[[["option",4,[["bool",15]]]]],[[["u64",15]]],null,[[]],null,null,[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["u64",15]]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["arc",3,[["mutex",3,[["eventcounter",3]]]]],["arc",3,[["mutex",3,[["eventcounter",3]]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],null,[[]],[[]],null,null,[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["options",3]]],[[["str",15],["bool",15],["bool",15]],["arc",3,[["mutex",3,[["eventcounter",3]]]]]],[[["str",15],["bool",15],["bool",15]],["mutex",3,[["sizecounter",3]]]],[[["str",15],["bool",15],["bool",15]],["arc",3,[["mutex",3,[["longcounter",3,[["monotonenanotime",3]]]]]]]],null,[[["hashmap",3]]],[[["mmtk",3]]],[[["bool",15]]],null,[[]],[[]],[[["mmtk",3]]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["address",3],["bool",15]]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["vec",3,[["address",3]]]],[[],["vec",3,[["address",3]]]],null,[[["address",3],["bool",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["bool",15]]],[[["formatter",3]],["result",6]],[[]],null,[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["vmmutatorthread",3]]],null,[[["headermetadataspec",3],["objectreference",3],["usize",15],["usize",15],["option",4,[["usize",15]]],["ordering",4],["ordering",4]],["bool",15]],[[["objectreference",3],["copysemantics",4],["gcworkercopycontext",3]],["objectreference",3]],[[["objectreference",3],["objectreference",3],["address",3]],["address",3]],[[["vec",3]]],[[["vec",3,[["objectreference",3]]]]],[[["objectreference",3]]],null,[[["vmworkerthread",3]]],[[["headermetadataspec",3],["objectreference",3],["usize",15],["ordering",4]],["usize",15]],[[["headermetadataspec",3],["objectreference",3],["usize",15],["ordering",4]],["usize",15]],[[["objectreference",3]],["isize",15]],[[["objectreference",3]],["usize",15]],[[["objectreference",3]],["usize",15]],[[],["option",4,[["mutator",3]]]],[[],["objectreference",3]],[[["objectreference",3],["address",3]],["objectreference",3]],[[["objectreference",3]],["objectreference",3]],[[["objectreference",3]],["usize",15]],[[["objectreference",3]]],[[],["plan",8]],[[["vmthread",3]],["bool",15]],[[]],[[["headermetadataspec",3],["objectreference",3],["option",4,[["usize",15]]],["option",4,[["ordering",4]]]],["usize",15]],[[["vmmutatorthread",3]],["mutator",3]],[[["bool",15],["vmworkerthread",3]]],[[],["usize",15]],null,[[["objectreference",3]],["address",3]],[[]],[[["vmworkerthread",3],["vmmutatorthread",3]]],[[["objectreference",3]],["address",3]],null,[[]],[[["vmworkerthread",3]]],[[["vmworkerthread",3],["objectreference",3]]],[[["vmworkerthread",3],["mutator",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],null,[[["objectreference",3]]],[[["objectreference",3],["objectreference",3]]],[[["vmthread",3],["gcthreadcontext",4]]],[[["vmworkerthread",3]]],[[["headermetadataspec",3],["objectreference",3],["usize",15],["option",4,[["usize",15]]],["option",4,[["ordering",4]]]]],[[],["bool",15]],[[["objectreference",3]],["objectreference",3]],[[]],null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["option",4,[["mutator",3]]]],[[],["plan",8]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[]],[[["vmthread",3]],["bool",15]],[[["vmmutatorthread",3]],["mutator",3]],[[],["synchronizedmutatoriterator",3]],[[],["synchronizedmutatoriterator",3]],[[],["option",4]],[[],["usize",15]],null,[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["objectreference",3],["gcworker",3]],["objectreference",3]],[[["objectreference",3],["gcworker",3]],["objectreference",3]],null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[["vmmutatorthread",3]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["vmthread",3],["allocationerror",4]]],[[["vmthread",3],["allocationerror",4]]],[[["vmworkerthread",3],["vmmutatorthread",3]]],[[["gcworker",3]]],[[["gcworker",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[["vmthread",3],["gcthreadcontext",4]]],[[["vmworkerthread",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,null,null,null,[[],["address",3]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["simpleedge",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["simpleedge",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["address",3]]],[[]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["objectreference",3]],[[],["objectreference",3]],[[["simpleedge",3]],["bool",15]],[[]],[[]],null,[[["objectreference",3]]],[[["objectreference",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["headermetadataspec",3],["objectreference",3],["usize",15],["usize",15],["option",4,[["usize",15]]],["ordering",4],["ordering",4]],["bool",15]],[[["objectreference",3],["copysemantics",4],["gcworkercopycontext",3]],["objectreference",3]],[[["objectreference",3],["objectreference",3],["address",3]],["address",3]],[[["objectreference",3]]],[[["headermetadataspec",3],["objectreference",3],["usize",15],["ordering",4]],["usize",15]],[[["headermetadataspec",3],["objectreference",3],["usize",15],["ordering",4]],["usize",15]],[[["objectreference",3]],["isize",15]],[[["objectreference",3]],["usize",15]],[[["objectreference",3]],["usize",15]],[[["objectreference",3],["address",3]],["objectreference",3]],[[["objectreference",3]],["usize",15]],[[["objectreference",3]]],[[["headermetadataspec",3],["objectreference",3],["option",4,[["usize",15]]],["option",4,[["ordering",4]]]],["usize",15]],[[["objectreference",3]],["address",3]],[[["objectreference",3]],["address",3]],null,[[["headermetadataspec",3],["objectreference",3],["usize",15],["option",4,[["usize",15]]],["option",4,[["ordering",4]]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["metadataspec",4]],[[],["metadataspec",4]],[[],["metadataspec",4]],[[],["metadataspec",4]],[[],["metadataspec",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[["isize",15]]],[[["isize",15]]],[[["isize",15]]],[[["isize",15]]],[[["isize",15]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["objectreference",3],["ordering",4]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["metadataspec",4]]],[[["metadataspec",4]]],[[["metadataspec",4]]],[[["metadataspec",4]]],[[["metadataspec",4]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[["objectreference",3]]],[[["objectreference",3]]],[[["vmworkerthread",3]]],[[],["objectreference",3]],[[["objectreference",3]],["objectreference",3]],[[]],[[["objectreference",3]]],[[["objectreference",3],["objectreference",3]]],null,null,null,null,null,null,null,null,[[["vec",3]]],[[["vec",3,[["objectreference",3]]]]],[[["bool",15],["vmworkerthread",3]]],[[]],[[["vmworkerthread",3],["objectreference",3]]],[[["vmworkerthread",3],["objectreference",3]]],[[["vmworkerthread",3],["objectreference",3]]],[[["vmworkerthread",3],["mutator",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3],["objectreference",3]],["bool",15]],[[["vmworkerthread",3],["objectreference",3]],["bool",15]],[[],["bool",15]],[[["objectreference",3]],["objectreference",3]],[[]]],"p":[[4,"AllocationSemantics"],[4,"BarrierSelector"],[8,"PolicyCopyContext"],[8,"Plan"],[8,"MutatorContext"],[3,"Mutator"],[3,"MMTK"],[8,"ObjectQueue"],[3,"MMTKBuilder"],[3,"MMTK_GIT_VERSION"],[3,"MMTK_GIT_VERSION_STRING"],[3,"MMTK_FULL_BUILD_INFO"],[3,"MMTK_FULL_BUILD_INFO_STRING"],[3,"VM_MAP"],[3,"MMAPPER"],[4,"BarrierWriteTarget"],[3,"PlanConstraints"],[3,"ObjectsClosure"],[8,"Barrier"],[3,"VectorObjectQueue"],[13,"Object"],[13,"Slot"],[3,"NoBarrier"],[3,"ObjectRememberingBarrier"],[3,"RequestSync"],[3,"GCRequester"],[3,"ALLOCATOR_MAPPING"],[3,"GenCopyNurseryGCWorkContext"],[3,"GenCopyGCWorkContext"],[3,"GenCopy"],[3,"GenNurseryProcessEdges"],[3,"Gen"],[3,"GenImmixNurseryGCWorkContext"],[3,"GenImmixMatureGCWorkContext"],[3,"GenImmix"],[4,"GcStatus"],[3,"BasePlan"],[3,"CommonPlan"],[8,"PlanTraceObject"],[3,"ImmixGCWorkContext"],[3,"Immix"],[3,"ALLOCATOR_MAPPING"],[3,"MarkCompactGCWorkContext"],[3,"CalculateForwardingAddress"],[3,"UpdateReferences"],[3,"Compact"],[3,"MarkCompact"],[3,"ALLOCATOR_MAPPING"],[3,"MSGCWorkContext"],[3,"MSSweepChunk"],[3,"MSSweepChunks"],[3,"MarkSweep"],[3,"ALLOCATOR_MAPPING"],[3,"ReservedAllocators"],[3,"MutatorConfig"],[3,"NoGC"],[3,"ALLOCATOR_MAPPING_SINGLE_SPACE"],[3,"ALLOCATOR_MAPPING"],[3,"PPGCWorkContext"],[3,"PageProtect"],[3,"ALLOCATOR_MAPPING"],[3,"SSGCWorkContext"],[3,"SemiSpace"],[3,"ALLOCATOR_MAPPING"],[3,"CopySpaceCopyContext"],[3,"CopySpace"],[8,"PolicyTraceObject"],[3,"Block"],[4,"BlockState"],[3,"BlockList"],[13,"Reusable"],[3,"Chunk"],[3,"ChunkMap"],[4,"ChunkState"],[3,"SweepChunk"],[3,"Defrag"],[3,"ImmixSpace"],[3,"ImmixCopyContext"],[3,"PrepareBlockState"],[3,"Line"],[3,"ImmortalSpace"],[3,"LargeObjectSpace"],[3,"LockFreeImmortalSpace"],[3,"MallocObjectSize"],[3,"MallocSpace"],[3,"CHUNK_METADATA"],[3,"CHUNK_MAP_LOCK"],[3,"MAX_METADATA_ADDRESS"],[3,"MarkCompactObjectSize"],[3,"MarkCompactSpace"],[3,"GCWorkerMutRef"],[8,"Space"],[3,"CommonSpace"],[3,"SFTMap"],[3,"SpaceOptions"],[3,"EmptySpaceSFT"],[8,"SFT"],[3,"ScanStackRoot"],[4,"WorkBucketStage"],[8,"ProcessEdgesWork"],[3,"GCController"],[3,"GCWorker"],[8,"GCWork"],[3,"StopMutators"],[3,"VMProcessWeakRefs"],[3,"ScanStackRoots"],[3,"ScanVMSpecificRoots"],[8,"ScanObjectsWork"],[3,"ScheduleCollection"],[3,"Prepare"],[3,"PrepareMutator"],[3,"Release"],[3,"ReleaseMutator"],[3,"ProcessEdgesBase"],[3,"SFTProcessEdges"],[3,"ProcessEdgesWorkRootsWorkFactory"],[3,"ScanObjects"],[3,"ProcessModBuf"],[3,"PlanProcessEdges"],[3,"PlanScanObjects"],[3,"PrepareCollector"],[3,"ReleaseCollector"],[3,"EndOfGC"],[4,"CoordinatorMessage"],[3,"GCWorkScheduler"],[13,"Work"],[3,"WorkerLocalStat"],[3,"WorkStat"],[3,"SchedulerStat"],[8,"GCWorkContext"],[3,"WorkBucket"],[3,"BucketQueue"],[3,"WorkCounterBase"],[3,"WorkDuration"],[8,"WorkCounterClone"],[8,"WorkCounter"],[3,"WorkerGroup"],[3,"GCWorkerShared"],[3,"SynchronizedCounter"],[3,"Address"],[3,"ObjectReference"],[4,"AllocatorSelector"],[4,"AllocationError"],[8,"Allocator"],[3,"MarkCompactAllocator"],[3,"BumpAllocator"],[3,"LargeObjectAllocator"],[3,"MallocAllocator"],[13,"BumpPointer"],[13,"LargeObject"],[13,"Malloc"],[13,"Immix"],[13,"MarkCompact"],[3,"Allocators"],[3,"ImmixAllocator"],[3,"AnalysisManager"],[8,"RtAnalysis"],[3,"GcHookWork"],[3,"GcCounter"],[3,"ObjectCounter"],[3,"PerSizeClassObjectCounter"],[4,"CopySelector"],[4,"CopySemantics"],[3,"GCWorkerCopyContext"],[3,"CopyConfig"],[13,"CopySpace"],[13,"Immix"],[3,"EdgeLogger"],[3,"Finalization"],[3,"ForwardFinalization"],[3,"FinalizableProcessor"],[8,"GenericFreeList"],[3,"PageAccounting"],[3,"FreeListPageResource"],[3,"CommonFreeListPageResource"],[3,"FreeListPageResourceSync"],[3,"HeapMeta"],[3,"FragmentedMapper"],[8,"Map"],[3,"Map64"],[4,"MapState"],[8,"Mmapper"],[4,"MonotonePageResourceConditional"],[3,"MonotonePageResource"],[3,"MonotonePageResourceSync"],[13,"Contiguous"],[3,"CommonPageResource"],[8,"PageResource"],[3,"PRAllocResult"],[3,"PRAllocFail"],[3,"SpaceDescriptor"],[4,"VMRequest"],[13,"Fixed"],[13,"Extent"],[13,"Fraction"],[3,"IntArrayFreeList"],[3,"DefaultObjectSize"],[8,"Region"],[3,"ObjectIterator"],[3,"RegionIterator"],[8,"LinearScanObjectSize"],[4,"MetadataSpec"],[13,"InHeader"],[13,"OnSide"],[3,"HeaderMetadataSpec"],[19,"SideMetadataOffset"],[3,"MetadataByteArrayRef"],[3,"SideMetadataContext"],[3,"SideMetadataSpec"],[3,"SideMetadataSanity"],[4,"MathOp"],[3,"CONTENT_SANITY_MAP"],[3,"SANITY_LOCK"],[3,"OpaquePointer"],[3,"VMThread"],[3,"VMMutatorThread"],[3,"VMWorkerThread"],[4,"NurseryZeroingOptions"],[4,"NurseryKind"],[4,"PlanSelector"],[3,"Options"],[3,"PerfEventOptions"],[3,"MMTKOption"],[3,"NurserySize"],[3,"RawMemoryFreeList"],[3,"SoftRefProcessing"],[3,"WeakRefProcessing"],[3,"PhantomRefProcessing"],[3,"RefForwarding"],[3,"RefEnqueue"],[4,"Semantics"],[3,"ReferenceProcessor"],[3,"ReferenceProcessors"],[3,"ReferenceProcessorSync"],[3,"InitializeOnce"],[3,"ScheduleSanityGC"],[3,"SanityChecker"],[3,"SanityPrepare"],[3,"SanityRelease"],[3,"SanityGCProcessEdges"],[8,"Diffable"],[3,"MonotoneNanoTime"],[8,"Counter"],[3,"EventCounter"],[3,"LongCounter"],[3,"SizeCounter"],[3,"SharedStats"],[3,"Stats"],[3,"TreadMill"],[3,"VMGlobalLogBitSpec"],[3,"VMLocalForwardingPointerSpec"],[3,"VMLocalForwardingBitsSpec"],[3,"VMLocalMarkBitSpec"],[3,"VMLocalLOSMarkNurserySpec"],[8,"VMBinding"],[4,"GCThreadContext"],[8,"ReferenceGlue"],[8,"Collection"],[8,"ObjectModel"],[8,"RootsWorkFactory"],[8,"ActivePlan"],[8,"Finalizable"],[8,"Scanning"],[8,"ObjectTracer"],[8,"EdgeVisitor"],[13,"Controller"],[13,"Worker"],[3,"SynchronizedMutatorIterator"],[3,"SimpleEdge"],[8,"Edge"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};