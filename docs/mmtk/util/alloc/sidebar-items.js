initSidebarItems({"enum":[["AllocationError","A list of errors that MMTk can encounter during allocation."],["AllocatorSelector",""]],"fn":[["fill_alignment_gap",""]],"mod":[["allocator","! Various allocators implementation. The allocator trait and allocation-related functions."],["allocators","A list of all the allocators, embedded in Mutator"],["bumpallocator","Bump pointer allocator"],["embedded_meta_data","Embedded metadata pages"],["immix_allocator","Immix allocator"],["large_object_allocator","Large object allocator"],["malloc_allocator","An alloactor backed by malloc"],["markcompact_allocator","Mark compact allocator (actually a bump pointer allocator with an extra heade word)"],["object_ref_guard","Functions to ensure an object reference for an allocation has valid metadata. This module includes functions to make sure the following invariant always holds: for each object we allocate (`[cell, cell + bytes)`), the metadata for the object reference (`object_ref`) is always in the range of the allocated memory. Given that we always initialize metadata based on chunks, we simply need to make sure that `object_ref` is in the same chunk as `[cell, cell + bytes)`. In other words, we avoid allocating an address for which the object reference may be in another chunk."]],"struct":[["BumpAllocator",""],["LargeObjectAllocator",""],["MallocAllocator",""],["MarkCompactAllocator","A thin wrapper(specific implementation) of bump allocator reserve extra bytes when allocating"]],"trait":[["Allocator","A trait which implements allocation routines. Every allocator needs to implements this trait."]]});